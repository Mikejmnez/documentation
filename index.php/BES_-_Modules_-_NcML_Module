
<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>BES - Modules - NcML Module - OPeNDAP Documentation</title>
</head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-BES_-_Modules_-_NcML_Module skin-monobook action-view">
<div id="globalWrapper">
<div id="column-content"><div id="content" class="mw-body-primary" role="main">
	
	
	<h1 id="firstHeading" class="firstHeading" lang="en"><span dir="auto">BES - Modules - NcML Module</span></h1>
	<div id="bodyContent" class="mw-body">
		<div id="siteSub">From OPeNDAP Documentation</div>
		<div id="contentSub"></div>
		

		<!-- start content -->
<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><div id="toc" class="toc"><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Introduction"><span class="tocnumber">1</span> <span class="toctext">Introduction</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="#Features"><span class="tocnumber">1.1</span> <span class="toctext">Features</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="#Installation_from_Source"><span class="tocnumber">1.2</span> <span class="toctext">Installation from Source</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-4"><a href="#Installation_Overview"><span class="tocnumber">2</span> <span class="toctext">Installation Overview</span></a>
<ul>
<li class="toclevel-2 tocsection-5"><a href="#Requirement:_International_Components_for_Unicode_.28ICU.29_Library"><span class="tocnumber">2.1</span> <span class="toctext">Requirement: International Components for Unicode (ICU) Library</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="#Configuration_Parameters"><span class="tocnumber">2.2</span> <span class="toctext">Configuration Parameters</span></a>
<ul>
<li class="toclevel-3 tocsection-7"><a href="#TempDirectory"><span class="tocnumber">2.2.1</span> <span class="toctext">TempDirectory</span></a></li>
<li class="toclevel-3 tocsection-8"><a href="#GlobalAttributesContainerName"><span class="tocnumber">2.2.2</span> <span class="toctext">GlobalAttributesContainerName</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-9"><a href="#Testing_Installation"><span class="tocnumber">2.3</span> <span class="toctext">Testing Installation</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-10"><a href="#Functionality"><span class="tocnumber">3</span> <span class="toctext">Functionality</span></a>
<ul>
<li class="toclevel-2 tocsection-11"><a href="#.3Cnetcdf.3E_Element"><span class="tocnumber">3.1</span> <span class="toctext">&lt;netcdf&gt; Element</span></a>
<ul>
<li class="toclevel-3 tocsection-12"><a href="#Local_vs._Remote_Datasets"><span class="tocnumber">3.1.1</span> <span class="toctext">Local vs. Remote Datasets</span></a></li>
<li class="toclevel-3 tocsection-13"><a href="#Unsupported_Attributes"><span class="tocnumber">3.1.2</span> <span class="toctext">Unsupported Attributes</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-14"><a href="#.3CreadMetadata.3E_Element"><span class="tocnumber">3.2</span> <span class="toctext">&lt;readMetadata&gt; Element</span></a></li>
<li class="toclevel-2 tocsection-15"><a href="#.3Cexplicit.3E_element"><span class="tocnumber">3.3</span> <span class="toctext">&lt;explicit&gt; element</span></a></li>
<li class="toclevel-2 tocsection-16"><a href="#.3Cdimension.3E_Element"><span class="tocnumber">3.4</span> <span class="toctext">&lt;dimension&gt; Element</span></a></li>
<li class="toclevel-2 tocsection-17"><a href="#.3Cvariable.3E_Element"><span class="tocnumber">3.5</span> <span class="toctext">&lt;variable&gt; Element</span></a>
<ul>
<li class="toclevel-3 tocsection-18"><a href="#Specifying_Lexical_Scope_with_.3Cvariable_type.3D.22.22.3E"><span class="tocnumber">3.5.1</span> <span class="toctext">Specifying Lexical Scope with &lt;variable type=""&gt;</span></a>
<ul>
<li class="toclevel-4 tocsection-19"><a href="#Nested_DAP_Structure_and_Grid_Scopes"><span class="tocnumber">3.5.1.1</span> <span class="toctext">Nested DAP Structure and Grid Scopes</span></a></li>
<li class="toclevel-4 tocsection-20"><a href="#Adding_Multiple_Attributes_to_the_Same_Variable"><span class="tocnumber">3.5.1.2</span> <span class="toctext">Adding Multiple Attributes to the Same Variable</span></a></li>
</ul>
</li>
<li class="toclevel-3 tocsection-21"><a href="#Renaming_Existing_Variables"><span class="tocnumber">3.5.2</span> <span class="toctext">Renaming Existing Variables</span></a></li>
<li class="toclevel-3 tocsection-22"><a href="#Adding_a_New_Scalar_Variable"><span class="tocnumber">3.5.3</span> <span class="toctext">Adding a New Scalar Variable</span></a></li>
<li class="toclevel-3 tocsection-23"><a href="#Adding_a_New_Structure_Variable"><span class="tocnumber">3.5.4</span> <span class="toctext">Adding a New Structure Variable</span></a></li>
<li class="toclevel-3 tocsection-24"><a href="#Adding_a_New_N-dimensional_Array"><span class="tocnumber">3.5.5</span> <span class="toctext">Adding a New N-dimensional Array</span></a></li>
<li class="toclevel-3 tocsection-25"><a href="#Specifying_the_new_coordinate_variable_for_a_joinNew_aggregation"><span class="tocnumber">3.5.6</span> <span class="toctext">Specifying the new coordinate variable for a joinNew aggregation</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-26"><a href="#.3Cvalues.3E_Element"><span class="tocnumber">3.6</span> <span class="toctext">&lt;values&gt; Element</span></a>
<ul>
<li class="toclevel-3 tocsection-27"><a href="#Changing_the_Separator_Tokens"><span class="tocnumber">3.6.1</span> <span class="toctext">Changing the Separator Tokens</span></a></li>
<li class="toclevel-3 tocsection-28"><a href="#Autogeneration_of_Uniform_Arrays"><span class="tocnumber">3.6.2</span> <span class="toctext">Autogeneration of Uniform Arrays</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-29"><a href="#.3Cattribute.3E_Element"><span class="tocnumber">3.7</span> <span class="toctext">&lt;attribute&gt; Element</span></a>
<ul>
<li class="toclevel-3 tocsection-30"><a href="#Adding_New_Attributes_or_Modifying_an_Existing_Attribute"><span class="tocnumber">3.7.1</span> <span class="toctext">Adding New Attributes or Modifying an Existing Attribute</span></a>
<ul>
<li class="toclevel-4 tocsection-31"><a href="#Arrays"><span class="tocnumber">3.7.1.1</span> <span class="toctext">Arrays</span></a></li>
<li class="toclevel-4 tocsection-32"><a href="#Structures_.28Containers.29"><span class="tocnumber">3.7.1.2</span> <span class="toctext">Structures (Containers)</span></a></li>
<li class="toclevel-4 tocsection-33"><a href="#Renaming_an_Existing_Attribute_or_Attribute_Container"><span class="tocnumber">3.7.1.3</span> <span class="toctext">Renaming an Existing Attribute or Attribute Container</span></a></li>
</ul>
</li>
<li class="toclevel-3 tocsection-34"><a href="#DAP_OtherXML_Extension"><span class="tocnumber">3.7.2</span> <span class="toctext">DAP <i>OtherXML</i> Extension</span></a>
<ul>
<li class="toclevel-4 tocsection-35"><a href="#Errors"><span class="tocnumber">3.7.2.1</span> <span class="toctext">Errors</span></a></li>
<li class="toclevel-4 tocsection-36"><a href="#Example"><span class="tocnumber">3.7.2.2</span> <span class="toctext">Example</span></a></li>
<li class="toclevel-4 tocsection-37"><a href="#Namespace_Closure"><span class="tocnumber">3.7.2.3</span> <span class="toctext">Namespace Closure</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-2 tocsection-38"><a href="#.3Cremove.3E_Element"><span class="tocnumber">3.8</span> <span class="toctext">&lt;remove&gt; Element</span></a></li>
<li class="toclevel-2 tocsection-39"><a href="#.3Caggregation.3E_Element"><span class="tocnumber">3.9</span> <span class="toctext">&lt;aggregation&gt; Element</span></a></li>
<li class="toclevel-2 tocsection-40"><a href="#.3Cscan.3E_Element"><span class="tocnumber">3.10</span> <span class="toctext">&lt;scan&gt; Element</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-41"><a href="#Errors_2"><span class="tocnumber">4</span> <span class="toctext">Errors</span></a>
<ul>
<li class="toclevel-2 tocsection-42"><a href="#Internal_Errors"><span class="tocnumber">4.1</span> <span class="toctext">Internal Errors</span></a></li>
<li class="toclevel-2 tocsection-43"><a href="#Resource_Not_Found_Errors"><span class="tocnumber">4.2</span> <span class="toctext">Resource Not Found Errors</span></a></li>
<li class="toclevel-2 tocsection-44"><a href="#Parse_Errors"><span class="tocnumber">4.3</span> <span class="toctext">Parse Errors</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-45"><a href="#Grid_Metadata_Tutorial"><span class="tocnumber">5</span> <span class="toctext">Grid Metadata Tutorial</span></a></li>
<li class="toclevel-1 tocsection-46"><a href="#Aggregation_Tutorials"><span class="tocnumber">6</span> <span class="toctext">Aggregation Tutorials</span></a>
<ul>
<li class="toclevel-2 tocsection-47"><a href="#Union"><span class="tocnumber">6.1</span> <span class="toctext">Union</span></a></li>
<li class="toclevel-2 tocsection-48"><a href="#JoinNew"><span class="tocnumber">6.2</span> <span class="toctext">JoinNew</span></a></li>
<li class="toclevel-2 tocsection-49"><a href="#JoinExisting"><span class="tocnumber">6.3</span> <span class="toctext">JoinExisting</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-50"><a href="#Additions.2FChanges_to_NcML_2.2"><span class="tocnumber">7</span> <span class="toctext">Additions/Changes to NcML 2.2</span></a>
<ul>
<li class="toclevel-2 tocsection-51"><a href="#Attribute_Structures_.28Containers.29"><span class="tocnumber">7.1</span> <span class="toctext">Attribute Structures (Containers)</span></a></li>
<li class="toclevel-2 tocsection-52"><a href="#Unspecified_Variable_Type_Matching_for_Lexical_Scope"><span class="tocnumber">7.2</span> <span class="toctext">Unspecified Variable Type Matching for Lexical Scope</span></a></li>
<li class="toclevel-2 tocsection-53"><a href="#DAP_2_Types"><span class="tocnumber">7.3</span> <span class="toctext">DAP 2 Types</span></a></li>
<li class="toclevel-2 tocsection-54"><a href="#DAP_OtherXML_Attribute_Type"><span class="tocnumber">7.4</span> <span class="toctext">DAP OtherXML Attribute Type</span></a></li>
<li class="toclevel-2 tocsection-55"><a href="#Forward_Declaration_of_Dimensions"><span class="tocnumber">7.5</span> <span class="toctext">Forward Declaration of Dimensions</span></a></li>
<li class="toclevel-2 tocsection-56"><a href="#Aggregation_Element_Location_and_Processing_Order_Differences"><span class="tocnumber">7.6</span> <span class="toctext">Aggregation Element Location and Processing Order Differences</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-57"><a href="#Backward_Compatibility_Issues"><span class="tocnumber">8</span> <span class="toctext">Backward Compatibility Issues</span></a>
<ul>
<li class="toclevel-2 tocsection-58"><a href="#NetCDF"><span class="tocnumber">8.1</span> <span class="toctext">NetCDF</span></a></li>
<li class="toclevel-2 tocsection-59"><a href="#HDF4.2FHDF5"><span class="tocnumber">8.2</span> <span class="toctext">HDF4/HDF5</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-60"><a href="#Known_Bugs"><span class="tocnumber">9</span> <span class="toctext">Known Bugs</span></a></li>
<li class="toclevel-1 tocsection-61"><a href="#Planned_Future_Enhancements"><span class="tocnumber">10</span> <span class="toctext">Planned Future Enhancements</span></a></li>
<li class="toclevel-1 tocsection-62"><a href="#Copyright"><span class="tocnumber">11</span> <span class="toctext">Copyright</span></a></li>
</ul>
</div>

<h1><span class="mw-headline" id="Introduction"><span class="mw-headline-number">1</span> Introduction</span></h1>
<p><b>Welcome to the OPeNDAP NcML Data Handler Module v1.4.2 for <a rel="nofollow" class="external text" href="http://www.opendap.org/download/hyrax.html">Hyrax</a></b>
</p><p><b>Note</b>: In the past Hyrax was distributed as a collection of separate binary packages which data providers would choose to install to build up a server with certain features. As the number of modules grew, this became more and more complex and time consuming. As of Hyrax 1.12 we started distributing the server in three discreet packages - the DAP library, the BES daemon and all of the most important handlers (including the NcML handler described here) and the Hyrax web services front end. In some places in this documentation you may read about 'installing the handler' or other similar text, and can safely ignore that. If you have a modern version of the server it includes this handler.
</p><p><br />
</p>
<h2><span class="mw-headline" id="Features"><span class="mw-headline-number">1.1</span> Features</span></h2>
<p>This version currently implements a subset of NcML 2.2
functionality, along with some OPeNDAP extensions:
</p>
<ul>
<li> Metadata Manipulation
<ul>
<li> Addition, Removal, and Modification of attributes to other datasets (NetCDF, HDF4, HDF5, etc.) served by the same Hyrax 1.6 server
</li>
<li> Extends NcML 2.2 to allow for common nested "attribute containers" 
</li>
<li> Attributes can be DAP2 types as well as the NcML types 
</li>
<li> Attributes can be of the special "OtherXML" type for injecting arbitrary XML into a DDX response
</li>
</ul>
</li>
<li> Data Manipulation
<ul>
<li> Addition of new data variables (scalars or arrays of basic types as well as structures) 
</li>
<li> Variables may be removed from the wrapped dataset
</li>
<li> Allows the creation of "pure virtual" datasets which do not wrap another dataset
</li>
</ul>
</li>
<li> Aggregations: JoinNew, JoinExisting Union <a href="#Aggregation_Tutorials">#Aggregation Tutorials</a>
<ul>
<li> JoinNew Aggregation (<a href="../index.php/NCML_Module_Aggregation_JoinNew" title="NCML Module Aggregation JoinNew">NCML_Module_Aggregation_JoinNew</a>)
<ul>
<li> Allows multiple datasets to be "joined" by creating a new outer dimension for the aggregated variable
</li>
<li> Aggregation member datasets can be listed explicitly with explicit coordinates for the new dimension for each member
</li>
<li> Scan: Aggregations can be specified "automatically" by scanning a directory for files matching certain criteria, such as a suffix or regular expression.
</li>
<li> Metadata may be added to the new coordinate variable for the new dimension
</li>
</ul>
</li>
<li> JoinExisting Aggregation (<a href="../index.php/NCML_Module_Aggregation_JoinExisting" title="NCML Module Aggregation JoinExisting">NCML_Module_Aggregation_JoinExisting</a>)
<ul>
<li> The <i>ncoords</i> element can be left out of the <i>joinexisting</i> granules. However, this may be a slow operation, depending on the number of granules in the aggregation.
</li>
<li> Scan may also be used with <i>ncoords</i> attribute for uniform sized granules
</li>
<li> Only allows join dimension to be aggregated from granules and not overridden in NcML
</li>
</ul>
</li>
<li> Union Aggregation (<a href="../index.php/NCML_Module_Aggregation_Union" title="NCML Module Aggregation Union">NCML_Module_Aggregation_Union</a>)
<ul>
<li> Merges all member datasets into one by taking the first named instance of variables and metadata from the members
</li>
<li> Useful for combining two or more datasets with different variables into a single set
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2><span class="mw-headline" id="Installation_from_Source"><span class="mw-headline-number">1.2</span> Installation from Source</span></h2>
<p>For information on how to build and install the NcML Data Module, please see the INSTALL file that came with the source distribution.
</p>
<h1><span class="mw-headline" id="Installation_Overview"><span class="mw-headline-number">2</span> Installation Overview</span></h1>
<p>The NcML Module requires a working Hyrax 1.6 installation.  It is a module
that is dynamically loaded into the Hyrax BES (Back End Server) to
allow it to handle NcML files.  
</p><p>Please see the file INSTALL for full build and install instructions as
well as requirements.  
</p><p><b>NOTE:</b> After installation, you MUST restart Hyrax by restarting the BES and
OLFS so the NcML Module is loaded!
</p>
<h2><span class="mw-headline" id="Requirement:_International_Components_for_Unicode_.28ICU.29_Library"><span class="mw-headline-number">2.1</span> Requirement: International Components for Unicode (ICU) Library</span></h2>
<p>The most important external requirement is an installation of the International Components for Unicode (ICU) version 3.6 or higher (tested up to 4.2.1).   The source distributions (as well as some binaries) may be found at the site: <a rel="nofollow" class="external free" href="http://site.icu-project.org/download">http://site.icu-project.org/download</a>
</p><p>If you are using Linux RPM's to run Hyrax, you can get an RPM for ICU as well.  Search for the RPM named "libicu" using a package manager or yum, e.g.   If you are compiling the module from source, you will also need the RPM "libicu-devel" to get the headers installed.  
</p><p>If you install in the default locations, the ncml_module should find the libraries and headers.  Otherwise, please consult the INSTALL file for more information about installing ICU to a non-standard location.
</p>
<h2><span class="mw-headline" id="Configuration_Parameters"><span class="mw-headline-number">2.2</span> Configuration Parameters</span></h2>
<h4><span class="mw-headline" id="TempDirectory"><span class="mw-headline-number">2.2.1</span> TempDirectory</span></h4>
<p>Where should the NCML handler store temporary data on the server's file system. 
</p><p>Default value is '/tmp'.
</p>
<pre>NCML.TempDirectory=/tmp
</pre>
<h4><span class="mw-headline" id="GlobalAttributesContainerName"><span class="mw-headline-number">2.2.2</span> GlobalAttributesContainerName</span></h4>
<p>In DAP2 all global attributes must be held in containers. However, the default behavior for the handler is set for DAP4, where this requirement is relaxed so that any kind of attribute can be a global attribute. However, to support older clients that only understand DAP2, the handler will bundle top-level non-container attributes into a container. Use this option to set the name of that container. By default, the container is named <i>NC_GLOBAL</i> (because lots of clients look for that name), but it can be anything you choose.
</p>
<pre>NCML.GlobalAttributesContainerName=NC_GLOBAL
</pre>
<h2><span class="mw-headline" id="Testing_Installation"><span class="mw-headline-number">2.3</span> Testing Installation</span></h2>
<p>Test data is provided to see if the installation was successful.  The file sample_virtual_dataset.ncml is a dataset purely created in NcML and doesn't contain an underlying dataset.  
You may also view fnoc1_improved.ncml to test adding attributes to an existing netCDF dataset (fnoc1.nc), but this requires the netCDF data handler to be
installed first!  Several other examples installed also use the HDF4 and HDF5 handlers.
</p>
<h1><span class="mw-headline" id="Functionality"><span class="mw-headline-number">3</span> Functionality</span></h1>
<p>This version of the NcML Module implements a subset of NcML 2.2
functionality.  The reader is directed to <a rel="nofollow" class="external free" href="http://www.unidata.ucar.edu/software/netcdf/ncml/v2.2/">http://www.unidata.ucar.edu/software/netcdf/ncml/v2.2/</a> for more information on NcML.
</p><p>Our module can currently:
</p>
<ul>
<li>Refer only to files being served locally (not remotely)
</li>
<li>Add, modify, and remove attribute metadata to a dataset
</li>
<li>Create a purely virtual dataset using just NcML and no underlying dataset
</li>
<li>Create new scalar variables of any simple NcML type or simple DAP type
</li>
<li>Create new Structure variables (which can contain new child variables)
</li>
<li>Create new N-dimensional arrays of simple types (NcML or DAP)
</li>
<li>Remove existing variables from a wrapped dataset
</li>
<li>Rename existing variables in a wrapped dataset
</li>
<li>Name dimensions as a mnemonic for specifying Array shapes
</li>
<li>Perform union aggregations on multiple datasets, virtual or wrapped or both
</li>
<li>Perform joinNew aggregations to merge a variable across multiple datasets by creating a new outer dimension
</li>
<li>Specify aggregation member datasets by scanning directories for files matching certain criteria
</li>
</ul>
<p>We describe each supported NcML element in detail below.
</p>
<h2><span class="mw-headline" id=".3Cnetcdf.3E_Element"><span class="mw-headline-number">3.1</span> &lt;netcdf&gt; Element</span></h2>
<p>The &lt;netcdf&gt; element is used to define a dataset, either a wrapped dataset that is to be modified, a pure virtual dataset, or a member dataset of an aggregation.  The &lt;netcdf&gt; element is assumed to be the topmost node, or as a child of an aggregation element.
</p>
<h3><span class="mw-headline" id="Local_vs._Remote_Datasets"><span class="mw-headline-number">3.1.1</span> Local vs. Remote Datasets</span></h3>
<p>We assume that the location attribute (<i>netcdf@location</i>) refers to the full path (with respect to the BES data root directory) of a <i><b>local</b></i> dataset (served by the same Hyrax server).  The current version of the module cannot be used to modify remote datasets.
</p><p>If <i>netcdf@location</i> is the empty string (or unspecified, as empty is the default), the dataset is a pure virtual dataset, fully specified within the NcML file itself.  Attributes and variables may be fully described and accessed with constraints just as normal datasets in this manner.  The installed sample datafile "sample_virtual_dataset.ncml" is an example test case for this functionality.
</p>
<h3><span class="mw-headline" id="Unsupported_Attributes"><span class="mw-headline-number">3.1.2</span> Unsupported Attributes</span></h3>
<p>The current version does not support the following attributes of &lt;netcdf&gt;:
</p>
<ul>
<li>enhance
</li>
<li>addRecords
</li>
<li>fmrcDefinition (will be supported when FMRC aggregation is added)
</li>
</ul>
<h2><span class="mw-headline" id=".3CreadMetadata.3E_Element"><span class="mw-headline-number">3.2</span> &lt;readMetadata&gt; Element</span></h2>
<p>The &lt;readMetadata/&gt; element is the default, so is effectively not needed.
</p>
<h2><span class="mw-headline" id=".3Cexplicit.3E_element"><span class="mw-headline-number">3.3</span> &lt;explicit&gt; element</span></h2>
<p>The &lt;explicit/&gt; element simply clears all attribute tables in the referred to netcdf@location before applying the rest of the 
NcML transformations to the metadata.
</p>
<h2><span class="mw-headline" id=".3Cdimension.3E_Element"><span class="mw-headline-number">3.4</span> &lt;dimension&gt; Element</span></h2>
<p>The &lt;dimension&gt; element has limited functionality in this release since the DAP2 doesn't support dimensions as more than mnemonics at this time.  The limitations are:
</p>
<ul>
<li> We only parse the <i>dimension@name</i> and <i>dimension@length</i> attributes.  
</li>
<li> Dimensions can only be specified as a direct child of a &lt;netcdf&gt; element prior to any reference to them
</li>
</ul>
<p>For example:
</p>
<pre>
&lt;netcdf&gt; 
  &lt;dimension name=&quot;station&quot; length=&quot;2&quot;/&gt;
  &lt;dimension name=&quot;samples&quot; length=&quot;5&quot;/&gt;
  &lt;!-- Some variable elements refer to the dimensions here --&gt;
&lt;/netcdf&gt;
</pre>
<p>The dimension element sets up a mapping from the <i>name</i> to the unsigned integer <i>length</i> and can be used in a <i>variable@shape</i> to specify a length for an array dimension (see the section on &lt;variable&gt; below).  The dimension map is cleared when &lt;/netcdf&gt; is encountered (though this doesn't matter currently since we allow only one right now, but it will matter for aggregation, potentially).  We also do not support &lt;group&gt;, which is the only other legal place in NcML 2.2 for a dimension element.
</p><p><b>Parse Errors</b>:
</p>
<ul>
<li> If the name and length are not both specified.
</li>
<li> If the dimension name already exists in the current scope
</li>
<li> If the length is not an unsigned integer
</li>
<li> If any of the other attributes specified in NcML 2.2 are used.  We do not handle them, so we consider them errors now.
</li>
</ul>
<h2><span class="mw-headline" id=".3Cvariable.3E_Element"><span class="mw-headline-number">3.5</span> &lt;variable&gt; Element</span></h2>
<p>The &lt;variable&gt; element is used to:
</p>
<ul>
<li> Provide lexical scope for a contained &lt;attribute&gt; or &lt;variable&gt; element
</li>
<li> Rename existing variables 
</li>
<li> Add new scalar variables of simple types
</li>
<li> Add new Structure variables
</li>
<li> Add new N-dimensional Array's of simple types
</li>
<li> Specify the coordinate variable for the new dimension in a joinNew aggregation 
</li>
</ul>
<p>We describe each in turn in more detail.
</p><p><b>NB:</b> <i>When working with an existing variable (array or otherwise) it is not required that the variable type be specified in it' NcML declaration. All that is needed is the correct name (in lexical scope). When specifying the type for an existing variable care must be taken to ensure that the type specified in the NcML document matches the type of the existing variable. In particular, variables that are arrays must be called array, and not the type of the template primitive.</i>
</p><p><br />
</p>
<h3><span class="mw-headline" id="Specifying_Lexical_Scope_with_.3Cvariable_type.3D.22.22.3E"><span class="mw-headline-number">3.5.1</span> Specifying Lexical Scope with &lt;variable type=""&gt;</span></h3>
<p>Consider the following example:
</p>
<pre>  &lt;variable name="u"&gt;
    &lt;attribute name="Metadata" type="string"&gt;This is metadata!&lt;/attribute&gt;
  &lt;/variable&gt;
</pre>
<p>This code assumes that a variable named "u" exists (of any type since we do not specify) and provides the lexical scope for the
attribute "Metadata" which will be added or modified within the attribute table for the variable "u" (it's qualified name would be "u.Metadata").
</p>
<h4><span class="mw-headline" id="Nested_DAP_Structure_and_Grid_Scopes"><span class="mw-headline-number">3.5.1.1</span> Nested DAP Structure and Grid Scopes</span></h4>
<p>Scoping variable elements may be nested if the containing variable is a Structure (this includes the special case of Grid)
</p>
<pre>
 &lt;variable name=&quot;DATA_GRANULE&quot; type=&quot;Structure&quot;&gt;
    &lt;variable name=&quot;PlanetaryGrid&quot; type=&quot;Structure&quot;&gt;
      &lt;variable name=&quot;percipitate&quot;&gt;
	&lt;attribute name=&quot;units&quot; type=&quot;String&quot; value=&quot;inches&quot;/&gt;
      &lt;/variable&gt;
    &lt;/variable&gt;
  &lt;/variable&gt;
</pre>
<p>This adds a "unit" attribute to the variable "percipitate" within the nested Structure's 
("DATA_GRANULE.PlanetaryGrid.percipitate" as fully qualified name).  
Note that we <b>must</b> refer to the type explicitly as a "Structure" so the parser knows
to traverse the tree.  
</p><p><b>Note</b> the variable might be of type Grid, but the type "Structure" must be used in the NcML to traverse it.
</p>
<h4><span class="mw-headline" id="Adding_Multiple_Attributes_to_the_Same_Variable"><span class="mw-headline-number">3.5.1.2</span> Adding Multiple Attributes to the Same Variable</span></h4>
<p>Once the variable's scope is set by the opening &lt;variable&gt; element, more than one attribute can be specified within it.  This will make the NcML more readable and also will make the parsing more efficient since the variable will only need to be looked up once.
</p><p>For example,
</p>
<pre>
&lt;variable name=&quot;Foo&quot;&gt;
   &lt;attribute name=&quot;Attr_1&quot; type=&quot;string&quot; value=&quot;Hello&quot;/&gt;
   &lt;attribute name=&quot;Attr_2&quot; type=&quot;string&quot; value=&quot;World!&quot;/&gt;
&lt;/variable&gt;
</pre>
<p>should be preferred over:
</p>
<pre>
&lt;variable name=&quot;Foo&quot;&gt;
   &lt;attribute name=&quot;Attr_1&quot; type=&quot;string&quot; value=&quot;Hello&quot;/&gt;
&lt;/variable&gt;

&lt;variable name=&quot;Foo&quot;&gt;
   &lt;attribute name=&quot;Attr_2&quot; type=&quot;string&quot; value=&quot;World!&quot;/&gt;
&lt;/variable&gt;
</pre>
<p>although they produce the same result.  Any number of attributes can be specified before the variable is closed.
</p>
<h3><span class="mw-headline" id="Renaming_Existing_Variables"><span class="mw-headline-number">3.5.2</span> Renaming Existing Variables</span></h3>
<p>The attribute <i>variable@orgName</i> is used to rename an existing variable. 
</p><p>For example:
</p>
<pre>
&lt;variable name=&quot;NewName&quot; orgName=&quot;OldName&quot;/&gt;
</pre>
<p>will rename an existing variable at the current scope named "OldName" to "NewName".  After this point in the NcML file (such as in constraints specified for the DAP request), the variable is known by "NewName".
</p><p>Note that the type is not required here --- the variable is assumed to exist and its existing type is used.  It is not possible to change the type of an existing variable at this time!
</p><p><b>Parse Errors</b>:  
</p>
<ul>
<li> If a variable with <i>variable@orgName</i> doesn't exist in the current scope
</li>
<li> If the new name <i>variable@name</i> is already taken in the current scope
</li>
<li> If a new variable is created but does not have exactly one values element
</li>
</ul>
<h3><span class="mw-headline" id="Adding_a_New_Scalar_Variable"><span class="mw-headline-number">3.5.3</span> Adding a New Scalar Variable</span></h3>
<p>The &lt;variable&gt; element can be used to create a new scalar variable of a simple type (i.e. an atomic NcML type such as "int" or "float", or any DAP atomic type, such as "UInt32" or "URL") by specifying an empty <i>variable@shape</i> (which is the default), a simple type for <i>variable@type</i>, and a contained &lt;values&gt; element with the one value of correct type. 
</p><p>For example:
</p>
<pre>
&lt;variable name=&quot;TheAnswerToLifeTheUniverseAndEverything&quot; type=&quot;double&quot;&gt;
    &lt;attribute name=&quot;SolvedBy&quot; type=&quot;String&quot; value=&quot;Deep Thought&quot;/&gt;
    &lt;values&gt;42.000&lt;/values&gt;
  &lt;/variable&gt;
</pre>
<p>will create a new variable named "TheAnswerToLifeTheUniverseAndEverything" at the current scope.  It has no shape so will be a scalar of type "double" and will have the value 42.0.
</p><p><b>Parse Errors</b>:
</p>
<ul>
<li> It is a parse error to not specify a &lt;values&gt; element with exactly one proper value of the variable type.
</li>
<li> It is a parse error to specify a malformed or out of bounds value for the data type
</li>
</ul>
<h3><span class="mw-headline" id="Adding_a_New_Structure_Variable"><span class="mw-headline-number">3.5.4</span> Adding a New Structure Variable</span></h3>
<p>A new Structure variable can be specified at the global scope or within another Structure.  It is illegal for an array to have type structure, so the shape must be empty.
</p><p>For example:
</p>
<pre>
&lt;variable name=&quot;MyNewStructure&quot; type=&quot;Structure&quot;&gt;
    &lt;attribute name=&quot;MetaData&quot; type=&quot;String&quot; value=&quot;This is metadata!&quot;/&gt;
    &lt;variable name=&quot;ContainedScalar1&quot; type=&quot;String&quot;&gt;&lt;values&gt;I live in a new structure!&lt;/values&gt;&lt;/variable&gt;
    &lt;variable name=&quot;ContainedInt1&quot; type=&quot;int&quot;&gt;&lt;values&gt;42&lt;/values&gt;&lt;/variable&gt;
  &lt;/variable&gt;
</pre>
<p>specifies a new structure called "MyNewStructure" which contains two scalar variable fields "ContainedScalar1" and "ContainedInt1".  
</p><p>Nested structures are allowed as well.  
</p><p><b>Parse Error</b>: 
</p>
<ul>
<li> If another variable or attribute exists at the current scope with the new name.  
</li>
<li> If a &lt;values&gt; element is specified as a direct child of a new Structure --- structures cannot contain values, only attributes and other variables.
</li>
</ul>
<h3><span class="mw-headline" id="Adding_a_New_N-dimensional_Array"><span class="mw-headline-number">3.5.5</span> Adding a New N-dimensional Array</span></h3>
<p>An N-dimensional array of a simple type may be created virtually as well by specifying a non-empty <i>variable@shape</i>.  The shape contains the array dimensions in left-to-right order of slowest varying dimension first.  For example:
</p>
<pre>
 &lt;variable name=&quot;FloatArray&quot; type=&quot;float&quot; shape=&quot;2 5&quot;&gt;
      &lt;!-- values specified in row major order (leftmost dimension in shape varies slowest) 
	Any whitespace is a valid separator by default, so we can use newlines to pretty print 2D matrices.
	--&gt;
      &lt;values&gt;
	0.1 0.2 0.3 0.4 0.5
	1.1 1.1 1.3 1.4 1.5
      &lt;/values&gt;
    &lt;/variable&gt;
</pre>
<p>will specify a 2x5 dimension array of float values called "FloatArray".  The &lt;values&gt; element must contain 2x5=10 values in row major order (slowest varying dimension first).  Since whitespace is the default separator, we use a newline to show the dimension boundary for the values, which is easy to see for a 2D matrix such as this.
</p><p>A dimension name may also be used to refer mnemonically to a length.  The DAP response will use this mnemonic in its output, but it is not currently used for shared dimensions, only as a mnemonic.   See the section on the &lt;dimension&gt; element for more information.  For example:
</p>
<pre>
&lt;netcdf&gt;
 &lt;dimension name=&quot;station&quot; length=&quot;2&quot;/&gt;
 &lt;dimension name=&quot;sample&quot; length=&quot;5&quot;/&gt;
 &lt;variable name=&quot;FloatArray&quot; type=&quot;float&quot; shape=&quot;station sample&quot;&gt;
      &lt;values&gt;
	0.1 0.2 0.3 0.4 0.5
	1.1 1.1 1.3 1.4 1.5
      &lt;/values&gt;
    &lt;/variable&gt;
</pre>
<p>will produce the same 2x5 array, but will incorporate the dimension mnemonics into the response.  For example, here's the DDS response:
</p>
<pre>
Dataset {
     Float32 FloatArray[station = 2][samples = 5];
} sample_virtual_dataset.ncml;
</pre>
<p>Note that the &lt;values&gt; element respects the <i>values@separator</i> attribute if whitespace isn't correct.  This is very useful for arrays of strings with whitespace, for example.
</p>
<pre>
&lt;variable name=&quot;StringArray&quot; type=&quot;string&quot; shape=&quot;3&quot;&gt;
  &lt;values separator=&quot;*&quot;&gt;String 1*String 2*String 3&lt;/values&gt;
&lt;/variable&gt;
</pre>
<p>creates a length 3 array of string StringArray = {"String 1", "String 2", "String 3"}.
</p><p><br /> 
</p><p><b>Parse Errors</b>:  
</p>
<ul>
<li> It is an error to specify the incorrect number of values
</li>
<li> It is an error if any value is malformed or out of range for the data type.
</li>
<li> It is an error to specify a named dimension which does not exist in the current &lt;netcdf&gt; scope.
</li>
<li> It is an error to specify an Array whose flattened size (product of dimensions) is &gt; 2^31-1.
</li>
</ul>
<h3><span class="mw-headline" id="Specifying_the_new_coordinate_variable_for_a_joinNew_aggregation"><span class="mw-headline-number">3.5.6</span> Specifying the new coordinate variable for a joinNew aggregation</span></h3>
<p>In the special case of a joinNew aggregation, the new coordinate variable may be specified with the &lt;variable&gt; element.  The new coordinate variable is <i>defined</i> to have the same name as the new dimension.  This allows for several things:
</p>
<ul>
<li>Explicit specification of the variable type and coordinates for the new dimension
</li>
<li>Specification of the metadata for the new coordinate variable 
</li>
</ul>
<p>In the first case, the author can specify explicitly the type of the new coordinate variable and the actual values for each dataset.  In this case, the variable <i>must</i> be specified <i>after</i> the aggregation element in the file so the new dimension's size (number of member datasets) may be known and error checking performed.  Metadata can also be added to the variable here.
</p><p>In the second case, the author may just specify the variable name, which allows one to specify the metadata for a coordinate variable that is automatically generated by the aggregation itself.  This is the only allowable case for a variable element to <i>not</i> contain a values element!  Coordinate variables are generated automatically in two cases:
</p>
<ul>
<li>The author has specified an explicit list of member datasets, with or without explicit coordVal attributes.  
</li>
<li>The author has used a &lt;scan&gt; element to specify the member datasets via a directory scan
</li>
</ul>
<p>In this case, the &lt;variable&gt; element may come before or after the &lt;aggregation&gt;.
</p><p><b>Parse Errors:</b>
</p>
<ul>
<li>If an explicit variable is declared for the new coordinate variable:
<ul>
<li> And it contains explicit values, the number of values must be equal to the number of member datasets in the aggregation.
</li>
<li> It must be specifed <i>after</i> the &lt;aggregation&gt; element
</li>
</ul>
</li>
</ul>
<ul>
<li> If a numeric coordVal is used to specify the first member dataset's coordinate, then <i>all</i> datasets must contain a numerical coordinate.
</li>
</ul>
<ul>
<li> An error is thrown if the specified aggregation variable (variableAgg) is not found in <i>all</i> member datasets.
</li>
</ul>
<ul>
<li> An error is thrown if the specified aggregation variable is not of the same type in <i>all</i> member datasets.  Coercion is <i>not</i> performed!
</li>
</ul>
<ul>
<li> An error is thrown if the specified aggregation variables in all member datasets do not have the same shape
</li>
</ul>
<ul>
<li> An error is thrown if an explicit coordinate variable is specified with a shape that is <i>not</i> the same as the new dimension name (and the variable name itself).
</li>
</ul>
<h2><span class="mw-headline" id=".3Cvalues.3E_Element"><span class="mw-headline-number">3.6</span> &lt;values&gt; Element</span></h2>
<p>The &lt;values&gt; element can only be used in the context of a <b>new</b> variable of scalar or array type.  We cannot change the values for existing variables in this version of the handler. 
The characters content of a &lt;values&gt; element is considered to be a separated list of value tokens valid for the type of the variable of the parent element.  The number of specified tokens in the content <i>must</i> equal the product of the dimensions of the enclosing <i>variable@shape</i>, or be one value for a scalar.  It is an error to <i>not</i> specify a &lt;values&gt; element for a declared new variable as well.  
</p>
<h3><span class="mw-headline" id="Changing_the_Separator_Tokens"><span class="mw-headline-number">3.6.1</span> Changing the Separator Tokens</span></h3>
<p>The author may specify values@separator to change the default value token separator from the default whitespace.  This is very useful for specifying arrays of strings with whitespace in them, or if data in CSV form is being pasted in.  
</p>
<h3><span class="mw-headline" id="Autogeneration_of_Uniform_Arrays"><span class="mw-headline-number">3.6.2</span> Autogeneration of Uniform Arrays</span></h3>
<p>We also can parse <i>values@start</i> and <i>values@increment</i> INSTEAD OF tokens in the content.  This will "autogenerate" a uniform array of values of the given product of dimensions length for the containing variable.  For example:
</p>
<pre>
&lt;variable name=&quot;Evens&quot; type=&quot;int&quot; shape=&quot;100&quot;&gt;
  &lt;values start=&quot;0&quot; increment=&quot;2&quot;/&gt;
&lt;/variable&gt;
</pre>
<p>will specify an array of the first 100 even numbers (including 0).  
</p><p><b>Parse Errors</b>:
</p>
<ul>
<li> If the incorrect number of tokens are specified for the containing variable's shape
</li>
<li> If any value token cannot be parsed as a valid value for the containing variable's type
</li>
<li> If content is specified in addition to start and increment
</li>
<li> If only one of start or increment is specified
</li>
<li> If the values element is placed anywhere except within a NEW variable.
</li>
</ul>
<h2><span class="mw-headline" id=".3Cattribute.3E_Element"><span class="mw-headline-number">3.7</span> &lt;attribute&gt; Element</span></h2>
<p>As an overview, whenever the parser encounters an &lt;attribute&gt; with a non-existing name (at the current scope),
it creates a new one, whether a container or atomic attribute (see below).  If the attribute exists,
its value and/or type is modified to those specified in the &lt;attribute&gt; element.  If an attribute
structure (container) exists, it is used to define a nested lexical scope for child attributes.  
</p><p>Attributes may be scalar (one value) or one dimensional arrays.  Arrays are specified by using whitespace (default) to separate the different values.  The attribute@separator may also be set in order to specify a different separator, such as CSV format or to specify a non-whitespace separator so strings with whitespace are not tokenized.  We will give examples of creating array attributes below.
</p>
<h3><span class="mw-headline" id="Adding_New_Attributes_or_Modifying_an_Existing_Attribute"><span class="mw-headline-number">3.7.1</span> Adding New Attributes or Modifying an Existing Attribute</span></h3>
<p>If a specified attribute with the attribute@name does not exist at the current lexical scope, 
a new one is created with the given type and value.  For example, assume "new_metadata" doesn't
exist at the current parse scope.  Then:
</p>
<pre>&lt;attribute name="new_metadata" type="string" value="This is a new entry!"/&gt;
</pre>
<p>will create the attribute at that scope.  Note that value can be specified in the content of the 
element as well.  This is identical to the above:
</p>
<pre>&lt;attribute name="new_metadata" type="string"&gt;This is a new entry!&lt;/attribute&gt;
</pre>
<p>If the attribute@name already exists at the scope, it is modified to contain the specified type and value.
</p><p><br />
</p>
<h4><span class="mw-headline" id="Arrays"><span class="mw-headline-number">3.7.1.1</span> Arrays</span></h4>
<p>As in NcML, for numerical types an array can be specified by separating the tokens by whitespace (default) or be
specifying the token separator with attribute@separator.  For example,
</p>
<pre>&lt;attribute name="myArray" type="int"&gt;1 2 3&lt;/attribute&gt;
</pre>
<p>and
</p>
<pre>&lt;attribute name="myArray" type="int" separator=","&gt;1,2,3&lt;/attribute&gt;
</pre>
<p>both specify the same array of three integers named "myArray".
</p><p>TODO Add more information on splitting with a separator!
</p><p><br />
</p>
<h4><span class="mw-headline" id="Structures_.28Containers.29"><span class="mw-headline-number">3.7.1.2</span> Structures (Containers)</span></h4>
<p>We use attribute@type="Structure" to define a new (or existing) attribute container.   So if we
wanted to add a new attribute structure, we'd use something like this: 
</p>
<pre>  &lt;attribute name="MySamples" type="Structure"&gt;
    &lt;attribute name="Location" type="string" value="Station 1"/&gt;
    &lt;attribute name="Samples" type="int"&gt;1 4 6&lt;/attribute&gt;
  &lt;/attribute&gt;
</pre>
<p>Assuming "MySamples" doesn't already exist, an attribute container will be created at the current scope
and the "Location" and "Samples" attributes will be added to it.
</p><p>Note that we can create nested attribute structures to arbitrary depth this way as well.
</p><p>If the attribute container with the given name already exists at the current scope, 
then the attribute@type="Structure" form is used to define
the lexical scope for the container.  In other words, child &lt;attribute&gt; elements will
be processed within the scope of the container.   For example, in the above example, if
"MySamples" already exists, then the "Location" and "Samples" will be processed within the
existing container (they may or may not already exist as well).
</p>
<h4><span class="mw-headline" id="Renaming_an_Existing_Attribute_or_Attribute_Container"><span class="mw-headline-number">3.7.1.3</span> Renaming an Existing Attribute or Attribute Container</span></h4>
<p>We also support the attribute@orgName attribute for renaming attributes.   
</p><p>For example,
</p>
<pre>&lt;attribute name="NewName" orgName="OldName" type="string"/&gt;
</pre>
<p>will rename an existing attribute "OldName" to "NewName" while leaving its value alone.
If attribute@value is also specified, then the attribute is renamed <i>and</i> has its value modified.
</p><p>This works for renaming attribute containers as well:
</p>
<pre>&lt;attribute name="MyNewContainer" orgName="MyOldContainer" type="Structure"/&gt;
</pre>
<p>will rename an existing "MyOldContainer" to "MyNewContainer".  Note that any children
of this container will remain in it.
</p>
<h3><span class="mw-headline" id="DAP_OtherXML_Extension"><span class="mw-headline-number">3.7.2</span> DAP <i>OtherXML</i> Extension</span></h3>
<p>The module now allows specification of attributes of the new DAP type "OtherXML".  This allows the NCML file author to inject arbitrary well-formed XML into an attribute for clients that want XML metadata rather than just string or url.  Internally, the attribute is still a string (and in a DAP DAS response will be quoted inside one string).  However, since it is XML, the NCMLParser still parses it and checks it for well-formedness (but NOT against schemas).  This extension allows the NCMLParser to parse the arbitrary XML within the given attribute without causing errors, since it can be any XML.  
</p><p>The injected XML is most useful in the DDX response, where it shows up directly in the response as XML.  XSLT and other clients can then parse it.
</p>
<h4><span class="mw-headline" id="Errors"><span class="mw-headline-number">3.7.2.1</span> Errors</span></h4>
<ul>
<li>The XML <b>must</b> be in the content of the &lt;attribute type="OtherXML"&gt; element.  It is a parser error for <i>attribute@value</i> to be set if <i>attribute@type</i> is "OtherXML".  
</li>
<li>The XML must also be well-formed since it is parsed.  A parse error will be thrown if the OtherXML is malformed.
</li>
</ul>
<h4><span class="mw-headline" id="Example"><span class="mw-headline-number">3.7.2.2</span> Example</span></h4>
<p>Here's an example of the use of this special case.
</p>
<pre>
&lt;netcdf xmlns=&quot;http://www.unidata.ucar.edu/namespaces/netcdf/ncml-2.2&quot; location=&quot;/coverage/200803061600_HFRadar_USEGC_6km_rtv_SIO.nc&quot;&gt;

    &lt;attribute name=&quot;someName&quot; type=&quot;OtherXML&quot;&gt;
        &lt;Domain xmlns=&quot;http://www.opengis.net/wcs/1.1&quot; 
                xmlns:ows=&quot;http://www.opengis.net/ows/1.1&quot;
                xmlns:gml=&quot;http://www.opengis.net/gml/3.2&quot;
                &gt;
            &lt;SpatialDomain&gt;
                &lt;ows:BoundingBox crs=&quot;urn:ogc:def:crs:EPSG::4326&quot;&gt;
                    &lt;ows:LowerCorner&gt;-97.8839 21.736&lt;/ows:LowerCorner&gt;
                    &lt;ows:UpperCorner&gt;-57.2312 46.4944&lt;/ows:UpperCorner&gt;
                &lt;/ows:BoundingBox&gt;
            &lt;/SpatialDomain&gt;
            &lt;TemporalDomain&gt;
                &lt;gml:timePosition&gt;2008-03-27T16:00:00.000Z&lt;/gml:timePosition&gt;
            &lt;/TemporalDomain&gt;
        &lt;/Domain&gt;
        &lt;SupportedCRS xmlns=&quot;http://www.opengis.net/wcs/1.1&quot;&gt;urn:ogc:def:crs:EPSG::4326&lt;/SupportedCRS&gt;
        &lt;SupportedFormat xmlns=&quot;http://www.opengis.net/wcs/1.1&quot;&gt;netcdf-cf1.0&lt;/SupportedFormat&gt;
        &lt;SupportedFormat xmlns=&quot;http://www.opengis.net/wcs/1.1&quot;&gt;dap2.0&lt;/SupportedFormat&gt;
    &lt;/attribute&gt;

&lt;/netcdf&gt;
</pre>
<p><b>TODO</b> Put the DDX response for the above in here!
</p>
<h4><span class="mw-headline" id="Namespace_Closure"><span class="mw-headline-number">3.7.2.3</span> Namespace Closure</span></h4>
<p>Furthermore, the parser will make the chunk of OtherXML "namespace closed".  This means any namespaces specified in parent NCML elements of the OtherXML tree will be "brought down" and added to the <i>root</i> OtherXML elements so that the subtree may be pulled out and added to the DDX and still have its namespaces.  The algorithm doesn't just bring used prefixes, but brings <i>all</i> of the lexically scoped closest namespaces in all ancestors.  In other words, it adds unique namespaces (as determined by prefix) in order from the root of the OtherXML tree as it traverses to the root of the NCML document.  
</p><p>Namespace closure is a syntactic sugar that simplifies the author's task since they can specify the namespaces just once at the top of the NCML file and expect that when the subtree of XML is added to the DDX that these namespaces will come along with that subtree of XML.  Otherwise they have to explicitly add the namespaces to each attributes.
</p><p><b>TODO</b> Add an example!
</p>
<h2><span class="mw-headline" id=".3Cremove.3E_Element"><span class="mw-headline-number">3.8</span> &lt;remove&gt; Element</span></h2>
<p>The &lt;remove&gt; element can remove attributes and variables.  For example:
</p>
<pre>
  &lt;attribute name=&quot;NC_GLOBAL&quot; type=&quot;Structure&quot;&gt;
    &lt;remove name=&quot;base_time&quot; type=&quot;attribute&quot;/&gt;
  &lt;/attribute&gt;
</pre>
<p>will remove the attribute named "base_time" in the attribute structure named "NC_GLOBAL". 
</p><p>Note that this works for attribute containers as well!  We could recursively remove the <i>entire</i>
attribute container (i.e. it and all its children) with:
</p>
<pre>
 &lt;remove name=&quot;NC_GLOBAL&quot; type=&quot;attribute&quot;/&gt;
</pre>
<p>It also can be used to remove variables from existing datasets:
</p>
<pre>
  &lt;remove name=&quot;SomeExistingVariable&quot; type=&quot;variable&quot;/&gt;
</pre>
<p>This also recurses on variables of type Structure --- the entire structure including all of its children are removed from the dataset's response.
</p><p><b>Parse Errors</b>:
</p>
<ul>
<li> It is a parse error if the given attribute or variable doesn't exist in the current scope
</li>
</ul>
<h2><span class="mw-headline" id=".3Caggregation.3E_Element"><span class="mw-headline-number">3.9</span> &lt;aggregation&gt; Element</span></h2>
<p>Aggregation involves combining multiple datasets (&lt;netcdf&gt;) into a virtual "single" dataset in various ways.  For a tutorial on aggregation in NcML 2.2, the reader is referred to the Unidata page: <a rel="nofollow" class="external free" href="http://www.unidata.ucar.edu/software/netcdf/ncml/v2.2/Aggregation.html">http://www.unidata.ucar.edu/software/netcdf/ncml/v2.2/Aggregation.html</a>
</p><p>NcML 2.2 supports multiple types of aggregation: union, joinNew, joinExisting, and fmrc (forecast model run collection).  
</p><p>The current version of the NcML module supports two of these aggregations:
</p>
<ul>
<li>Union <a href="../index.php/NCML_Module_Aggregation_Union" title="NCML Module Aggregation Union">NCML_Module_Aggregation_Union</a>
</li>
<li>JoinNew <a href="../index.php/NCML_Module_Aggregation_JoinNew" title="NCML Module Aggregation JoinNew">NCML_Module_Aggregation_JoinNew</a>
</li>
</ul>
<p>A <i>union</i> aggregation specifies that the first instance of a variable or attribute (by name) that is found in the ordered list of datasets will be the one in the output aggregation.   This is useful for combining two dataset files, each which may contain a single variable, into a composite dataset with both variables.
</p><p>A JoinNew aggregation joins a variable which exists in multiple datasets (usually samples of a datum over time) into a new variable containing the data from <i>all</i> member datasets by creating a new outer dimension.  The <i>i</i>th component in the new outer dimension is the variable's data from the <i>i</i>th member dataset.  It also adds a new coordinate variable of whose name is the new dimension's name and whose shape (length) is the new dimension as well.  This new coordinate variable may be explicitly given by the author or may be autogenerated in one of several ways.
</p>
<h2><span class="mw-headline" id=".3Cscan.3E_Element"><span class="mw-headline-number">3.10</span> &lt;scan&gt; Element</span></h2>
<p>The scan element can be used within an aggregation context to allow a directory to be searched in various ways in order to specify the members of an aggregation.  This allows a static NcML file to refer to an aggregation which may change over time, such as where a new data file is generated each day.
</p><p><font size="3"><b><a href="../index.php/NCML_Module_Aggregation_JoinNew" title="NCML Module Aggregation JoinNew"> We describe usage of the &lt;scan&gt; element in detail in the joinNew aggregation tutorial here.</a></b></font>.
</p>
<h1><span class="mw-headline" id="Errors_2"><span class="mw-headline-number">4</span> Errors</span></h1>
<p>There are three types of error messages that may be returned:
</p>
<ul>
<li> Internal Error
</li>
<li> Resource Not Found Error
</li>
<li> Parse Error
</li>
</ul>
<h2><span class="mw-headline" id="Internal_Errors"><span class="mw-headline-number">4.1</span> Internal Errors</span></h2>
<p><b>Internal errors</b> should be reported to support@opendap.org as they are likely bugs.
</p>
<h2><span class="mw-headline" id="Resource_Not_Found_Errors"><span class="mw-headline-number">4.2</span> Resource Not Found Errors</span></h2>
<p>If the netcdf@location specifies a non-existent local dataset (one that is not being served by
the same Hyrax server), it will specify the resource was not found.   This may also be returned
if a handler for the specified dataset is not currently loaded in the BES.  Users should test that the
dataset to be wrapped already exists and can be viewed on the running server before writing NcML 
to add metadata.  It's also an error to refer to remote datasets (at this time).
</p>
<h2><span class="mw-headline" id="Parse_Errors"><span class="mw-headline-number">4.3</span> Parse Errors</span></h2>
<p><b>Parse errors</b> are user errors in the NcML file.  These could be malformed XML, malformed NcML, 
unimplemented features of NcML, or could be errors in referring to the wrapped dataset.  
</p><p>The error message should specify 
the error condition as well as the "current scope" as a fully qualified DAP name within the 
loaded dataset.  This should be enough information to correct the parse error as new NcML
files are created.
</p><p>The parser will generate parse errors in various 
situations where it expects to find certain structure in the underlying dataset.  Some examples:
</p>
<ul>
<li> A variable of the given name was not found at the current scope
</li>
<li> attribute@orgName was specified, but the attribute cannot be found at current scope.
</li>
<li> attribute@orgName was specified, but the new name is already used at current scope.
</li>
<li> remove specified a non-existing attribute name
</li>
</ul>
<h1><span class="mw-headline" id="Grid_Metadata_Tutorial"><span class="mw-headline-number">5</span> Grid Metadata Tutorial</span></h1>
<p>Please see the page <a href="../index.php/Grid_Metadata_Tutorial" title="Grid Metadata Tutorial">Grid_Metadata_Tutorial</a> for an example of adding metadata to the various parts of a DAP Grid variable.
</p><p><br />
</p>
<h1><span class="mw-headline" id="Aggregation_Tutorials"><span class="mw-headline-number">6</span> Aggregation Tutorials</span></h1>
<p>The NcML module may also be used to aggregate multiple datasets into one virtual dataset.  
</p><p>We currently support three of the NcML aggregations:
</p>
<ul>
<li> union
</li>
<li> joinNew
</li>
<li> joinExisiting
</li>
</ul>
<p>Please see the individual pages for each aggregation type for tutorials on their respective application and use..
</p>
<h3><span class="mw-headline" id="Union"><span class="mw-headline-number">6.1</span> <a href="../index.php/NCML_Module_Aggregation_Union" title="NCML Module Aggregation Union">Union</a></span></h3>
<p><a href="../index.php/NCML_Module_Aggregation_Union" title="NCML Module Aggregation Union">Union Aggregation</a> - Combine multiple datasets into one by merging variables together, selecting the first of each unique name.
</p>
<h3><span class="mw-headline" id="JoinNew"><span class="mw-headline-number">6.2</span> <a href="../index.php/NCML_Module_Aggregation_JoinNew" title="NCML Module Aggregation JoinNew">JoinNew</a></span></h3>
<p><a href="../index.php/NCML_Module_Aggregation_JoinNew" title="NCML Module Aggregation JoinNew">JoinNew Aggregation</a> - Combine variables across multiple datasets by creating a new outer dimension and coordinate variable for each of the sample datasets.
</p>
<h3><span class="mw-headline" id="JoinExisting"><span class="mw-headline-number">6.3</span> <a href="../index.php/NCML_Module_Aggregation_JoinExisting" title="NCML Module Aggregation JoinExisting">JoinExisting</a></span></h3>
<p><a href="../index.php/NCML_Module_Aggregation_JoinExisting" title="NCML Module Aggregation JoinExisting">JoinExisting Aggregation</a> - Combine variables with a common named outer dimension along that dimension by concatenating data for that dimension
</p>
<h1><span class="mw-headline" id="Additions.2FChanges_to_NcML_2.2"><span class="mw-headline-number">7</span> Additions/Changes to NcML 2.2</span></h1>
<p>This section will keep track of changes to the NcML 2.2 schema.  Eventually these
will be rolled into a new schema.
</p>
<h2><span class="mw-headline" id="Attribute_Structures_.28Containers.29"><span class="mw-headline-number">7.1</span> Attribute Structures (Containers)</span></h2>
<p>This module also adds functionality beyond the current NcML 2.2 schema
--- it can handle nested &lt;attribute&gt; elements in order to make
attribute structures.  This is done by using the &lt;attribute
type="Structure"&gt; form, for example:
</p>
<pre>  &lt;attribute name="MySamples" type="Structure"&gt;
    &lt;attribute name="Location" type="string" value="Station 1"/&gt;
    &lt;attribute name="Samples" type="int"&gt;1 4 6&lt;/attribute&gt;
  &lt;/attribute&gt;
</pre>
<p>"MyContainer" describes an attribute structure with two attribute fields,
a string "Location" and an array of int's called "Samples".  
Note that an attribute structure of this form can
only contain other &lt;attribute&gt; elements and NOT a value.
</p><p>If the container does not already exist, it will be created at the scope it is declared, which could
be:
</p>
<ul>
<li> Global (top of dataset)
</li>
<li> Within a variable's attribute table
</li>
<li> Within another attribute container
</li>
</ul>
<p>If an attribute container of the given name already exists at the lexical scope, it is traversed 
in order to define the scope for the nested (children) attributes it contains.
</p>
<h2><span class="mw-headline" id="Unspecified_Variable_Type_Matching_for_Lexical_Scope"><span class="mw-headline-number">7.2</span> Unspecified Variable Type Matching for Lexical Scope</span></h2>
<p>We also allow the type attribute of a variable element (variable@type) to be the empty string 
(or unspecified) when using existing variables to define the lexical scope of an &lt;attribute&gt; 
transformation.  In the schema, variable@type is (normally) required.  
</p><p><br />
</p>
<h2><span class="mw-headline" id="DAP_2_Types"><span class="mw-headline-number">7.3</span> DAP 2 Types</span></h2>
<p>Additionally, we allow DAP2 atomic types (such as UInt32, URL) in addition to the NcML types.  
The NcML types are mapped onto the closest DAP2 type internally.
</p>
<h2><span class="mw-headline" id="DAP_OtherXML_Attribute_Type"><span class="mw-headline-number">7.4</span> DAP OtherXML Attribute Type</span></h2>
<p>We also allow attributes to be of the new DAP type "OtherXML" for injecting arbitrary XML into an attribute as content rather than trying to form a string.  This allows the parser to check well-formedness.
</p>
<h2><span class="mw-headline" id="Forward_Declaration_of_Dimensions"><span class="mw-headline-number">7.5</span> Forward Declaration of Dimensions</span></h2>
<p>Since we use a SAX parser for efficiency, we require the &lt;dimension&gt; elements to come <i>before</i> their use in a <i>variable@shape</i>.  One way to change the schema to allow this is to force the dimension elements to be specified in a sequence after explicit and metadata choice and before all other elements.
</p>
<h2><span class="mw-headline" id="Aggregation_Element_Location_and_Processing_Order_Differences"><span class="mw-headline-number">7.6</span> Aggregation Element Location and Processing Order Differences</span></h2>
<p>NcML specifies that if a dataset (&lt;netcdf&gt; element) specifies an aggregation element, the aggregation element is always processed first, regardless of its ordering within the &lt;netcdf&gt; element.  Our parser, since it is SAX and not DOM, modifies this behavior in that order matters in some cases:
</p>
<ul>
<li> Metadata (&lt;attribute&gt;) elements specified <i>prior</i> to an aggregation "shadow" the aggregation versions.  This is be useful for "overriding" an attribute or variable in a union aggregation, where the first found will take precedence. 
</li>
<li> JoinNew: If the new coordinate variable's data is to be set explicitly by specifying the new dimension's shape (either with explicit data or the autogenerated data using values@start and values@increment attributes), the &lt;variable&gt; <i>must</i> come after the aggregation since the size of the dimension is unknown until the aggregation element is processed.
</li>
</ul>
<h1><span class="mw-headline" id="Backward_Compatibility_Issues"><span class="mw-headline-number">8</span> Backward Compatibility Issues</span></h1>
<p>Due to the way shared dimensions were implemented in the NetCDF, HDF4, and HDF5 handlers, the DAS responses did not follow the DAP2 specification.  The NcML module, on the other hand, generates DAP2 compliant DAS for these datasets, which means that wrapping some datasets in NcML will generate a DAS with a different structure.  This is important for the NcML author since it changes the names of attributes and variables.  In order for the module to find the correct scope for adding metadata, for example, the DAP2 DAS must be used.  
</p><p>In general, what this means is that an empty "passthrough" NcML file should be the starting point for authoring an NcML file.  This file would just specify a dataset and nothing else:
</p>
<pre>
&lt;netcdf location=&quot;/data/ncml/myNetcdf.nc&quot;/&gt;
</pre>
<p>The author would then request the DAS response for the NCML file and use that as the starting point for modifications to the original dataset. 
</p><p>More explicit examples are given below.
</p>
<h2><span class="mw-headline" id="NetCDF"><span class="mw-headline-number">8.1</span> NetCDF</span></h2>
<p>The NetCDF handler represents some NC datasets as a DAP 2 Grid, but the returned DAS is not consistent with the DAP 2 spec for the attribute hierarchy for such a Grid.  The map vector attributes are placed as siblings of the grid attributes rather than within the grid lexical scope.  For example, here's the NetCDF Handler DDS for a given file:
</p>
<pre>
Dataset {
    Grid {
      Array:
        Int16 cldc[time = 456][lat = 21][lon = 360];
      Maps:
        Float64 time[time = 456];
        Float32 lat[lat = 21];
        Float32 lon[lon = 360];
    } cldc;
} cldc.mean.nc;
</pre>
<p>showing the Grid.  Here's the DAS the NetCDF handler generates:
</p>
<pre>
Attributes {
    lat {
        String long_name &quot;Latitude&quot;;
        String units &quot;degrees_north&quot;;
        Float32 actual_range 10.00000000, -10.00000000;
    }
    lon {
        String long_name &quot;Longitude&quot;;
        String units &quot;degrees_east&quot;;
        Float32 actual_range 0.5000000000, 359.5000000;
    }
    time {
        String units &quot;days since 1-1-1 00:00:0.0&quot;;
        String long_name &quot;Time&quot;;
        String delta_t &quot;0000-01-00 00:00:00&quot;;
        String avg_period &quot;0000-01-00 00:00:00&quot;;
        Float64 actual_range 715511.00000000000, 729360.00000000000;
    }
    cldc {
        Float32 valid_range 0.000000000, 8.000000000;
        Float32 actual_range 0.000000000, 8.000000000;
        String units &quot;okta&quot;;
        Int16 precision 1;
        Int16 missing_value 32766;
        Int16 _FillValue 32766;
        String long_name &quot;Cloudiness Monthly Mean at Surface&quot;;
        String dataset &quot;COADS 1-degree Equatorial Enhanced\\012AI&quot;;
        String var_desc &quot;Cloudiness\\012C&quot;;
        String level_desc &quot;Surface\\0120&quot;;
        String statistic &quot;Mean\\012M&quot;;
        String parent_stat &quot;Individual Obs\\012I&quot;;
        Float32 add_offset 3276.500000;
        Float32 scale_factor 0.1000000015;
    }
    NC_GLOBAL {
        String title &quot;COADS 1-degree Equatorial Enhanced&quot;;
        String history &quot;&quot;;
        String Conventions &quot;COARDS&quot;;
    }
    DODS_EXTRA {
        String Unlimited_Dimension &quot;time&quot;;
    }
}
</pre>
<p>Note the map vector attributes are in the "dataset" scope.
</p><p>Here's the DAS that the NcML Module produces from the correctly formed DDX:
</p>
<pre>
Attributes {
    NC_GLOBAL {
        String title &quot;COADS 1-degree Equatorial Enhanced&quot;;
        String history &quot;&quot;;
        String Conventions &quot;COARDS&quot;;
    }
    DODS_EXTRA {
        String Unlimited_Dimension &quot;time&quot;;
    }
    cldc {
        Float32 valid_range 0.000000000, 8.000000000;
        Float32 actual_range 0.000000000, 8.000000000;
        String units &quot;okta&quot;;
        Int16 precision 1;
        Int16 missing_value 32766;
        Int16 _FillValue 32766;
        String long_name &quot;Cloudiness Monthly Mean at Surface&quot;;
        String dataset &quot;COADS 1-degree Equatorial Enhanced\\012AI&quot;;
        String var_desc &quot;Cloudiness\\012C&quot;;
        String level_desc &quot;Surface\\0120&quot;;
        String statistic &quot;Mean\\012M&quot;;
        String parent_stat &quot;Individual Obs\\012I&quot;;
        Float32 add_offset 3276.500000;
        Float32 scale_factor 0.1000000015;
        cldc {
        }
        time {
            String units &quot;days since 1-1-1 00:00:0.0&quot;;
            String long_name &quot;Time&quot;;
            String delta_t &quot;0000-01-00 00:00:00&quot;;
            String avg_period &quot;0000-01-00 00:00:00&quot;;
            Float64 actual_range 715511.00000000000, 729360.00000000000;
        }
        lat {
            String long_name &quot;Latitude&quot;;
            String units &quot;degrees_north&quot;;
            Float32 actual_range 10.00000000, -10.00000000;
        }
        lon {
            String long_name &quot;Longitude&quot;;
            String units &quot;degrees_east&quot;;
            Float32 actual_range 0.5000000000, 359.5000000;
        }
    }
}
</pre>
<p>Here the Grid Structure "cldc"  and its contained data array (of the same name "cldc") and map vectors have their own attribute containers as DAP 2 specifies.
</p><p>What this means for the author of an NcML file adding metadata to a NetCDF dataset that returns a Grid is that they should generate a "passthrough" file and get the DAS and then specify modifications based on that structure.  
</p><p>Here's an example passthrough:
</p>
<pre>
&lt;netcdf location=&quot;data/ncml/agg/cldc.mean.nc&quot; title=&quot;This file results in a Grid&quot;&gt;
&lt;/netcdf&gt;
</pre>
<p><br />
For example, to add an attribute to the map vector "lat" in the above, we'd need the following NcML:
</p>
<pre>
&lt;netcdf location=&quot;data/ncml/agg/cldc.mean.nc&quot; title=&quot;This file results in a Grid&quot;&gt;
  &lt;!-- Traverse into the Grid as a Structure --&gt;
  &lt;variable name=&quot;cldc&quot; type=&quot;Structure&quot;&gt;
    &lt;!-- Traverse into the &quot;lat&quot; map vector (Array) --&gt;
    &lt;variable name=&quot;lat&quot;&gt; 
      &lt;attribute name=&quot;Description&quot; type=&quot;string&quot;&gt;I am a new attribute in the Grid map vector named lat!&lt;/attribute&gt;
    &lt;/variable&gt;
    &lt;variable name=&quot;lon&quot;&gt; 
      &lt;attribute name=&quot;Description&quot; type=&quot;string&quot;&gt;I am a new attribute in the Grid map vector named lon!&lt;/attribute&gt;
    &lt;/variable&gt;
  &lt;/variable&gt;
&lt;/netcdf&gt;
</pre>
<p>This clearly shows that the structure of the Grid must be used in the NcML:  the attribute being added is technically "cldc.lat.Description" in a fully qualified name.  The parser would return an error if it was attempted as "lat.Description" as the NetCDF DAS for the original file would have led one to believe.
</p><p><br />
</p>
<h2><span class="mw-headline" id="HDF4.2FHDF5"><span class="mw-headline-number">8.2</span> HDF4/HDF5</span></h2>
<p>Similarly to the NetCDF case, the Hyrax HDF4 Module produces DAS responses that do not respect the DAP2 specification.  If an NcML file is used to "wrap" an HDF4 dataset, the
correct DAP2 DAS response will be generated, however. 
</p><p>This is important for those writing NcML for HDF4 data since the
lexical scope for attributes relies on the correct DAS form --- to
handle this, the user should start with a "passthrough" NcML file (see the above NetCDF example) and
use the DAS from that as the starting point for knowing the structure
the NcML handler expects to see in the NcML file.  Alternatively, the DDX has the 
proper attribute structure as well (the DAS is generated from it).
</p><p><br />
</p>
<h1><span class="mw-headline" id="Known_Bugs"><span class="mw-headline-number">9</span> Known Bugs</span></h1>
<p>There are no known bugs currently.
</p>
<h1><span class="mw-headline" id="Planned_Future_Enhancements"><span class="mw-headline-number">10</span> Planned Future Enhancements</span></h1>
<p>Planned enhancements for future versions of the module include:
</p>
<ul>
<li> New NcML Aggregations
<ul>
<li> Forecast Model Run Collection (FMRC)
<ul>
<li> Special case of JoinNew for forecast data with two time variables
</li>
<li> See: <a rel="nofollow" class="external free" href="http://www.unidata.ucar.edu/software/netcdf/ncml/v2.2/FmrcAggregation.html">http://www.unidata.ucar.edu/software/netcdf/ncml/v2.2/FmrcAggregation.html</a>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1><span class="mw-headline" id="Copyright"><span class="mw-headline-number">11</span> Copyright</span></h1>
<p>This software is copyrighted under the GNU Lesser GPL.  Please see the
files COPYING and COPYRIGHT that came with this distribution.
</p>

</div>
				<!-- end content -->
				<div class="visualClear"></div>
	</div>
</div></div>
</body></html>