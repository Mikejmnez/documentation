
<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>UserGuideOPeNDAPMessages - OPeNDAP Documentation</title>
</head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-UserGuideOPeNDAPMessages skin-monobook action-view">
<div id="globalWrapper">
<div id="column-content"><div id="content" class="mw-body-primary" role="main">
	
	
	<h1 id="firstHeading" class="firstHeading" lang="en"><span dir="auto">UserGuideOPeNDAPMessages</span></h1>
	<div id="bodyContent" class="mw-body">
		<div id="siteSub">From OPeNDAP Documentation</div>
		<div id="contentSub"></div>
		

		<!-- start content -->
<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><p><a href="../index.php/UserGuide" title="UserGuide">Back to User Guide Contents</a>
</p>
<div id="toc" class="toc"><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#The_OPeNDAP_Messages"><span class="tocnumber">1</span> <span class="toctext">The OPeNDAP Messages</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="#Ancillary_data"><span class="tocnumber">1.1</span> <span class="toctext">Ancillary data</span></a>
<ul>
<li class="toclevel-3 tocsection-3"><a href="#Dataset_Descriptor_Structure"><span class="tocnumber">1.1.1</span> <span class="toctext">Dataset Descriptor Structure</span></a></li>
<li class="toclevel-3 tocsection-4"><a href="#Dataset_Attribute_Structure"><span class="tocnumber">1.1.2</span> <span class="toctext">Dataset Attribute Structure</span></a>
<ul>
<li class="toclevel-4 tocsection-5"><a href="#Containers"><span class="tocnumber">1.1.2.1</span> <span class="toctext">Containers</span></a></li>
<li class="toclevel-4 tocsection-6"><a href="#Global_Attributes"><span class="tocnumber">1.1.2.2</span> <span class="toctext">Global Attributes</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-2 tocsection-7"><a href="#Data_Transmission"><span class="tocnumber">1.2</span> <span class="toctext">Data Transmission</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="#Other_Services"><span class="tocnumber">1.3</span> <span class="toctext">Other Services</span></a>
<ul>
<li class="toclevel-3 tocsection-9"><a href="#ASCII_Service"><span class="tocnumber">1.3.1</span> <span class="toctext">ASCII Service</span></a></li>
<li class="toclevel-3 tocsection-10"><a href="#Info_Service"><span class="tocnumber">1.3.2</span> <span class="toctext">Info Service</span></a></li>
<li class="toclevel-3 tocsection-11"><a href="#WWW_Interface_Service"><span class="tocnumber">1.3.3</span> <span class="toctext">WWW Interface Service</span></a></li>
<li class="toclevel-3 tocsection-12"><a href="#Version_Service"><span class="tocnumber">1.3.4</span> <span class="toctext">Version Service</span></a></li>
<li class="toclevel-3 tocsection-13"><a href="#SOAP"><span class="tocnumber">1.3.5</span> <span class="toctext">SOAP</span></a></li>
<li class="toclevel-3 tocsection-14"><a href="#DDX"><span class="tocnumber">1.3.6</span> <span class="toctext">DDX</span></a></li>
<li class="toclevel-3 tocsection-15"><a href="#THREDDS"><span class="tocnumber">1.3.7</span> <span class="toctext">THREDDS</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-16"><a href="#Constraint_Expressions"><span class="tocnumber">2</span> <span class="toctext">Constraint Expressions</span></a>
<ul>
<li class="toclevel-2 tocsection-17"><a href="#Selecting_Data:_Using_Constraint_Expressions"><span class="tocnumber">2.1</span> <span class="toctext">Selecting Data: Using Constraint Expressions</span></a>
<ul>
<li class="toclevel-3 tocsection-18"><a href="#Constraint_Expression_Syntax"><span class="tocnumber">2.1.1</span> <span class="toctext">Constraint Expression Syntax</span></a>
<ul>
<li class="toclevel-4 tocsection-19"><a href="#Simple_Constraint_Expression_Examples"><span class="tocnumber">2.1.1.1</span> <span class="toctext">Simple Constraint Expression Examples</span></a></li>
</ul>
</li>
<li class="toclevel-3 tocsection-20"><a href="#Operators.2C_Special_Functions.2C_and_Data_Types"><span class="tocnumber">2.1.2</span> <span class="toctext">Operators, Special Functions, and Data Types</span></a></li>
<li class="toclevel-3 tocsection-21"><a href="#Constraint_Expression_Functions"><span class="tocnumber">2.1.3</span> <span class="toctext">Constraint Expression Functions</span></a></li>
<li class="toclevel-3 tocsection-22"><a href="#Pattern_Matching_with_Constraint_Expressions"><span class="tocnumber">2.1.4</span> <span class="toctext">Pattern Matching with Constraint Expressions</span></a></li>
<li class="toclevel-3 tocsection-23"><a href="#Optimizing_the_Query"><span class="tocnumber">2.1.5</span> <span class="toctext">Optimizing the Query</span></a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>

<h1><span class="mw-headline" id="The_OPeNDAP_Messages"><span class="mw-headline-number">1</span> The OPeNDAP Messages</span></h1>
<p>An OPeNDAP server is in the business of making replies to queries for
data and other services.  The queries come in the form of specially
formed URLs and the replies consist of MIME documents whose
contents are described in the sections below.  (Technically speaking, the response document headers aren't exactly right, but they function in the same way.)
</p><p>All the requests start with a root URL, and they all are in the form
of a GET, using a suffix on the root URL and a constraint expression
to indicate which service is requested and what the parameters are.
</p><p>(There is also an experimental SOAP interface that uses a POST to
request data.)
</p><p>The replies come in three categories: Ancillary data, Data, and the
other services.  The following sections cover each of them, beginning
with the ancillary data messages.
</p><p><br />
</p>
<h2><span class="mw-headline" id="Ancillary_data"><span class="mw-headline-number">1.1</span> Ancillary data</span></h2>
<p>In order to use some data set, a user must have some information at
his or her disposal that is not strictly included in the data
itself. This information, called ancillary data, describes the shape
and size of the data types that make up the data set, and provides
information about many of the data set's attributes, as well. OPeNDAP
uses two different structures, to supply this ancillary information
about an OPeNDAP data set. The Dataset Descriptor Structure (DDS)
describes the data set's structure and the relationships between its
variables, and the Dataset Attribute Structure (DAS) provides
information about the variables themselves. Both structures are
described in the following sections.
</p><p><br />
</p>
<h3><span class="mw-headline" id="Dataset_Descriptor_Structure"><span class="mw-headline-number">1.1.1</span> Dataset Descriptor Structure</span></h3>
<p>In order to translate data from one data model into another, OPeNDAP must
have some knowledge about the types of the variables, and their
semantics, that comprise a given data set. It must also know something
about the relations of those variables&#8212;even those relations which
are only implicit in the dataset's own API. This knowledge about the
dataset's structure is contained in a text description of the dataset
called the "Dataset Description Structure" (DDS).
</p><p>The DDS does not describe how the information in the data set is
physically stored, nor does it describe how the "native" API is used
to access that data. Those pieces of information are contained in the
API itself and in the OPeNDAP server, respectively.  The DDS contains
knowledge about the dataset variables and the interrelations of those
variables.  The server uses the DDS to describe the structure of a
particular dataset to a client.
</p><p>The DDS is a textual description of the variables and their classes
that make up some data set. The DDS syntax is based on the variable
declaration and definition syntax of C and C++. A variable that is a
member of one of the base type classes is declared by writing the
class name followed by the variable name. The type constructor classes
are declared using C's brace notation. A grammar for the syntax is
given in the table below. (Note that the
<font color="green">Dataset</font> keyword has the same syntactic function
as Structure but is used for the specific job of enclosing the entire
data set even when it does not technically need an enclosing element.)
</p>
<table border="3">
<tr>
<th> "data set </th>
<th> <font color="green">Dataset</font> <font color="green">{ declarations } name;
</th></tr>
<tr>
<td>"declaration </td>
<td>   <font color="green">List</font> declaration
</td></tr>
<tr>
<td>  </td>
<td>"base-type" var;
</td></tr>
<tr>
<td>  </td>
<td> <font color="green">Structure</font> {"declarations"} "var";
</td></tr>
<tr>
<td>  </td>
<td> <font color="green">Sequence</font> {"declarations"} "var";
</td></tr>
<tr>
<td>  </td>
<td> <font color="green">Grid</font> { <font color="green">ARRAY</font> <font color="green">:</font> "declaration" <font color="green">MAPS</font>: "declarations" <font color="green"> } </font>"var";
</td></tr>
<tr>
<td>"base-type" </td>
<td> <font color="green">Byte</font>
</td></tr>
<tr>
<td> </td>
<td> <font color="green">Int32</font>
</td></tr>
<tr>
<td> </td>
<td> <font color="green">UInt32</font>
</td></tr>
<tr>
<td> </td>
<td> <font color="green">Float64</font>
</td></tr>
<tr>
<td> </td>
<td> <font color="green">String</font>
</td></tr>
<tr>
<td> </td>
<td> <font color="green">Url</font>
</td></tr>
<tr>
<td>"var"  </td>
<td>  "name"
</td></tr>
<tr>
<td> </td>
<td> "name  array-decl"
</td></tr>
<tr>
<td>"array-decl" </td>
<td> [integer ]
</td></tr>
<tr>
<td>  </td>
<td> <font color="green">["name" = integer]</font>
</td></tr>
<tr>
<td>"name"  </td>
<td>User-chosen name of data set, variable, or array dimension.
</td></tr></table>
<center>
<p>Dataset Descriptor Structure Syntax
</p>
</center>
<p>A DDS is returned in response to a request for the DDS, and it is also
part of the data return.  The request URL for the DDS is composed of
the root URL, with the suffix ".dds".  For example, if a data set is
located at <font color="green">http:/tests.opendap.org/data/mydata.dat</font> then
you'll find the DDS at <font color="green">http:/tests.opendap.org/data/mydata.dat.dds</font> 
</p><p>An example DDS entry is shown below.  (There are more in
<a href="../index.php/UserGuideDataModel" title="UserGuideDataModel">Data_Models</a>, where there's also an explanation
of the information implied by the data model.)
</p>
<pre>
 Dataset { 
  Int32 catalog_number;
  Sequence {
    String experimenter;
    Int32 time;
    Structure {
      Float64 latitude;
      Float64 longitude;
    } location;
    Sequence {
      Float64 depth;
      Float64 salinity;
      Float64 oxygen;
      Float64 temperature;
    } cast;
  } station;
} data;
</pre>
<p>Example Dataset Descriptor Entry.
</p><p><br />
</p>
<h3><span class="mw-headline" id="Dataset_Attribute_Structure"><span class="mw-headline-number">1.1.2</span> Dataset Attribute Structure</span></h3>
<p>The "Dataset Attribute Structure" (DAS) is used to store attributes
for variables in the dataset. An attribute is any piece of information
about a variable that the creator wants to bind with that variable
<i>excluding</i> the type and size, which are part of the DDS.
Typical attributes might range from error measurements to
text describing how the data was collected or processed. 
</p><p>In principle, attributes are not processed by software, other than to
be displayed. However, many systems rely on attributes to store extra
information that is necessary to perform certain manipulations of
data. In effect, attributes are used to store information that is used
"by convention" rather than "by design". OPeNDAP can effectively
support these conventions by passing the attributes from data set to
user program via the DAS. (Of course, OPeNDAP cannot enforce
conventions in datasets where they were not followed in the first
place.0
</p><p>The syntax for attributes in a DAS is given in the table below. Every
attribute of a variable is a triple: attribute name, type and value.
The name of an attribute is an identifier, consisting of alphanumeric
characters, plus "_" and "/". The type of an attribute may be one of:
"Byte", "Int32", "UInt32", "Float64", "String" or "Url". An attribute
may be scalar or vector. In the latter case the values of the vector
are separated by commas (,) in the textual representation of the DAS.
</p>
<center>
<table border="3">
<tr>
<th>"DAS"     </th>
<th>  <font color="green">Attributes</font> "{var-attr-list}"
</th></tr>
<tr>
<td>"var-attr-list" </td>
<td> "var-attr"
</td></tr>
<tr>
<td>  </td>
<td>"var-attr-list" "var-attr"
</td></tr>
<tr>
<td>  </td>
<td> (empty list)
</td></tr>
<tr>
<td> "var-attr" </td>
<td> "variable" {"attr-list"}
</td></tr>
<tr>
<td> </td>
<td>"container" {var-attr-list}
</td></tr>
<tr>
<td> </td>
<td>"global-attr"
</td></tr>
<tr>
<td> "global-attr" </td>
<td> <font color="green">Global</font> "variable" {"attr-list"}
</td></tr>
<tr>
<td> "attr-list" </td>
<td> attr-triple;
</td></tr>
<tr>
<td> </td>
<td>  "attr-list" "attr-triple"
</td></tr>
<tr>
<td>  </td>
<td>"(empty list)"
</td></tr>
<tr>
<td>"attr-triple" </td>
<td> attr-type  attribute  attr-val-vec;
</td></tr>
<tr>
<td> "attr-val-vec" </td>
<td> "attr-val"
</td></tr>
<tr>
<td>  </td>
<td> "attr-val-vec", "attr-val"
</td></tr>
<tr>
<td>"attr-val" </td>
<td> numeric value
</td></tr>
<tr>
<td>  </td>
<td> "variable"
</td></tr>
<tr>
<td>  </td>
<td> "string"
</td></tr>
<tr>
<td>"attr-type" </td>
<td> "Byte"
</td></tr>
<tr>
<td>  </td>
<td> <font color="green">Int32</font>
</td></tr>
<tr>
<td>  </td>
<td> <font color="green">UInt32</font>
</td></tr>
<tr>
<td>  </td>
<td> <font color="green">Float64</font>
</td></tr>
<tr>
<td>  </td>
<td> <font color="green">String</font>
</td></tr>
<tr>
<td>  </td>
<td> <font color="green">Url</font>
</td></tr>
<tr>
<td>"variable" </td>
<td> user-chosen variable name
</td></tr>
<tr>
<td> "attribute" </td>
<td> user-chosen attribute name
</td></tr>
<tr>
<td>"container" </td>
<td> user-chosen container name
</td></tr>
</table>
</center>
<p>Dataset Attribute Structure Syntax
</p><p>A DAS is returned in response to a request for the DAS.  Unlike the
DDS, it is not part of the data return.  The request URL for the DAS
is composed of the root URL, with the suffix ".das".  For example, if
a data set is located at <font color="green">http:/tests.opendap.org/data/mydata.dat</font> then
you'll find the DAS at <font color="green">http:/tests.opendap.org/data/mydata.dat.das</font>
</p><p><br />
</p><p><br />
</p>
<h4><span class="mw-headline" id="Containers"><span class="mw-headline-number">1.1.2.1</span> Containers</span></h4>
<p>An attribute can contain another attribute, or a set of attributes.
This is roughly comparable to the way compound variables can contain
other variables in the DDS.  The container defines a new lexical scope
for the attributes it contains.
</p><p>Consider the following example:
</p>
<pre>
 Attributes {
   Bill {
      String LastName &quot;Evans&quot;;
      Byte Age 53;
      String DaughterName &quot;Matilda&quot;;
      Matilda {
         String LastName &quot;Fink&quot;;
         Byte Age 26;
      }
   }
}
</pre>
<p>An Example of Attribute Containers
</p><p><br />
</p><p>Here, the attribute <font color="green">Bill.LastName</font> would be associated with the string "Evans", and <font color="green">Bill.Age</font> with the number 53.  However, the attribute <font color="green">Bill.Matilda.LastName</font> would be associated with the string "Fink" and <font color="green">Bill.Matilda.Age</font> with the number 26.
</p><p>Using container attributes as above, you can construct a DAS that
exactly mirrors the construction of a DDS that uses compound data
types, like "Structure" and "Sequence". Note that though
the <font color="green">Bill</font> attribute is a container, it has attributes of its own, as well.  This exactly corresponds to the situation where, for
example, a "Sequence" would have attributes belonging to it, as
well as attributes for each of its member variables.  Suppose the
Sequence represented a single time series of measurements, where
several different data types are measured at each time.  The Sequence
attributes might be the time and location of the measurements, and the
individual variables might have attributes describing the method or
accuracy of that measurement.
</p><p><br />
</p>
<h4><span class="mw-headline" id="Global_Attributes"><span class="mw-headline-number">1.1.2.2</span> Global Attributes</span></h4>
<p>A "global attribute" is not bound to a
particular identifier in a dataset; these attributes are stored in one
or more containers with the name <font color="green">Global</font> or ending with
<font color="green">_Global</font>.  Global attributes are used to describe attributes of an entire dataset.  For example, a global attribute might contain the
name of the satellite or ship from which the data was collected.
Here's an example:
</p>
<pre>
 Attributes {
   Bill {
      String LastName &quot;Evans&quot;;
      Byte Age 53;
      String DaughterName &quot;Matilda&quot;;
      Matilda {
         String LastName &quot;Fink&quot;;
         Byte Age 26;
      }
   }
   Global {
      String Name &quot;FamilyData&quot;;
      String DateCompiled &quot;11/17/98&quot;;
   }
}
</pre>
<p>An Example of Global Attributes
</p><p><br />
Global attributes can be used to define a certain view of a dataset.
For example, consider the following DAS:
</p>
<pre>
 Attributes {
   CTD {
      String Ship &quot;Oceanus&quot;;
      Temp {
         String Name &quot;Temperature&quot;;
      }
      Salt {
         String Name &quot;Salinity&quot;;
      }
   }
   Global {
      String Names &quot;OPeNDAP&quot;;
   }
   FNO_Global {
      String Names &quot;FNO&quot;;
      CTD {
         Temp {
            String FNOName &quot;TEMPERATURE&quot;;
         }
         Salinity {
            String FNOName &quot;SALINITY&quot;;
         }
      }
   }
}
</pre>
<p>An Example of Global Attributes In Use
</p><p><br />
Here, a dataset contains temperature and salinity measurements.  To
aid processing of this dataset by some OPeNDAP client, long names are
supplied for the <font color="green">Temp</font> and <font color="green">Salt</font> variables.  However, a different client
(FNO) spells variable names differently.  Since it is seldom practical
to come up with general-purpose translation tables, the dataset
administrator has chosen to include these synonyms under the <font color="green">FNO_Global</font> attributes, as a convenience to those
users.
</p><p>Using global attributes, a dataset or catalog administrator can create
a layer of attributes to make OPeNDAP datasets conform to
several different dataset naming standards.  This becomes significant
when trying to compile an OPeNDAP dataset database.
</p>
<h2><span class="mw-headline" id="Data_Transmission"><span class="mw-headline-number">1.2</span> Data Transmission</span></h2>
<p>An OPeNDAP server returns data to a client in response to a request
URL composed of the root URL, with the suffix ".dods".
For example, if a data set is located at <font color="green">http:/tests.opendap.org/data/mydata.dat</font> then
you'll find the data at <font color="green">http:/tests.opendap.org/data/mydata.dat.dods</font>
</p><p>The data is returned in a MIME document that consists of two parts: the
<a href="#Dataset_Descriptor_Structure">DDS</a>, and the data encoded according
to the description in
<a href="../index.php/UserGuideDataModel#External_Data_Representation" title="UserGuideDataModel">External Data
Representation</a>.  (The returned document is sometimes called the
DataDDS.)  The two parts are separated by this string:
</p><p><font color="green" face="Courier">Data:&lt;CR&gt;&lt;NL&gt;</font>
</p><p>The DDS included is modified according to any
<a href="#Constraint_Expression">constraint expression</a> that may have been
applied.  That is, the returned DDS describes the returned data.  
</p><p>For example, consider a a request for data from a data set with a DDS
like this:
</p>
<pre>
Dataset {
    Grid {
      Array:
        Int16 sst[time = 1857][lat = 89][lon = 180];
      Maps:
        Float64 time[time = 1857];
        Float32 lat[lat = 89];
        Float32 lon[lon = 180];
    } sst;
    Float64 time_bnds[time = 1857][nbnds = 2];
} sst.mnmean.nc;
</pre>
<p>This is the
<a rel="nofollow" class="external text" href="http://test.opendap.org/dap/data/nc/sst.mnmean.nc.gz.dds">DDS</a> of a
typical gridded dataset.  Suppose, though, that you ask for only the
time values of the data set.  The DDS of the result will look like
this: 
</p>
<pre>
Dataset {
    Float64 time[time = 1857];
} sst.mnmean.nc;
</pre>
<p>This 
<a rel="nofollow" class="external text" href="http://test.opendap.org/dap/data/nc/sst.mnmean.nc.gz.dds?time">DDS</a>
will be included in the DataDDS return, ahead of the encoded
array of 1857 64-bit time values.
</p><p>For more information about sampling OPeNDAP data sets, see the section
below about <a href="#Constraint_Expressions">constraint expressions</a>.
</p>
<blockquote>NOTE:A request for data from an OPeNDAP client will
<p>generally make three different service requests, for data attributes
(DAS), data descriptors (DDS), and for data.  The prepackaged OPeNDAP
clients do this for you, so you may not be aware that three requests
</p>
are made for each URL.</blockquote>
<h2><span class="mw-headline" id="Other_Services"><span class="mw-headline-number">1.3</span> Other Services</span></h2>
<p>In addition to the 
<a href="#Data_Transmission">data</a>,
<a href="#Dataset_Descriptor_Structure">DDS</a>,
and
<a href="#Dataset_Attribute_Structure">DAS</a>,
an OPeNDAP server <i>may</i> provide any or all of the 
services described in the sections that follow.
</p>
<h3><span class="mw-headline" id="ASCII_Service"><span class="mw-headline-number">1.3.1</span> ASCII Service</span></h3>
<p>This service returns an ASCII representation of the requested data.
This can make the data available to a wide variety of standard web
browsers.  This service is activated when the server receives a URL
ending with <font color="green">.asc</font> or <font color="green">.ascii</font>.
</p><p>Click
<a rel="nofollow" class="external text" href="http://test.opendap.org/dap/data/nc/sst.mnmean.nc.gz.asc?sst%5B1:3%5D%5B45:48%5D%5B90:95%5D">http://test.opendap.org/dap/data/nc/sst.mnmean.nc.gz.asc?sst[1:3][45:48][90:95]</a>
to see an ASCII response.
</p><p>Note that unlike the data response, the ASCII response does not
contain a DDS for the returned data.  Instead it just returns the
simple text message.
</p><p>The <a href="../index.php/QuickStart" title="QuickStart">Quick Start Guide</a> contains many examples of the
ASCII response.
</p>
<h3><span class="mw-headline" id="Info_Service"><span class="mw-headline-number">1.3.2</span> Info Service</span></h3>
<p>The Info service formats information from a data set's DAS and DDS
into a single HTML document suitable for viewing in a web browser.
The returned document may include information about both the data
server itself (such as server functions implemented), and the dataset
referenced in the URL.  The server administrator determines what
information is returned in response to such a request.  The services
is activated by a URL ending in <font color="green">.info</font>.
</p><p>Click
<a rel="nofollow" class="external free" href="http://test.opendap.org/dap/data/nc/sst.mnmean.nc.gz.info">http://test.opendap.org/dap/data/nc/sst.mnmean.nc.gz.info</a>
to see an Info response.
</p>
<h3><span class="mw-headline" id="WWW_Interface_Service"><span class="mw-headline-number">1.3.3</span> WWW Interface Service</span></h3>
<p>The WWW service is another way to browse a server's data
interactively.  You can use this either to look at an individual data
file, or a directory of files (or &quot;files&quot; since a server may
contain logical entities that look like files).
</p><p>The server uses a data set's DDS and DAS to construct a web form you
can use to construct a URL that subsamples the data set (using a
<a href="#Constraint_Expressions">constraint expression</a>). You can copy the
resulting URL into another browser, or use one of the buttons on the
form to download data.
</p><p><a href="../index.php/File:Reynolds_ifh.png" class="image" title="actual size"><img alt="actual size" src="../images/0/05/Reynolds_ifh.png" width="714" height="630" /></a>
</p><p>If a server receives a URL that either ends in a slash 
(<font color="green">/</font>) or 
<font color="green">contents.html</font>, it returns a web page that
looks like a standard web browser's directory view.
</p><p><a href="../index.php/File:Test.oopendap.org_directory_view.png" class="image" title="actual size"><img alt="actual size" src="../images/9/9e/Test.oopendap.org_directory_view.png" width="714" height="370" /></a>
</p><p>Each link in the directory view opens up the WWW service version of
that data.
</p><p><br />
The <a href="../index.php/QuickStart#An_Easier_Way" title="QuickStart">Quick Start Guide</a> contains more
information about browsing OPeNDAP data interactively.
</p>
<h3><span class="mw-headline" id="Version_Service"><span class="mw-headline-number">1.3.4</span> Version Service</span></h3>
<p>This service returns the version information for the
OPeNDAP server software running on the server.  This service is
triggered by a URL ending with <font color="green">.ver</font>.  The
return is a short text message containing the relevant version
numbers.
</p>
<h3><span class="mw-headline" id="SOAP"><span class="mw-headline-number">1.3.5</span> SOAP</span></h3>
<p>The OPeNDAP server provided by the OPeNDAP group contains an
experimental SOAP service, allowing users to make requests and get
responses by exchanging SOAP XML documents.  This is an experimental
service, and if you're writing an application depending on it, it's
best to contact the OPeNDAP developer team.
</p>
<h3><span class="mw-headline" id="DDX"><span class="mw-headline-number">1.3.6</span> DDX</span></h3>
<p>The DDX is an XML version of the DAS and DDS, combined.  It is
triggered by a URL ending with <font color="green">.ddx</font>.  You
can find the schema for the DDX at <a rel="nofollow" class="external free" href="http://xml.opendap.org/dap/dap2.xsd">http://xml.opendap.org/dap/dap2.xsd</a>.
</p><p>The DDX is designed to contain data, too, but this is not yet
implemented.  You will see an empty dataBLOB element at the end of
each DDX, which will eventually hold returned data.
</p><p>The DDX response can be modified with a
<a href="#Constraint_Expressions">constraint expression</a>.  Like the DDS, the
DDX will describe only the data actually returned.
</p><p>The DDX and the DataDDX (containing the dataBLOB) are the nucleus of what will become version 4 of the DAP.
</p>
<h3><span class="mw-headline" id="THREDDS"><span class="mw-headline-number">1.3.7</span> THREDDS</span></h3>
<p>Some OPeNDAP servers (including <a href="../index.php/Hyrax" title="Hyrax">Hyrax</a>, the server supplied by the OPeNDAP group) can make sensible replies to requests for THREDDS
catalog information.  This can serve to &quot;advertise&quot; a
server's data by having it appear in catalogs accumulated by THREDDS
browsers.  For more information about THREDDS, see the
<a rel="nofollow" class="external text" href="http://www.unidata.ucar.edu/projects/THREDDS/tech/TDS.html">THREDDS</a>
home page.
</p>
<h1><span class="mw-headline" id="Constraint_Expressions"><span class="mw-headline-number">2</span> Constraint Expressions</span></h1>
<p>The OPeNDAP software is not only a data transport mechanism. Using
OPeNDAP, you can subsample the data you are looking at. That is, you
can request an entire data file, or just a small piece of it.
</p>
<h2><span class="mw-headline" id="Selecting_Data:_Using_Constraint_Expressions"><span class="mw-headline-number">2.1</span> Selecting Data: Using Constraint Expressions</span></h2>
<p>The URL such as this one:
</p>
<pre>
http://test.opendap.org/dap/data/nc/sst.mnmean.nc.gz
</pre>
<p>refers to the entire dataset contained in the mnmean.nc file. A user
may, however, choose to sample the dataset simply by modifying the
submitted URL. The constraint expression attached to the URL directs
that the data set specified by the first part of the URL be sampled to
select only the data of interest from a dataset.
</p><p>Because the expression modifies the URL used to access data, this
works even for programs that do not have a built-in way to accomplish
such selections.  This can vastly reduce the amount of data a program
needs to process, and reduce the network load of transmitting that
data to the client.
</p>
<h3><span class="mw-headline" id="Constraint_Expression_Syntax"><span class="mw-headline-number">2.1.1</span> Constraint Expression Syntax</span></h3>
<p>A constraint expression is appended to the target URL following a
question mark, as in the following examples:
</p><p><a rel="nofollow" class="external text" href="http://test.opendap.org/dap/data/nc/sst.mnmean.nc.gz.asc?sst%5B3%5D%5B4%5D%5B5%5D">.../nc/sst.mnmean.nc.gz?sst[3][4][5]</a>
</p><p><a rel="nofollow" class="external text" href="http://test.opendap.org/dap/data/nc/sst.mnmean.nc.gz.asc?sst%5B0:1%5D%5B13:16%5D%5B103:105%5D">.../nc/sst.mnmean.nc.gz?sst[0:1][13:16][103:105]</a>
</p><p><a rel="nofollow" class="external text" href="http://test.opendap.org/dap/data/nc/sst.mnmean.nc.gz.asc?geogrid(sst,62,206,56,210,%2219722%3Ctime%3C19755%22)">.../nc/sst.mnmean.nc.gz?geogrid(sst,62,206,56,210,&quot;19722&lt;time&lt;19755&quot;)</a>
</p><p><a rel="nofollow" class="external text" href="http://test.opendap.org/dap/data/ff/gsodock.dat.asc?Time,Sea_Temp">.../ff/gsodock.dat?Time,Sea_Temp</a>
</p><p><a rel="nofollow" class="external text" href="http://test.opendap.org/dap/data/ff/gsodock.dat.asc?Time,Sea_Temp&amp;Time%3C35234.1">.../ff/gsodock.dat?Time,Sea_Temp&amp;Time%3C35234.1</a>
</p><p><a rel="nofollow" class="external text" href="http://test.opendap.org/dap/data/ff/gsodock.dat.asc?Time,Sea_Temp&amp;Time%3C35234.1&amp;Sea_Temp%3C18">.../ff/gsodock.dat?Time,Sea_Temp&amp;Time%3C35234.1&amp;Sea_Temp%3C18</a>
</p>
<blockquote><font color="red">CAUTION:</font> An OPeNDAP data set can contain an extraordinary amount of data.  You almost certainly do <i>not</i> want to make an unconstrained request to a data set without knowing something about it.  Familiarize yourself with the DDS and DAS before asking for data; it can prevent overload.</blockquote>
<p><br />
A constraint expression consists of two parts: a projection and a selection, separated by an ampersand (&amp;). Either part may contain several sub-expressions. Either part may be present, or both.
</p>
<pre>
...?proj_1,proj_2,...,proj_n&amp;sel_1&amp;sel_2&amp;...&amp;sel_m
</pre>
<p>A projection is simply a comma-separated list of the variables that
are to be returned to the client. If an array is to be subsampled, the
projection specifies the manner in which the sampling is to be
done. If the selection is omitted, all the variables in the projection
list are returned. If the projection is omitted, the entire dataset is
returned, subject to the evaluation of the selection expression. The
projection can also include functional expressions of the form: 
</p>
<pre>
...?function(arg_1,arg_2,...,arg_n)
</pre>
<p>where the arguments are variables from the dataset, scalar values, or
other functions.  (See <a href="#Constraint_Expression_Functions">Constraint
Expression Functions</a> below.)
</p><p>A selection expression leads with an ampersand and is a boolean
expression of the form "variable operator variable", "variable operator
value" or "function(arg_1,arg_2,...,arg_n)", where
</p>
<dl>
<dt>operator
</dt>
<dd>Can be one of the relational operators listed in the table below.
</dd>
<dt>variable
</dt>
<dd>Can be any variable recorded in the dataset.
</dd>
<dt>value
</dt>
<dd>Can be any scalar, string, function, or list of numbers (Lists are denoted by comma-separated items enclosed in curly braces ,for example, {3,11,4.5}.); and 
</dd>
<dt>function
</dt>
<dd>Is a function defined by the server to operate on variables or values, and to return a boolean value. 
</dd>
</dl>
<p>Each selection clause begins with an ampersand (&amp;).  You can think of
this as representing the "AND" boolean operation, but remember that it
is actually a prefix operator, not an infix operator. That is, it must
appear at the beginning of each selection clause, no matter what. This
means that a constraint expression that contains no projection clause
must still have an &amp; in front of the first selection clause.
</p><p><br />
There is no limit on the number of selection clauses that can be combined to create a compound constraint expression. Data that produces a true (non-zero) value for the entire selection expression will be included in the data returned to the client by the server. If only a part of some data structure, such as a Sequence, satisfies the selection criteria, then only that part will be returned.
</p>
<blockquote>NOTE: Due to the differences in data model paradigms,
<p>selection is not implemented for the OPeNDAP array data types, such as
Grid or Array. However, many OPeNDAP servers implement selection
functions you can use for the same effect.  (See
<a href="#Constraint_Expression_Functions">Constraint Expression Functions</a>
</p>
below for more about functions.)  </blockquote>
<h4><span class="mw-headline" id="Simple_Constraint_Expression_Examples"><span class="mw-headline-number">2.1.1.1</span> Simple Constraint Expression Examples</span></h4>
<p>Consider the DDS below.  This is the description of a dataset
containing station data including temperature, oxygen, and
salinity. Each station also contains 20 oxygen data points, taken at
20 fixed depths, used for calibration of the data.
</p>
<pre>
Dataset {
   Sequence{
      Int32 day;
      Int32 month;
      Int32 year;
      Float64 lat;
      Float64 lon;
      Float64 O2cal[20];
      Sequence{
         Float64 press;
         Float64 temp;
         Float64 O2;
         Float64 salt;
      } cast;
      String comments;
   } station;
} arabian-sea;
</pre>
<p>Sample Data Descriptor
</p><p>The following URL will return only the pressure and temperature pairs
of this dataset. (Note that the constraint expression parser removes
all spaces, tabs, and newline characters before the expression is
parsed.) There is only a projection clause, without a selection, in
this constraint expression.
</p>
<pre>
http://oceans.edu/jg/exp1O2/cruise?station.cast.press,station.cast.temp
</pre>
<p>We have assumed that the dataset was stored in the JGOFS format on the
remote host oceans.edu, in a file called explO2/cruise. For the sake
of brevity, from here on we will omit the first part of the URL, to
concentrate on the constraint expression alone.
</p><p>If we only want to see pressure and temperature pairs below 500 meters
deep, we can modify the constraint expression by adding a selection
clause.
</p>
<pre>
?station.cast.press,station.cast.temp&amp;station.cast.press&gt;500.0
</pre>
<p>In order to retrieve all of each cast that has any temperature reading
greater than 22 degrees, use the following:
</p>
<pre>
?station.cast&amp;station.cast.temp&gt;22.0
</pre>
<p>Simple constraint expressions may be combined into compound
expressions by appending them to one another. To retrieve all stations
west of 60 degrees West and north of the equator:
</p>
<pre>
?station&amp;station.lat&gt;0.0&amp;station.lon&lt;-60.0
</pre>
<p>As was mentioned, the logical OR can be implemented using a list of
scalars. The following expression will select only stations taken
north of the equator in April, May, June, or July.
</p>
<pre>
?station&amp;station.lat&gt;0.0&amp;station.month={4,5,6,7}
</pre>
<p>If our dataset contained a field called monsoon-month, indicating the
month in which monsoons happened that year, we could modify the last
example search to include those months as follows:
</p>
<pre>
?station&amp;station.lat&gt;O.O&amp;station.month={4,5,6,7,station.monsoon-month}
</pre>
<p>In other words, a list can contain both values and other variables. If monsoon-month was itself a list of months, a search could be written as:
</p>
<pre>
?station&amp;station.lat&gt;0.0&amp;station.month=station.monsoon-month
</pre>
<p>For arrays and grids, there is a special way to select data within the
projection clause. Suppose we want to see only the first five oxygen
calibration points for each station. The constraint expression for
this would be:
</p>
<pre>
?station.02cal[0:4]
</pre>
<p><br />
By specifying a stride value, we can also select a hyperslab of the
oxygen calibration array:
</p>
<pre>
?station.02cal[0:5:19]
</pre>
<p>This expression will return every fifth member of the 02cal array. In
other words, the result will be a four-element array containing only
the first, sixth, eleventh, and sixteenth members of the 02cal
array. Each dimension of a multi-dimensional arrays may be subsampled
in an analogous way. The return value is an array of the same number
of dimensions as the sampled array, with each dimension size equal to
the number of elements selected from it.
</p>
<h3><span class="mw-headline" id="Operators.2C_Special_Functions.2C_and_Data_Types"><span class="mw-headline-number">2.1.2</span> Operators, Special Functions, and Data Types</span></h3>
<p>The constraint expression syntax defines a number of operators for
each data type. These operators are listed in the table below.
</p><p>All the
operators defined for the scalar base types are boolean operators
whose result depends on the specified comparison between its
arguments. 
</p>
<center>
<p>Constraint Expression Operators.
</p>
<table border="3">
<tr>
<th> Class </th>
<th> Operators
</th></tr>
<tr>
<td> <b>Simple Types</b>
</td></tr>
<tr>
<td> Byte, Int*, UInt*, Float* 	  </td>
<td> &lt; &gt; =&#160;!= &lt;= &gt;=
</td></tr>
<tr>
<td> String  </td>
<td> =&#160;!=  ~=
</td></tr>
<tr>
<td> URL </td>
<td> =&#160;!= ~=
</td></tr>
<tr>
<td> <b>Compound Types</b>
</td></tr>
<tr>
<td> Array</td>
<td> [start:stop] [start:stride:stop]
</td></tr>
<tr>
<td> Structure </td>
<td> .  /
</td></tr>
<tr>
<td> Sequence </td>
<td> .  /
</td></tr>
<tr>
<td> Grid </td>
<td> [start:stop] [start:stride:stop] .
</td></tr></table>
</center>
<p><br />
Individual fields of type
constructors may be accessed using the dot (<font color="green">.</font>) operator or the virtual file system syntax. If
a structure <font color="green">s</font> has two fields <font color="green">time</font> and <font color="green">temperature</font>,
then those fields may be accessed using 
<font color="green">s.time</font> and 
<font color="green">s.temperature</font> or as 
<font color="green">s/time</font> and 
<font color="green">s/temperature</font>. 
</p><p>The ~= operator returns true when the character string on the left of
the operator matches the regular expression on the right. See 
<a href="#Pattern_Matching_with_Constraint_Expressions">Pattern Matching with Constraint Expressions</a>
for a discussion of regular expressions.
</p><p>The array operator [] is used to subsample the given array.  You can find several examples of its use in the <a href="../index.php/QuickStart#Peeking_at_Data" title="QuickStart">Quick Start Guide</a>.
</p>
<h3><span class="mw-headline" id="Constraint_Expression_Functions"><span class="mw-headline-number">2.1.3</span> Constraint Expression Functions</span></h3>
<p>An OPeNDAP data server may define its own set of functions that may be
used in a constraint expression. For example, the oceans.edu data server
we've been imagining might define a sigma1()
function to return the density of the water at the given temperature,
salinity and pressure. A query like the following would return all the
stations containing water samples whose density exceeded 1.0275g/cm3. 
</p>
<pre>
?station.cast&amp;sigma1(station.cast.temp,
                     station.cast.salt,
                     station.cast.press)&gt;27.5
</pre>
<p>Functions like this one are not a standard part of the OPeNDAP
architecture, and may vary from one server to another. A user may
query a server for a list of such functions by sending a URL with a
constraint expression that calls the "version()" function.
</p><p>This will return a list of functions implemented.  Call any of the
functions with no arguments to see a description of the arguments.
</p><p>For example:
</p><p><a rel="nofollow" class="external free" href="http://test.opendap.org/dap/data/nc/sst.mnmean.nc.gz.asc?version()">http://test.opendap.org/dap/data/nc/sst.mnmean.nc.gz.asc?version()</a>
</p><p>And: 
</p><p><a rel="nofollow" class="external free" href="http://test.opendap.org/dap/data/nc/sst.mnmean.nc.gz.asc?geogrid()">http://test.opendap.org/dap/data/nc/sst.mnmean.nc.gz.asc?geogrid()</a>
</p>
<blockquote>
<p>Note: When using functions, be careful to remember that a function used in a
projection can return any value, but when used in a selection clause,
it must either return a boolean value, or be part of a test that
</p>
returns a boolean value.</blockquote>
<p><br />
</p>
<h3><span class="mw-headline" id="Pattern_Matching_with_Constraint_Expressions"><span class="mw-headline-number">2.1.4</span> Pattern Matching with Constraint Expressions</span></h3>
<p>There are three operators defined to compare one String data type to
another. The = operator returns TRUE if its two input character
strings are identical, and the&#160;!= operator returns TRUE if the Strings
do not match. A third operator, ~= is provided that returns TRUE if
the String to the left of the operator matches the regular expression
in the String on the right.
</p><p>A regular expression is simply a character string containing wildcard
characters that allow it to match patterns within a longer string. For
example, the following constraint expression might return all the
stations on the sample cruise at which a shark was sighted:
</p>
<pre>
?station&amp;station.comment~=&quot;.*shark.*&quot;
</pre>
<p>Most characters in a regular expression match themselves. That is, an
"f" in a regular expression matches an "f" in the target string. There
are several special characters, however, that provide more
sophisticated pattern-matching capabilities.
</p>
<dl>
<dt>.
</dt>
<dd>The period matches any single character except a newline. 
</dd>
<dt> * +&#160;?
</dt>
<dd>These are postfix operators, which indicate to try to match the preceding regular expression repetitively (as many times as possible). Thus, o* matches any number of o's. The operators differ in that o* also matches zero o's, o+ matches only a series of one or more o's, and o? matches only zero or one o. 
</dd>
<dt>"[ ... ]"
</dt>
<dd>Define a "character set," which begins with [ and is terminated by ]. In the simplest case, the characters between the two brackets are what this set can match. The expression [Ss] matches either an upper or lower case s. Brackets can also contain character ranges, so [0-9] matches all the numerals. If the first character within the brackets is a caret ( ), the expression will only match characters that do not appear in the brackets. For example, [ 0-9]* only matches character strings that contain no numerals. 
</dd>
<dt>^$
</dt>
<dd>These are special characters that match the empty string at the beginning or end of a line. 
</dd>
<dt> \|
</dt>
<dd>These two characters define a logical OR between the largest possible expression on either side of the operator. So, for example, the string Endeavor\|Oceanus matches either Endeavor or Oceanus. The scope of the OR can be contained with the grouping operators, \( and \). 
</dd>
<dt> \( \)
</dt>
<dd>These are used to group a series of characters into an expression, or for the OR function. So, for example, \(abc\)* matches zero or more repetitions of the string abc2. 
</dd>
</dl>
<p><br />
There are several more special characters and several other features
of the characters described here, but they are beyond the scope of
this guide. The OPeNDAP regular expression syntax is the same as that
used in the Emacs editor. See the documentation for Emacs for a
complete description of all the pattern- matching capabilities of
regular expressions. 
</p>
<h3><span class="mw-headline" id="Optimizing_the_Query"><span class="mw-headline-number">2.1.5</span> Optimizing the Query</span></h3>
<p>Using the tools provided by OPeNDAP, a user can build quite elaborate
and sophisticated constraint expressions that will return precisely
the data he or she wishes to examine. However, as the complexity of
the constraint expression increases, so does the time necessary to
process that expression. There are some techniques a user may user to
optimize the evaluation of a constraint that will ease the load on the
server, and provide faster replies to OPeNDAP dataset queries. 
</p><p>The OPeNDAP constraint expression evaluator uses a "lazy evaluation"
algorithm. This means that the sub-clauses of the selection clause are
evaluated in order, and parsing halts when any sub-clause returns
FALSE. Consider a constraint expression that looks like this:   
</p>
<pre>
?station&amp;station.cast.O2&gt;15.0&amp;station.cast.temp&gt;22.0
</pre>
<p>If the server encounters a station with no oxygen values over 15.0, it
does not bother to look at the temperature records at all. The first
sub- clause evaluates FALSE, so the second clause is never even
parsed. 
</p><p>A careful user may use this feature to his or her advantage. In the
above example, the order of the clauses does not really matter; there
are the same number of temperature and oxygen measurements at each
station. However, consider the following expression: 
</p>
<pre>
?station&amp;station.cast.O2&gt;15.0&amp;station.month={3,4,5}
</pre>
<p><br />
For each station there is only one month value, while there are many
oxygen values. Passing a constraint expression like this one will
force the server to sort through all the oxygen data for each station
(which could be in the thousands of points), only to throw the data
away when it finds that the month requested does not match the month
value stored in the station data. This would be far better done with
the clauses reversed: 
</p>
<pre>
?station&amp;station.month={3,4,5}&amp;station.cast.O2&gt;15.0
</pre>
<p>This expression will evaluate much more quickly because unwanted
stations may be quickly discarded by the first sub-clause of the
selection. The server will only examine each oxygen value in the
station if it already knows that the station might be worth keeping.   
</p><p>This sort of optimization becomes even more important when one of the
clauses contains a URL. In general, any selection sub-clause
containing a URL should be left to the end of the selection. This way,
the OPeNDAP server will only be forced to go to the network for data
if absolutely necessary to evaluate the constraint expression.</font>
</p>



</div>
				<!-- end content -->
				<div class="visualClear"></div>
	</div>
</div></div>
</body></html>