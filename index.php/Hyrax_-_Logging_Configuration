
<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>Hyrax - Logging Configuration - OPeNDAP Documentation</title>
</head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Hyrax_-_Logging_Configuration skin-monobook action-view">
<div id="globalWrapper">
<div id="column-content"><div id="content" class="mw-body-primary" role="main">
	
	
	<h1 id="firstHeading" class="firstHeading" lang="en"><span dir="auto">Hyrax - Logging Configuration</span></h1>
	<div id="bodyContent" class="mw-body">
		<div id="siteSub">From OPeNDAP Documentation</div>
		<div id="contentSub"></div>
		

		<!-- start content -->
<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><p>We see logging activities falling into two categories:
</p><p><b>Access Logging</b> - Is used to monitor server usage, server performance, and to see which resources are receiving the most attention. Tomcat has a very nice built in Access Logging mechanism, all you have to do is turn it on.
</p><p><b>Informational and debug logging</b> - Most developers (myself included) rely on a collection of imbedded "instrumentation" that allows them to monitor their code and see what parts are being executed. Typically we like to design this instrumentation so that it can be enabled/disabled at runtime. Hyrax has this type of debugging instrumentation Hyrax ships with it disabled, but you could enable it. If you were to encounter an internal problem with Hyrax I would have you enable different aspects of the instrumentation at you site so that we could review the output to determine the issue.
</p><p><br />
</p>
<hr />
<div id="toc" class="toc"><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Access_Logging"><span class="tocnumber">1</span> <span class="toctext">Access Logging</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="#AccessLogValve"><span class="tocnumber">1.1</span> <span class="toctext">AccessLogValve</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-3"><a href="#Informational_and_Debug_Logging_.28Using_the_Logback_implementation_of_Log4j.29"><span class="tocnumber">2</span> <span class="toctext">Informational and Debug Logging (Using the Logback implementation of Log4j)</span></a>
<ul>
<li class="toclevel-2 tocsection-4"><a href="#Configuration_File_Location"><span class="tocnumber">2.1</span> <span class="toctext">Configuration File Location</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="#Configuration"><span class="tocnumber">2.2</span> <span class="toctext">Configuration</span></a></li>
</ul>
</li>
</ul>
</div>

<h1><span class="mw-headline" id="Access_Logging"><span class="mw-headline-number">1</span> Access Logging</span></h1>
<p>Many people will want to record access logs for their Hyrax server. <b>We</b> want you to keep access logs for your Hyrax server. The easiest way to get a simple access log for Hyrax is to utilize the Tomcat/Catalina <a rel="nofollow" class="external text" href="http://tomcat.apache.org/tomcat-5.0-doc/config/valve.html">Valve Component</a>
</p>
<h2><span class="mw-headline" id="AccessLogValve"><span class="mw-headline-number">1.1</span> AccessLogValve</span></h2>
<p>Since Hyrax's public facade is provided by the OLFS running inside of the Tomcat servlet container you may utilize Tomcat's handy access logging which relies on the  <a rel="nofollow" class="external text" href="http://tomcat.apache.org/tomcat-5.0-doc/catalina/docs/api/org/apache/catalina/valves/AccessLogValve.html">org.apache.catalina.valves.AccessLogValve class</a> class. By default Tomcat comes with this turned off.
</p><p>To turn it on:
</p><p><b>1.</b> Locate the file $CATALINA_HOME/conf/servlet.html.
</p><p><b>2.</b> Find the commented out section for the access log inside the &lt;Host&gt; element. The server.xml file contains a good deal of comments, both for instruction and containing code examples. The part you are looking for is nested inside of the &lt;Service&gt; and the &lt;Engine&gt; elements. Typically it will look like:
</p>
<pre>
&lt;Service ...&gt;
    .
    .
    .
    &lt;Engine...&gt;
        .
        .
        .
        &lt;Host name=&quot;localhost&quot; appBase=&quot;webapps&quot;
            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;
            xmlValidation=&quot;false&quot; xmlNamespaceAware=&quot;false&quot;&gt;
			.
			.
			.			
            &lt;!-- Access log processes all requests for this virtual host.  
                 By default, log files are created in the &quot;logs&quot; 
                 directory relative to $CATALINA_HOME.  If you wish, you can 
                 specify a different directory with the &quot;directory&quot;
                 attribute.  Specify either a relative (to $CATALINA_HOME) 
                 or absolute path to the desired directory. --&gt;
				 
            &lt;!--
            &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; 
                   directory=&quot;logs&quot;  prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot;
                   pattern=&quot;common&quot; resolveHosts=&quot;false&quot;/&gt;  
            --/&gt;
            .
            .
            .
        &lt;/Host&gt;
        .
        .
        .
    &lt;/Engine&gt;
    .
    .
    .
&lt;/Service&gt;
</pre>
<p>You can uncomment the &lt;<i>Valve</i>&gt; element to enable it and you can change the values of the various attributes to suite your localization. For example:
</p>
<pre>
            &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; 
                   directory=&quot;logs&quot;  
                   prefix=&quot;access_log.&quot; 
                   suffix=&quot;.log&quot; 
                   pattern=&quot;%h&#160;%l&#160;%u&#160;%t &amp;quot;%r&amp;quot;&#160;%s&#160;%b&#160;%D&quot;
                   resolveHosts=&quot;false&quot;/&gt;
</pre>
<p><b>3.</b> Save the file.
</p><p><b>4.</b> Restart Tomcat.
</p><p><b>5.</b> Go read yer log files!
</p><p><br />
Of note is the <i>pattern</i> attribute which allows you to customize the content of the access log entries. 
It is documented in the <a rel="nofollow" class="external text" href="http://tomcat.apache.org/tomcat-5.0-doc/catalina/docs/api/index.html">javadocs for Tomcat/Catalina</a>, as part of the <a rel="nofollow" class="external text" href="http://tomcat.apache.org/tomcat-5.0-doc/catalina/docs/api/org/apache/catalina/valves/AccessLogValve.html">org.apache.catalina.valves.AccessLogValve</a> class, and here in the <a rel="nofollow" class="external text" href="http://tomcat.apache.org/tomcat-5.0-doc/config/valve.html">Server Configuration Reference</a>. The pattern shown above will provide log output that looks like this:
</p>
<pre>
        69.59.200.52 - - [05/Mar/2007:16:29:14 -0800] &quot;GET /opendap/data/nc/contents.html HTTP/1.1&quot; 200 13014 234
        69.59.200.52 - - [05/Mar/2007:16:29:14 -0800] &quot;GET /opendap/docs/images/logo.gif HTTP/1.1&quot; 200 8114 2
        69.59.200.52 - - [05/Mar/2007:16:29:51 -0800] &quot;GET /opendap/data/nc/TestPatDbl.nc.html HTTP/1.1&quot; 200 11565 137
        69.59.200.52 - - [05/Mar/2007:16:29:56 -0800] &quot;GET /opendap/data/nc/data.nc.ddx HTTP/1.1&quot; 200 2167 121
</pre>
<p>Where the last column is the time in milliseconds it took to service the request and the next to the last column is the number of bytes returned.
</p><p><br />
</p>
<hr />
<h1><span class="mw-headline" id="Informational_and_Debug_Logging_.28Using_the_Logback_implementation_of_Log4j.29"><span class="mw-headline-number">2</span> Informational and Debug Logging (Using the Logback implementation of Log4j)</span></h1>
<p>In general you shouldn't have to modify the default logging configuration for Hyrax. It may become necessary, if you encounter problems, but otherwise I suggest you leave it be.
</p><p>Having said that: Hyrax uses the Logback logging package to provide an easily configurable and flexible logging environment. All "console" output is routed through the Logback package and can be controlled using the Logback configuration file.
</p><p>There are several logging levels available:
</p>
<ul>
<li><b>TRACE</b>
</li>
<li><b>DEBUG</b>
</li>
<li><b>INFO</b>
</li>
<li><b>WARN</b>
</li>
<li><b>ERROR</b>
</li>
<li><b>FATAL</b>
</li>
</ul>
<p>Hyrax ships with a default logging level of <b>ERROR</b>.
</p><p>Additionally Hyrax maintains it's own access log using Logback .
</p><p><b>We strongly recommend that you take the time to <a rel="nofollow" class="external text" href="http://logback.qos.ch/manual/index.html">read about Logback and Log4j</a> before you attempt to manipulate the Logback configuration.</b>
</p>
<h2><span class="mw-headline" id="Configuration_File_Location"><span class="mw-headline-number">2.1</span> Configuration File Location</span></h2>
<p>Logback gets it's configuration from an XML file. Hyrax locates this file in the following manner:
</p><p><br />
</p>
<ol>
<li>Checks the &lt;init-parameter&gt; list for the hyrax servlet (in the web.xml) for a an &lt;init-parameter&gt; called "logbackConfig". If found, the value of this parameter is assumed to be a fully qualified path name for the file. This can be used to specify alternate Logback config files. Note that this configuration will not be persistent across new installations of Hyrax. We do <b>not</b> recommend setting this parameter as doing so is not persistent: It will be overridden the next time the Web ARchive file is deployed.<br /><br />
</li>
<li>Failing 1, Hyrax then checks in the persistent content directory (<a href="../index.php/Hyrax_-_OLFS_Configuration#OLFS_Configuration_Location" title="Hyrax - OLFS Configuration">set by either the OLFS_CONFIG_DIR environment variable or in /etc/olfs</a>) for the file "logback-test.xml". If this file is present then it will be used to configure logging, and new installations of Hyrax will detect ad use this logging configuration automatically. <br /><br />
</li>
<li>Failing 2, Hyrax then checks in the persistent content directory (<a href="../index.php/Hyrax_-_OLFS_Configuration#OLFS_Configuration_Location" title="Hyrax - OLFS Configuration">set by either the OLFS_CONFIG_DIR environment variable or in /etc/olfs</a>) for the file "logback.xml". If this file is present then it will be used to configure logging, and new installations of Hyrax will detect ad use this logging configuration automatically. <br /><br />
</li>
<li>Failing 3, Hyrax falls back to the logback.xml file shipped with the distribution which is located in the $CATALINA_HOME/webapps/opendap/WEB-INF directory. Changes made to this file will be lost when a new version of Hyrax is installed or the opendap.war Web ARchive file is redeployed..<br /><br />
</li>
</ol>
<p>So - if you want to customize your Hyrax logging and have it be persistent, do it by copying the distributed logback.xml file ($CATALINA_HOME/webapps/opendap/WEB-INF/logback.xml) to the in the persistent content directory  (<a href="../index.php/Hyrax_-_OLFS_Configuration#OLFS_Configuration_Location" title="Hyrax - OLFS Configuration">set by either the OLFS_CONFIG_DIR environment variable or in /etc/olfs</a>) and editing that copy.
</p>
<h2><span class="mw-headline" id="Configuration"><span class="mw-headline-number">2.2</span> Configuration</span></h2>
<p>Did you <a rel="nofollow" class="external text" href="http://logback.qos.ch/manual/index.html">read about LogBack and Log4j</a>? Great!
</p><p>There are a number of <i>Appenders</i> defined in the Hyrax <b>log4j.xml</b> file:
</p>
<ul>
<li><b>stdout</b> - Loggers using this Appender will send everything to the console/stdout - which in a Tomcat environment will get shunted into the file <i>$TOMCAT_HOME/logs/catalina.out</i>
</li>
<li><b>devNull</b> - Loggers using this Appender will not log. All messages will be discarded. This is the Log4j equivalent of piping your output into <i>/dev/null</i> in a UNIX environment.
</li>
<li><b>ErrorLog</b> - Loggers using this Appender will have their log output placed in the error log file in the persistent content directory: <i>$TOMCAT_HOME/content/opendap/logs/error.log</i>
</li>
<li><b>HyraxAccessLog</b> - Loggers using this Appender will have their log output placed in the access log file in the persistent content directory: <i>$TOMCAT_HOME/content/opendap/logs/HyraxAccess.log</i>
</li>
</ul>
<p>The default configuration pushes <b>ERROR</b> level (and higher) messages into the <b>ErrorLog</b>, and logs accesses using <b>HyraxAccessLog</b>. You can turn on debugging level logging by changing the log level to <b>DEBUG</b> for the software components you are interested in. All of the OPeNDAP code is in the "opendap" package. Thus:
</p>
<pre>	
    &lt;logger name=&quot;opendap&quot; level=&quot;error&quot;/&gt;
        &lt;appender-ref ref=&quot;ErrorLog&quot;/&gt;
    &lt;/logger&gt;
</pre>
<p>Will cause all log messages of <b>ERROR</b> level or higher to be sent to the error log.
</p><p>This configuration:
</p>
<pre>
    &lt;logger name=&quot;opendap&quot; level=&quot;info&quot;/&gt;
        &lt;appender-ref ref=&quot;stdout&quot;/&gt;
    &lt;/logger&gt;
</pre>
<p>Will cause all messages of level <b>INFO'</b> or higher to be sent to <b>stdout</b>, which (in Tomcat) means that they will get stuck in the file <i>$TOMCAT_HOME/logs/catalina.out</i>
</p><p>Be sure to get in touch if you have further questions about the logging configuration.
</p>



</div>
				<!-- end content -->
				<div class="visualClear"></div>
	</div>
</div></div>
</body></html>