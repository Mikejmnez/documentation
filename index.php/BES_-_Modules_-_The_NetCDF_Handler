
<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>BES - Modules - The NetCDF Handler - OPeNDAP Documentation</title>
</head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-BES_-_Modules_-_The_NetCDF_Handler skin-monobook action-view">
<div id="globalWrapper">
<div id="column-content"><div id="content" class="mw-body-primary" role="main">
	
	
	<h1 id="firstHeading" class="firstHeading" lang="en"><span dir="auto">BES - Modules - The NetCDF Handler</span></h1>
	<div id="bodyContent" class="mw-body">
		<div id="siteSub">From OPeNDAP Documentation</div>
		<div id="contentSub"></div>
		

		<!-- start content -->
<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><div id="toc" class="toc"><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Kinds_of_files_the_handler_will_serve"><span class="tocnumber">1</span> <span class="toctext">Kinds of files the handler will serve</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="#Mappings_between_NetCDF_version_4_data_model_and_DAP2_data_types"><span class="tocnumber">1.1</span> <span class="toctext">Mappings between NetCDF version 4 data model and DAP2 data types</span></a>
<ul>
<li class="toclevel-3 tocsection-3"><a href="#Mappings_for_netCDF_4.27s_User_Defined_types"><span class="tocnumber">1.1.1</span> <span class="toctext">Mappings for netCDF 4's User Defined types</span></a></li>
<li class="toclevel-3 tocsection-4"><a href="#NetCDF_4.27s_Group"><span class="tocnumber">1.1.2</span> <span class="toctext">NetCDF 4's Group</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-5"><a href="#Configuration_parameters"><span class="tocnumber">2</span> <span class="toctext">Configuration parameters</span></a>
<ul>
<li class="toclevel-2 tocsection-6"><a href="#IgnoreUnknownTypes"><span class="tocnumber">2.1</span> <span class="toctext">IgnoreUnknownTypes</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="#ShowSharedDimensions"><span class="tocnumber">2.2</span> <span class="toctext">ShowSharedDimensions</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="#PromoteByteToShort"><span class="tocnumber">2.3</span> <span class="toctext">PromoteByteToShort</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-9"><a href="#Appendix"><span class="tocnumber">3</span> <span class="toctext">Appendix</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Kinds_of_files_the_handler_will_serve"><span class="mw-headline-number">1</span> Kinds of files the handler will serve</span></h2>
<p>There are several versions of the netCDF software for reading and writing data and using those different versions, it's possible to make several different kinds of data files. For the most part, netCDF strives to maintain compatibility so that any older file can be read using any newer version of the library. To ensure that the netCDF handler can read (almost) any valid netCDF data file, you should make sure to use the latest version of the netCDF library when you build or install the handler.
</p><p>However, as of netCDF 4, there are some new data model components in netCDF that are hard to represent in DAP2 (hence the 'almost' in the preceding paragraph). If the handler, as of version 3.10.x, is linked with netCDF 4.1.x or later, you will be able to read any netCDF file that fits the 'classic' model of netCDF (as defined by <a rel="nofollow" class="external text" href="http://www.unidata.ucar.edu/software/netcdf/docs/netcdf/Which-Format.html#Which-Format">Unidata's documentation</a>) which essentially means any file that uses only data types present in the netCDF 3.x API but with the addition that these files can employ both internal compression and chunking. 
</p><p>The new data types present in the netCDF data model present more of a challenge. However, as of version 3.10.x, the Hyrax data handler will serve most of the new cardinal types and the more commonly used 'user defined types'.
</p>
<h3><span class="mw-headline" id="Mappings_between_NetCDF_version_4_data_model_and_DAP2_data_types"><span class="mw-headline-number">1.1</span> Mappings between NetCDF version 4 data model and DAP2 data types</span></h3>
<p>All of the cardinal types in the netCDF 4 data model map directly to types in DAP2 except for the following:
</p>
<dl>
<dt>NC_BYTE</dt>
<dd> There is no 'signed byte' type in DAP2 so these map to an unsigned byte or signed Int16, depending on the value of the option NC.PromoteByteToShort (see below where the configuration parameters are described).
</dd>
<dt>NC_CHAR</dt>
<dd> There is no 'character' type in DAP2 so these map to DAP Strings of length one. Arrays of <i>N</i> characters in netCDF map to arrays of <i>N-1</i> Strings in DAP
</dd>
<dt>NC_INT64, NC_UINT64</dt>
<dd> DAP2 does not support 64-bit integers (this will be added soon to the next version of the protocol).
</dd>
</dl>
<h4><span class="mw-headline" id="Mappings_for_netCDF_4.27s_User_Defined_types"><span class="mw-headline-number">1.1.1</span> Mappings for netCDF 4's User Defined types</span></h4>
<p>In the netCDF documentation, types such as Compound (which is effectively C's <i>struct</i> type), et c., are called <i>User Defined</i> types. Unlike the cardinal types, netCDF 4'S user defined types don't always have a simple mapping to DAP2's types. However, the most important of the user defined types, NC_COMPOUND, does map directly to DAP2's Structure. Here's how the user defined types are mapped by the handler as of version 3.10:
</p>
<dl>
<dt>NC_COMPOUND</dt>
<dd> This maps directly to a DAP2 Structure. The handler works with both compound variables and attributes. For attributes, the handler only recognizes scalar and vector (one-dimensional) compounds. For variables scalar and array compounds are supported including compounds within compounds and compounds with fields that are arrays.
</dd>
<dt>NC_VLEN</dt>
<dd> Not supported
</dd>
<dt>NC_ENUM</dt>
<dd> Supported so long as the 'base type' is not a 64-bit integer. We add extra attributes to help the downstream user. We add <i>DAP2_OriginalNetCDFBaseType</i> with the value <i>NC_ENUM</i> and <i>DAP2_OriginalNetCDFTypeName</i> with the name of the type from the file (Enums in netCDF are user-defined types, so they have names set y the folks who wrote the file). We also add two attributes that provide information about the integral values and they names (e.g., Clear = 0, Cumulonimbus = 1, Stratus = 2, ..., Missing = 255) using two attributes: <i>DAP2_EnumValues</i> and <i>DAP2_EnumNames</i>.
</dd>
<dt>NC_OPAQUE</dt>
<dd> This type is mapped to an array of Bytes (so the scalar NC_OPAQUE becomes a one-dimensional array in DAP2). If a netCDf file contains an array (with <i>M</i> dimensions) of NC_OPAQUE vars, then the DAP response will contain a Byte array with <i>M+1</i> dimensions. In addition, the handler adds an attribute <i>DAP2_OriginalNetCDFBaseType</i> with the value <i>NC_OPAQUE</i> and <i>DAP2_OriginalNetCDFTypeName</i> with the name of the type from the file to the Byte variable so that savvy clients can see what's going on. Even though the DAP2 object for an NC_OPAQUE is an array, it cannot be subset (but arrays of NC_OPAQUEs can be subset with the restriction that <i>M+1</i> dimensional DAP2 Byte array can only be subset in the original NC_OPAQUE's <i>M</i> dimensions).
</dd>
</dl>
<h4><span class="mw-headline" id="NetCDF_4.27s_Group"><span class="mw-headline-number">1.1.2</span> NetCDF 4's Group</span></h4>
<p>The netCDF handler currently reads only from the root group.
</p>
<h2><span class="mw-headline" id="Configuration_parameters"><span class="mw-headline-number">2</span> Configuration parameters</span></h2>
<h4><span class="mw-headline" id="IgnoreUnknownTypes"><span class="mw-headline-number">2.1</span> IgnoreUnknownTypes</span></h4>
<p>When the handler reads a type that it does not 
recognize, it will normally signal an error and stop processing. Setting this
parameter to true will cause it to silently ignore the unknown type (an error
message may be written to the bes log file).
</p><p>Accepted values: true,yes|false,no, defaults to false.
</p><p>Example: 
</p>
<pre>NC.IgnoreUnknownTypes=true
</pre>
<h4><span class="mw-headline" id="ShowSharedDimensions"><span class="mw-headline-number">2.2</span> ShowSharedDimensions</span></h4>
<p>Include shared dimensions as separate variables. This feature is included to support older clients based on the netCDF library. Some versions of the library depend on the shared dimensions appearing as variables at the 'top' of the file.
</p><p>Clients that announce to the server that they understand newer versions of the DAP (3.2 and up) won't need these extra variables, while older ones likely will. In the 3.10.0 version of the handler, the DAP version that clients announce they can accept will determine how the handler responses <i>unless</i> this parameter is set, in which case, the value set in the configuration file will override that default behavior.
</p><p>Accepted values: true,yes|false,no, defaults to false.
</p><p>Example: 
</p>
<pre>NC.ShowSharedDimensions=false
</pre>
<h4><span class="mw-headline" id="PromoteByteToShort"><span class="mw-headline-number">2.3</span> PromoteByteToShort</span></h4>
<p>This option first appears in Hyrax 1.8; version 3.10.0 of the netcdf_handler.
</p><p><b>Note</b>: Hyrax version 1.8 ships with this turned on in the netcdf handler's configuration file, even though the default for the option is <i>off</i>.
</p><p>Use this option to promote DAP2 <i>Byte</i> variables and attributes to <i>Int16</i>, noting that Byte is unsigned and Int16 is signed, so this is a way to preserve the sign of netCDF's <i>signed Byte</i> data type.
</p><p>For netcdf4 files, this option behaves the same except that NC_OPAQUE variables are externalized as DAP Bytes regardless of the option's value; their Byte attributes, on the other hand, as promoted to Int16 when the option is <i>true</i>.
</p><p>Backstory: In NetCDF the <i>Byte</i> data type is signed while in DAP2 it is unsigned. For data (i.e., variables) this often makes no real difference because byte data are often read from the network and dumped into an array where their sign is interpreted (correctly or not) by the client software - in other words byte-data is often a special case. However, this is, strictly speaking, wrong. In addition, and maybe more importantly, with attributes the values are interpreted by the server and represented in ASCII (and sent to the client as text), so the sign is interpreted by the server and and the resulting text is converted into a binary value by the client; the simple trick of letting the default C types handle the value's sign won't work. One way around this incompatibility is to promote <i>Byte</i> in DAP2 to <i>Int16</i>, which is a signed type.
</p>
<pre>Accepted values: true,yes|false,no, defaults to false, the server's original behavior.
</pre>
<p>Example: 
</p>
<pre>NC.PromoteByteToShort=true
</pre>
<h2><span class="mw-headline" id="Appendix"><span class="mw-headline-number">3</span> Appendix</span></h2>
<table border="1" style="text-align:center;">
<caption> <i>The complete set of mappings for the types in the netCDF 4 data model<br /></i>
(entries in <font color="gray">gray</font> are new types not currently supported; entries in <font color="green">green</font> are new types that are supported)
</caption>
<tr>
<th> netCDF type name
</th>
<th> netCDF type description
</th>
<th> DAP2 type name
</th>
<th> DAP2 type description
</th>
<th> Notes
</th></tr>
<tr>
<td>NC_BYTE
</td>
<td>8-bit signed integer
</td>
<td>dods_byte<br /><i>dods_int16</i> (see note)
</td>
<td>8-bit unsigned integer<br /><i>16-bit signed int</i> (see note)
</td>
<td align="left"> The DAP2 type is unsigned; This mapping can be changed so that netcdf Byte mapps to DAP2 Int16 (which will preserve the netCDF Byte's sign bit (see the NC.PromoteByteToShort configuration parameter).
</td></tr>
<tr style="font-style:italic; color:green;">
<td>NC_UBYTE
</td>
<td>8-bit unsigned integer
</td>
<td>dods_byte
</td>
<td>8-bit unsigned integer
</td>
<td>
</td></tr>
<tr>
<td>NC_CHAR
</td>
<td>8-bit unsigned integer
</td>
<td>dods_str
</td>
<td>variable length character string
</td>
<td align="left"> Treated as character data; arrays are treated specially (see text)
</td></tr>
<tr>
<td>NC_SHORT
</td>
<td>16-bit signed integer
</td>
<td>dods_int16
</td>
<td>16-bit signed integer
</td>
<td>
</td></tr>
<tr style="font-style:italic; color:green;">
<td>NC_USHORT
</td>
<td>16-bit unsigned integer
</td>
<td>dods_uint16
</td>
<td>16-bit unsigned integer
</td>
<td>
</td></tr>
<tr>
<td>NC_INT
</td>
<td>32-bit signed integer
</td>
<td>dods_int32
</td>
<td>32-bit signed integer
</td>
<td>
</td></tr>
<tr style="font-style:italic; color:green;">
<td>NC_UINT
</td>
<td>32-bit unsigned integer
</td>
<td>dods_uint32
</td>
<td>32-bit unsigned integer
</td>
<td>
</td></tr>
<tr style="font-style:italic; color:gray;">
<td>NC_INT64
</td>
<td>64-bit signed integer
</td>
<td>None
</td>
<td>
</td>
<td align="left">Not supported
</td></tr>
<tr style="font-style:italic; color:gray;">
<td>NC_UINT64
</td>
<td>64-bit unsigned integer
</td>
<td>None
</td>
<td>
</td>
<td align="left">Not supported
</td></tr>
<tr>
<td>NC_FLOAT
</td>
<td>32-bit floating point
</td>
<td>dods_float32
</td>
<td>32-bit floating point
</td>
<td>
</td></tr>
<tr>
<td>NC_DOUBLE
</td>
<td> 64-bit floating point
</td>
<td>dods_float64
</td>
<td> 64-bit floating point
</td>
<td>
</td></tr>
<tr style="font-style:italic; color:green;">
<td>NC_STRING
</td>
<td>variable length character string
</td>
<td>dods_str
</td>
<td>variable length character string
</td>
<td align="left">In DAP2 it's impossible to distinguish this from an array of NC_CHAR
</td></tr>
<tr style="font-style:italic; color:green;">
<td>NC_COMPOUND
</td>
<td>A user defined type similar to C's struct
</td>
<td>dods_structure
</td>
<td>A DAP Structure; similar to C's struct
</td>
<td>
</td></tr>
<tr style="font-style:italic; color:green;">
<td>NC_OPAQUE
</td>
<td>A BLOB data type
</td>
<td>dods_byte
</td>
<td>an array of bytes
</td>
<td align="left">The handler adds two attributes (<i>DAP2_OriginalNetCDFBaseType</i> with the value NC_OPAQUE<br />
<p>and <i>DAP2_OriginalNetCDFTypeName</i> with the type's name) that provide info for savvy clients;<br />
see text above about subsetting details
</p>
</td></tr>
<tr style="font-style:italic; color:green;">
<td>NC_ENUM
</td>
<td>Similar to C's enum
</td>
<td>dods_byte, ..., dods_uint32
</td>
<td>any integral type
</td>
<td align="left">The handler chooses an integral type depending on the type used in the NetCDF file.<br />
<p>It adds the <i>DAP2_OriginalNetCDFBaseType</i> and <i>DAP2_OriginalNetCDFTypeName</i> attributes<br />
as with NC_OPAQUE and also <i>DAP2_EnumNames</i> and <i>DAP2_EnumValues</i>. Enums with 64-bit<br />
integer base types are not supported.
</p>
</td></tr>
<tr style="font-style:italic; color:gray;">
<td>NC_VLEN
</td>
<td>variable length arrays
</td>
<td>None
</td>
<td>
</td>
<td>
</td></tr></table>


</div>
				<!-- end content -->
				<div class="visualClear"></div>
	</div>
</div></div>
</body></html>