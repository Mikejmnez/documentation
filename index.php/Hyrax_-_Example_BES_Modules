
<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>Hyrax - Example BES Modules - OPeNDAP Documentation</title>
</head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Hyrax_-_Example_BES_Modules skin-monobook action-view">
<div id="globalWrapper">
<div id="column-content"><div id="content" class="mw-body-primary" role="main">
	
	
	<h1 id="firstHeading" class="firstHeading" lang="en"><span dir="auto">Hyrax - Example BES Modules</span></h1>
	<div id="bodyContent" class="mw-body">
		<div id="siteSub">From OPeNDAP Documentation</div>
		<div id="contentSub"></div>
		

		<!-- start content -->
<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><p>We have provided you with two example BES modules. These modules are the Hello World module and the CSV data handler module.
</p><p>Both of these modules are available from the SVN source code repository and are not included in the source tar ball or the binary distributions. To get them you will need to 'check out' the bes source code for <a rel="nofollow" class="external text" href="http://scm.opendap.org/svn/trunk/bes/hello_world">this module</a>.
</p>
<h1><span class="mw-headline" id="Hello_World"><span class="mw-headline-number">1</span> Hello World</span></h1>
<p>The Hello World module, the SampleModule class, adds a new command to the BES, the SampleSayXMLCommand. Using the BES command line client you would have an input file with the following:
</p>
<pre>
  &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
  &lt;request reqID=&quot;some_unique_value&quot; &gt;
      &lt;say what=&quot;hello&quot; to=&quot;world&quot; /&gt;
  &lt;/request&gt;
</pre>
<p>The XML response document would look like the following:
</p>
<pre>
  &lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
  &lt;say&gt;&lt;response&gt;&lt;text&gt;hello world&lt;/text&gt;&lt;/response&gt;&lt;/say&gt;
</pre>
<p>It also adds the SampleRequestHandler class, which handles <code>help</code> and <code>version</code> requests, the SampleSayResponseHandler class, which handles building AND populating the informational response, and the SayReporter, which reports on what is being said to who in a log file configured in the BES configuration file. You can see the sample input and output in the bes-testsuite directory under bes/hello_world. Adding this sample module to your BES configuration file is also easy. It uses the same mechanism that data handlers use, providing a shell script, bes-sample-data.sh, to add information to the configuration file.
</p>
<h1><span class="mw-headline" id="CSV_Data_Handler_Module"><span class="mw-headline-number">2</span> CSV Data Handler Module</span></h1>
<p>The CSV Data Handler Module handles requests for data in the CSV format (comma separated). Here is an example file:
</p>
<pre>
&quot;Station&lt;String&gt;&quot;,&quot;latitude&lt;Float32&gt;&quot;,&quot;longitude&lt;Float32&gt;&quot;,&quot;temperature_K&lt;Float32&gt;&quot;,&quot;Notes&lt;String&gt;&quot;
&quot;CMWM&quot;,-34.7,23.7,264.3,
&quot;BWWJ&quot;,-34.2,21.5,262.1,&quot;Foo&quot;
&quot;CWQK&quot;,-32.7,22.3,268.4,
&quot;CRLM&quot;,-33.8,22.1,270.2,&quot;Blah&quot;
&quot;FOOB&quot;,-32.9,23.4,269.69,&quot;FOOBAR&quot;
</pre>
<p>The types of data allowed are:
</p>
<ul>
<li> String
</li>
<li> Byte
</li>
<li> Int16
</li>
<li> Int32
</li>
<li> Float32
</li>
<li> Float64
</li>
</ul>
<p>The CSV Data Handler Module class CSVModule adds a request handler (CSVRequestHandler) to handle populating DAP2 response objects (DAS, DDS, DataDDS) as well as the standard response for help and version. The Module also tells the BES that it can handle THREDDS catalog requests.
</p>



</div>
				<!-- end content -->
				<div class="visualClear"></div>
	</div>
</div></div>
</body></html>