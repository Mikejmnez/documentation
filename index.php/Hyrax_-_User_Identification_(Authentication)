
<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>Hyrax - User Identification (Authentication) - OPeNDAP Documentation</title>
</head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Hyrax_-_User_Identification_Authentication skin-monobook action-view">
<div id="globalWrapper">
<div id="column-content"><div id="content" class="mw-body-primary" role="main">
	
	
	<h1 id="firstHeading" class="firstHeading" lang="en"><span dir="auto">Hyrax - User Identification (Authentication)</span></h1>
	<div id="bodyContent" class="mw-body">
		<div id="siteSub">From OPeNDAP Documentation</div>
		<div id="contentSub"></div>
		

		<!-- start content -->
<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><p><br />
</p>
<div id="toc" class="toc"><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Overview"><span class="tocnumber">1</span> <span class="toctext">Overview</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Terms"><span class="tocnumber">2</span> <span class="toctext">Terms</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="#Apache_httpd_Authentication_Services_Configuration"><span class="tocnumber">3</span> <span class="toctext">Apache <i>httpd</i> Authentication Services Configuration</span></a>
<ul>
<li class="toclevel-2 tocsection-4"><a href="#First:_Configure_Apache_httpd_and_Tomcat_to_work_together"><span class="tocnumber">3.1</span> <span class="toctext">First: Configure Apache httpd and Tomcat to work together</span></a>
<ul>
<li class="toclevel-3 tocsection-5"><a href="#Configure_Apache"><span class="tocnumber">3.1.1</span> <span class="toctext">Configure Apache</span></a></li>
<li class="toclevel-3 tocsection-6"><a href="#Taking_advantage_of_Apache_Logging"><span class="tocnumber">3.1.2</span> <span class="toctext">Taking advantage of Apache Logging</span></a></li>
<li class="toclevel-3 tocsection-7"><a href="#Add_SSL_Capabilities_to_Apache"><span class="tocnumber">3.1.3</span> <span class="toctext">Add SSL Capabilities to Apache</span></a></li>
<li class="toclevel-3 tocsection-8"><a href="#Configure_Tomcat_.28Hyrax.29"><span class="tocnumber">3.1.4</span> <span class="toctext">Configure Tomcat (Hyrax)</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-9"><a href="#Second:_Configure_Apache_httpd_to_authenticate"><span class="tocnumber">3.2</span> <span class="toctext">Second: Configure Apache httpd to authenticate</span></a>
<ul>
<li class="toclevel-3 tocsection-10"><a href="#LDAP_.28mod_ldap.2C_mod_authnz_ldap.29"><span class="tocnumber">3.2.1</span> <span class="toctext">LDAP (mod_ldap, mod_authnz_ldap)</span></a>
<ul>
<li class="toclevel-4 tocsection-11"><a href="#LDAP_Authorization_Constraints"><span class="tocnumber">3.2.1.1</span> <span class="toctext">LDAP Authorization Constraints</span></a></li>
</ul>
</li>
<li class="toclevel-3 tocsection-12"><a href="#Shibboleth_.28mod_shib.29"><span class="tocnumber">3.2.2</span> <span class="toctext">Shibboleth (mod_shib)</span></a>
<ul>
<li class="toclevel-4 tocsection-13"><a href="#Installation"><span class="tocnumber">3.2.2.1</span> <span class="toctext">Installation</span></a></li>
<li class="toclevel-4 tocsection-14"><a href="#Configuration"><span class="tocnumber">3.2.2.2</span> <span class="toctext">Configuration</span></a></li>
</ul>
</li>
<li class="toclevel-3 tocsection-15"><a href="#URS_OAuth2_.28mod_auth_urs.29"><span class="tocnumber">3.2.3</span> <span class="toctext">URS OAuth2 (mod_auth_urs)</span></a>
<ul>
<li class="toclevel-4 tocsection-16"><a href="#Prerequisites_.26_Requirements"><span class="tocnumber">3.2.3.1</span> <span class="toctext">Prerequisites &amp; Requirements</span></a></li>
<li class="toclevel-4 tocsection-17"><a href="#Building_mod_auth_urs"><span class="tocnumber">3.2.3.2</span> <span class="toctext">Building mod_auth_urs</span></a></li>
<li class="toclevel-4 tocsection-18"><a href="#Obtain_URS_Application_Credentials"><span class="tocnumber">3.2.3.3</span> <span class="toctext">Obtain URS Application Credentials</span></a></li>
<li class="toclevel-4 tocsection-19"><a href="#Approve_your_URS_Application"><span class="tocnumber">3.2.3.4</span> <span class="toctext">Approve your URS Application</span></a></li>
<li class="toclevel-4 tocsection-20"><a href="#Compute_the_Authorization_Code"><span class="tocnumber">3.2.3.5</span> <span class="toctext">Compute the Authorization Code</span></a></li>
<li class="toclevel-4 tocsection-21"><a href="#Configuration_2"><span class="tocnumber">3.2.3.6</span> <span class="toctext">Configuration</span></a></li>
</ul>
</li>
<li class="toclevel-3 tocsection-22"><a href="#Logging_URS_information"><span class="tocnumber">3.2.4</span> <span class="toctext">Logging URS information</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-23"><a href="#Common_Problems"><span class="tocnumber">3.3</span> <span class="toctext">Common Problems</span></a>
<ul>
<li class="toclevel-3 tocsection-24"><a href="#Clients_keep_getting_Internal_Server_Error"><span class="tocnumber">3.3.1</span> <span class="toctext">Clients keep getting <b>Internal Server Error</b></span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-25"><a href="#Tomcat_Authentication_Services_Configuration"><span class="tocnumber">4</span> <span class="toctext">Tomcat Authentication Services Configuration</span></a>
<ul>
<li class="toclevel-2 tocsection-26"><a href="#LDAP"><span class="tocnumber">4.1</span> <span class="toctext">LDAP</span></a></li>
<li class="toclevel-2 tocsection-27"><a href="#Shibboleth"><span class="tocnumber">4.2</span> <span class="toctext">Shibboleth</span></a></li>
<li class="toclevel-2 tocsection-28"><a href="#URS_OAuth2"><span class="tocnumber">4.3</span> <span class="toctext">URS OAuth2</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span class="mw-headline" id="Overview"><span class="mw-headline-number">1</span> Overview</span></h2>
<p>This document is intended to help those that have been asked to deploy Hyrax into an environment where authentication of users is required. In many such cases Hyrax will be integrated into an existing instance of the Apache Web server (<i>httpd</i>) where authentication services are already configured and in use. In other cases people will be setting up a standalone instance of Tomcat and will be needing to configure it to use one of the supported authentication services. This document means to address both situations.
</p>
<h2><span class="mw-headline" id="Terms"><span class="mw-headline-number">2</span> Terms</span></h2>
<dl>
<dt> <a rel="nofollow" class="external text" href="http://en.wikipedia.org/wiki/Authentication">Authentication</a>
</dt>
<dd> This is the process of confirming the identity of the user. The end result is a User ID (<i>uid</i> or <i>UID</i>) which may be accessed by the software components via (both?) the Apache API (mod_*) and the Java ServletAPI (Tomcat servlets) used to trigger authorization policy chains or may be logged along with relevant request information. 
</dd>
</dl>
<dl>
<dt> <a rel="nofollow" class="external text" href="http://en.wikipedia.org/wiki/Identity_provider">Identity Provider (IdP)</a>
</dt>
<dd> Also known as an <b>Identity Assertion Provider</b>, an <b>Identity Provider (IdP)</b> is a service that provides authentication and identity information services. An <b>IdP</b> is a kind of provider that creates, maintains, and manages identity information for principals and provides principal authentication to other service providers within a federation, such as with web browser profiles.
</dd>
</dl>
<dl>
<dt> Service Provider (SP)
</dt>
<dd> A <b>Service Provider (SP)</b> is a Web Service that utilizes an IdP service to determine the identity of it's users. Or more broadly, a role donned by a system entity where the system entity provides services to principals or other system entities. 
</dd>
</dl>
<p>With respect to this document Hyrax/Tomcat, and Hyrax/Tomcat/Apache each become part of an <b>SP</b> through the installation and configuration of software components such as mod_shib (shibboleth) .
</p><p>See <a rel="nofollow" class="external text" href="http://www.thedotnetfactory.com/learningcenter/technologies/service-identity-providers">Service Providers, Identity Providers &amp; Security Token Services explained</a> for more.
</p>
<h2><span class="mw-headline" id="Apache_httpd_Authentication_Services_Configuration"><span class="mw-headline-number">3</span> Apache <i>httpd</i> Authentication Services Configuration</span></h2>
<p>There are many authentication methods available for use with our friend <i>httpd</i> and each of the three illustrated here has a unique installation and configuration activity. There are some common changes that must be made to the Tomcat configuration regardless of the authentication method employed by Apache. We'll cover those first and then examine LDAP, Shibboleth, and NASA URS IdP configurations for Apache <i>httpd</i>.
</p>
<dl>
<dt> NB
</dt>
<dd> If you are deploying Hyrax with an existing Apache service then it is likely that all you have to do is configure <i>httpd</i> and Tomcat to work together and define and then define a security constraint for <i>httpd</i> that enforces a login requirement (valid-user) for Hyrax.
</dd>
</dl>
<h3><span class="mw-headline" id="First:_Configure_Apache_httpd_and_Tomcat_to_work_together"><span class="mw-headline-number">3.1</span> First: Configure Apache httpd and Tomcat to work together</span></h3>
<p>In this part we configure Tomcat and Apache <i>httpd</i> to work together so that <i>httpd</i> can provide proxy and authentication services for Hyrax.
</p>
<h4><span class="mw-headline" id="Configure_Apache"><span class="mw-headline-number">3.1.1</span> Configure Apache</span></h4>
<p>In <code>/etc/httpd/conf.d</code> create a file called <b>hyrax.conf</b> . Edit the file and add following:
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="apache source-apache"><pre class="de1">&lt;<span class="kw3">Proxy</span> *&gt;
    <span class="kw1">AddDefaultCharset</span> <span class="kw2">Off</span>
    <span class="kw1">Order</span> <span class="kw1">deny</span>,<span class="kw1">allow</span>
    <span class="kw1">Allow</span> from <span class="kw2">all</span>
&lt;/<span class="kw3">Proxy</span>&gt;
&#160;
<span class="kw1">ProxyPass</span> /opendap ajp://localhost:<span class="nu0">8009</span>/opendap
<span class="kw1">ProxyPassReverse</span> /opendap ajp://localhost:<span class="nu0">8009</span>/opendap</pre></div></div>
<dl>
<dt> Note</dt>
<dd> The ProxyPass and ProxyPassReverse should be set to local host unless a more complex deployment issuing attempted.
</dd>
</dl>
<p>This will expose the web application "opendap" (aka Hyrax) through Apache. Make sure that the AJP URLs both point to your deployment of Hyrax.
</p>
<h4><span class="mw-headline" id="Taking_advantage_of_Apache_Logging"><span class="mw-headline-number">3.1.2</span> Taking advantage of Apache Logging</span></h4>
<p>Often when authentication is needed, it is also necessary to log <i>who</i> has logged in and <i>what</i> they have accessed. Apache has a very flexible logging system; that can tell you what users asked for, where they came from, and when they made the request - among other things. For specific authentication technologies it may also be possible to log specific information about UIDs, etc. See the sections below for information on configuring Apache's log to record that kind of technology-specific data.
</p>
<h4><span class="mw-headline" id="Add_SSL_Capabilities_to_Apache"><span class="mw-headline-number">3.1.3</span> Add SSL Capabilities to Apache</span></h4>
<p>This step is not absolutely necessary, but it's quite likely you will want to do this, particularly if you're going to use <i>https</i> to access the tomcat servlet engine running the Hyrax front-end. If you use https in the AJP configuration as shown in the next section, you will need to set up Apache to support https even if users don't access the server with that protocol (because internally, some of the server's less performance intensive functions work by making calls to itself, and those will use https if you've set up tomcat to use https with AJP). However, the configuration is very simple.
</p><p>First, make sure you have mod_ssl installed. For CentOS 6, use <i>sudo yum install mod_ssl</i>
</p><p>Next make the needed certs. Here's how to make and install a self-signed cert for CentOS 6:
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="bash source-bash"><pre class="de1"><span class="co0"># Generate private key </span>
openssl genrsa <span class="re5">-out</span> ca.key <span class="nu0">2048</span> 
&#160;
<span class="co0"># Generate CSR </span>
openssl req <span class="re5">-new</span> <span class="re5">-key</span> ca.key <span class="re5">-out</span> ca.csr
&#160;
<span class="co0"># Generate Self Signed Key</span>
openssl x509 <span class="re5">-req</span> <span class="re5">-days</span> <span class="nu0">365</span> <span class="re5">-in</span> ca.csr <span class="re5">-signkey</span> ca.key <span class="re5">-out</span> ca.crt
&#160;
<span class="co0"># Copy the files to the correct locations</span>
<span class="kw2">cp</span> ca.crt <span class="sy0">/</span>etc<span class="sy0">/</span>pki<span class="sy0">/</span>tls<span class="sy0">/</span>certs
<span class="kw2">cp</span> ca.key <span class="sy0">/</span>etc<span class="sy0">/</span>pki<span class="sy0">/</span>tls<span class="sy0">/</span>private<span class="sy0">/</span>ca.key
<span class="kw2">cp</span> ca.csr <span class="sy0">/</span>etc<span class="sy0">/</span>pki<span class="sy0">/</span>tls<span class="sy0">/</span>private<span class="sy0">/</span>ca.csr</pre></div></div>
<p>Configure httpd to use the newly installed certs and restart:
</p>
<ul>
<li> The configuration file is in: /etc/httpd/conf.d/ssl.conf
</li>
<li> Edit SSLCertificateFile /etc/pki/tls/certs/ca.crt
</li>
<li> ... and SSLCertificateKeyFile /etc/pki/tls/private/ca.key
</li>
<li> and then restart: <i>sudo /usr/sbin/apachectl restart</i>
</li>
</ul>
<p>NB: More complete instructions can be found here: <a rel="nofollow" class="external free" href="http://wiki.centos.org/HowTos/Https">http://wiki.centos.org/HowTos/Https</a>
</p>
<h4><span class="mw-headline" id="Configure_Tomcat_.28Hyrax.29"><span class="mw-headline-number">3.1.4</span> Configure Tomcat (Hyrax)</span></h4>
<p>The primary result of the Apache authentication (the <i>uid</i> string) must be correctly transmitted to Tomcat. On the Tomcat side we have to open the way for this by configuring a <code>AJP Connector</code> object. This is done by editing the file:
</p>
<dl>
<dd> $CATALINA_HOME/conf/server.xml
</dd>
</dl>
<p>Edit the server.xml file, and find the AJP Connector element on port 8009. It should look something like this:
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="xml source-xml"><pre class="de1"><span class="sc3"><span class="re1">&lt;Connector</span> <span class="re0">port</span>=<span class="st0">&quot;8009&quot;</span> <span class="re0">protocol</span>=<span class="st0">&quot;AJP/1.3&quot;</span> <span class="re2">/&gt;</span></span></pre></div></div>
<p>This line may be "commented out," with &lt;!-- on a line before and --&gt; on a line after. If so, remove those lines. If you cannot find the AJP connector element, simply create it from the code above.
</p>
<ul>
<li> In order to receive authentication information from Apache, you must disable Tomcat's native authentication.  Set the tomcatAuthentication attribute to "false" - see below for an example.
</li>
<li> If your Apache web server is using SSL/HTTPS (<b>and it should be</b>), you need to tell Tomcat about that fact so that it can construct internal URLs correctly. Set the scheme attribute to "https" and the proxyPort attribute to "443" - see below for an example.
</li>
<li> For increased security, disable access to the connector from anywhere but the local system. Set the address attribute to "127.0.0.1" - see below for an example.
</li>
</ul>
<p>When you are finished making changes, your connector should look something like this:
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="xml source-xml"><pre class="de1">    <span class="sc3"><span class="re1">&lt;Connector</span> </span>
<span class="sc3">        <span class="re0">port</span>=<span class="st0">&quot;8009&quot;</span> </span>
<span class="sc3">        <span class="re0">protocol</span>=<span class="st0">&quot;AJP/1.3&quot;</span> </span>
<span class="sc3">        <span class="re0">redirectPort</span>=<span class="st0">&quot;443&quot;</span> </span>
<span class="sc3">        <span class="re0">scheme</span>=<span class="st0">&quot;https&quot;</span></span>
<span class="sc3">        <span class="re0">address</span>=<span class="st0">&quot;127.0.0.1&quot;</span> </span>
<span class="sc3">        <span class="re0">enableLookups</span>=<span class="st0">&quot;false&quot;</span>  </span>
<span class="sc3">        <span class="re0">tomcatAuthentication</span>=<span class="st0">&quot;false&quot;</span> </span>
<span class="sc3">        <span class="re2">/&gt;</span></span></pre></div></div>
<dl>
<dd><dl>
<dt> port
</dt>
<dd> The Connector will listen on port 8009.
</dd>
</dl>
</dd>
</dl>
<dl>
<dd><dl>
<dt> protocol
</dt>
<dd> The protocol is <i>AJP/1.3</i>.
</dd>
</dl>
</dd>
</dl>
<dl>
<dd><dl>
<dt> redirectPort
</dt>
<dd> Secure redirects to port <i>443</i> which is the nominal Apache HTTPS port, rather than the default 8443 which is nominally directed to Tomcat.
</dd>
</dl>
</dd>
</dl>
<dl>
<dd><dl>
<dt>scheme
</dt>
<dd> Ensures that the scheme is <i>HTTPS</i>. This is a best practice and is simple enough if the server is already configured for HTTPS. If your server is not configured to utilize HTTPS, then you'll either need to set the value of  <i>scheme</i> to "http" or you can undertake to <a rel="nofollow" class="external text" href="http://httpd.apache.org/docs/2.2/ssl/">configure your instance of Apache <i>httpd</i> to support for TLS/SSL transport</a>.
</dd>
</dl>
</dd>
</dl>
<dl>
<dd><dl>
<dt> address
</dt>
<dd> The loopback address (127.0.0.1) ensures that only local requests for the connection will be serviced.
</dd>
</dl>
</dd>
</dl>
<dl>
<dd><dl>
<dt> enableLookups
</dt>
<dd> A value of <b>true</b> enables DNS look ups for Tomcat. This means that web applications (like Hyrax) will see the client system as a host name and not an IP address. Set this to <b>false</b> to improve performance. 
</dd>
</dl>
</dd>
</dl>
<dl>
<dd><dl>
<dt> tomcatAuthentication
</dt>
<dd> A value of <b>false</b> will allow the Tomcat engine to receive authentication information (the <i>uid</i> and in some cases other attributes) from Apache <i>httpd</i>. A value of <b>true</b> will cause Tomcat to ignore Apache authentication results in favor of it's own.
</dd>
</dl>
</dd>
</dl>
<p>Restart Tomcat to load the new configuration. Now the Tomcat web applications like Hyrax should see all of the Apache authentication attributes. (These can be retrieved programmatically in the Java sServlet API by using HttpServletRequest.getRemoteUser() or  HttpServletRequest.getAttribute("ATTRIBUTE NAME"). Note that  HttpServletRequest.getAttributeNames() may not list all available attributes – you must request each attribute individually by name.)
</p>
<h3><span class="mw-headline" id="Second:_Configure_Apache_httpd_to_authenticate"><span class="mw-headline-number">3.2</span> Second: Configure Apache httpd to authenticate</span></h3>
<p>Once Tomcat and Apache httpd are working together all that remains is to configure a security restraint on the Hyrax web application and specify the authentication mechanism which is to used to identify the user. 
</p><p>While the details of the Apache security constraints differ somewhat from one <b>IdP</b> to the next what is consistent is that you will need to define a security constraint on Hyrax inside the chain of <b>httpd.conf</b>  files. The most simple example, that you want all users of the Hyrax instance to be authenticated, might look something like this:
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="apache source-apache"><pre class="de1"><span class="co1"># This is a simplified generic configuration example; see the sections below for the real</span>
<span class="co1"># examples for LDAP, Shibboleth or URS/OAuth2</span>
&lt;<span class="kw3">Location</span> /opendap&gt;
  <span class="kw1">AuthType</span> YourFavoriteAuthTypeHere
  <span class="kw1">require</span> valid-<span class="kw1">user</span>
&lt;/<span class="kw3">Location</span>&gt;</pre></div></div>
<p>Where the <code>require valid-user</code> attribute requires that all accessors be authenticated and where <i>YourFavoriteAuthTypeHere</i> would be something like <i>Basic</i>, <i>UrsOAuth2</i> or <i>shibboleth</i>. 
</p><p>Complete examples for LDAP, URS/OAuth2, and Shibboleth IdPs are presented in the following sections.
</p>
<h4><span class="mw-headline" id="LDAP_.28mod_ldap.2C_mod_authnz_ldap.29"><span class="mw-headline-number">3.2.1</span> LDAP (<a rel="nofollow" class="external text" href="http://httpd.apache.org/docs/2.2/mod/mod_ldap.html">mod_ldap</a>, <a rel="nofollow" class="external text" href="http://httpd.apache.org/docs/2.2/mod/mod_authnz_ldap.html">mod_authnz_ldap</a>)</span></h4>
<p><b>NB:</b> You must  <b><a href="#First:_Configure_Apache_httpd_and_Tomcat_to_work_together"> configure Apache and Tomcat (Hyrax) to work together</a></b> prior to completion of this section.
</p><p>In order to get Apache httpd to use  LDAP authentication you will have configure an Apache security constraint on the Hyrax web application.  For this example we will configure Apache to utilize the <a rel="nofollow" class="external text" href="http://www.forumsys.com/tutorials/integration-how-to/ldap/online-ldap-test-server/">Forum Systems public LDAP server</a>
</p>
<ul>
<li> All user passwords are <i>password</i>.
</li>
<li> Groups and Users:
<ul>
<li> <b>mathematicians</b>
<ul>
<li> riemann
</li>
<li> gauss
</li>
<li> euler
</li>
<li> euclid
</li>
</ul>
</li>
<li> <b>scientists</b>
<ul>
<li> einstein
</li>
<li> newton
</li>
<li> galieleo
</li>
<li> tesla
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Create and edit the file  <code>/etc/httpd/conf.d/ldap.conf</code>.
</p><p>Add the following at the end of the file:
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="apache source-apache"><pre class="de1"><span class="co1"># You may need to uncomment these two lines...</span>
<span class="co1"># LoadModule ldap_module modules/mod_ldap.so</span>
<span class="co1"># LoadModule authnz_ldap_module modules/mod_authnz_ldap.so</span>
&#160;
<span class="co1"># You may want to comment out this line once you have it working.</span>
<span class="kw1">LogLevel</span> debug
&#160;
&lt;<span class="kw3">Location</span> /opendap &gt;
   <span class="kw1">Order</span> <span class="kw1">deny</span>,<span class="kw1">allow</span>
   <span class="kw1">Deny</span> from <span class="kw2">all</span>
   <span class="kw1">AuthType</span> Basic
   <span class="kw1">AuthName</span> <span class="st0">&quot;Forum Systems Public LDAP Server-  Login with user id&quot;</span>
   <span class="kw1">AuthBasicProvider</span> ldap
   <span class="kw1">AuthzLDAPAuthoritative</span> <span class="kw2">off</span>
   <span class="kw1">AuthLDAPURL</span> ldap://ldap.forumsys.com:<span class="nu0">389</span>/dc=example,dc=com
   <span class="kw1">AuthLDAPBindDN</span> <span class="st0">&quot;cn=read-only-admin,dc=example,dc=com&quot;</span>
   <span class="kw1">AuthLDAPBindPassword</span> password
   <span class="kw1">AuthLDAPGroupAttributeIsDN</span> <span class="kw2">off</span>
   <span class="kw1">ErrorDocument</span> <span class="nu0">401</span> <span class="st0">&quot;Please use your username and password to login into this Hyrax server&quot;</span>
   <span class="kw1">Require</span> valid-<span class="kw1">user</span>
   <span class="kw1">Satisfy</span> any
&lt;/<span class="kw3">Location</span>&gt;</pre></div></div>
<p>Restart Apache httpd and you should now need to authenticate to access anything in /opendap
</p><p>What's happening here? Let's look at each of the components of the <b><tt>&lt;Location&gt;</tt></b> directive:
</p>
<dl>
<dt> <tt>&lt;Location  /opendap&gt;</tt>
</dt>
<dd>  The <a rel="nofollow" class="external text" href="http://httpd.apache.org/docs/2.2/mod/core.html#location">Location</a> directive limits the scope of the enclosed directives by URL or URL-path. In our example it says that anything on the server that begins with the URL path of /opendap will be the scope of the directives contained within. Generally The <tt>Location</tt> directive is applied to things outside of the filesystem used by Apache, such as a Tomcat service (Hyrax).
</dd>
<dt> <tt>Order deny,allow</tt>
</dt>
<dd> The <a rel="nofollow" class="external text" href="http://httpd.apache.org/docs/2.2/mod/mod_authz_host.html#order">Order</a> directive, along with the Allow and Deny directives, controls a three-pass access control system. The first pass processes either all Allow or all Deny directives, as specified by the Order directive. The second pass parses the rest of the directives (Deny or Allow). The third pass applies to all requests which do not match either of the first two. In this example first, all Deny directives are evaluated; if any match, the request is denied unless it also matches an Allow directive. Any requests which do not match any Allow or Deny directives are permitted.
</dd>
<dt> <tt>Deny from all</tt>
</dt>
<dd> The <a rel="nofollow" class="external text" href="http://httpd.apache.org/docs/2.2/mod/mod_authz_host.html#deny">Deny</a> directive allows access to the server to be restricted based on hostname, IP address, or environment variables. The arguments for the Deny directive are identical to the arguments for the Allow directive. 
</dd>
<dt> <tt>AuthType Basic</tt>
</dt>
<dd> The <a rel="nofollow" class="external text" href="http://httpd.apache.org/docs/2.2/mod/core.html#authtype">AuthType</a> directive selects the type of user authentication for a directory. The authentication types available are Basic (implemented by <a rel="nofollow" class="external text" href="http://httpd.apache.org/docs/2.2/mod/mod_auth_basic.html">mod_auth_basic</a>) and Digest (implemented by <a rel="nofollow" class="external text" href="http://httpd.apache.org/docs/2.2/mod/mod_auth_digest.html">mod_auth_digest</a>).
</dd>
<dt> <tt>AuthName "Forum Systems Public LDAP Server-  Login with user id"</tt>
</dt>
<dd> The <a rel="nofollow" class="external text" href="http://httpd.apache.org/docs/2.2/mod/core.html#authname">AuthName</a> directive sets the name of the authorization realm for a directory. This realm is given to the client so that the user knows which username and password to send.
</dd>
<dt> <tt>AuthBasicProvider ldap</tt>
</dt>
<dd> The <a rel="nofollow" class="external text" href="http://httpd.apache.org/docs/2.2/mod/mod_auth_basic.html#authbasicprovider">AuthBasicProvider</a> directive sets which provider is used to authenticate the users for this location. In this example we are saying that an LDAP service will be configured to provide the authentication service.
</dd>
<dt> <tt>AuthzLDAPAuthoritative off</tt>
</dt>
<dd> The <a rel="nofollow" class="external text" href="http://httpd.apache.org/docs/2.2/mod/mod_authnz_ldap.html#authzldapauthoritative">AuthzLDAPAuthoritative</a> directive is used to prevent other authentication modules from authenticating the user if this one fails. Set to <tt>off</tt> (as in this example) if this module should let other authorization modules attempt to authorize the user, should authorization with this module fail. Control is only passed on to lower modules if there is no DN or rule that matches the supplied user name (as passed by the client). 
</dd>
<dt> <tt>AuthLDAPURL ldap://ldap.forumsys.com:389/dc=example,dc=com</tt>
</dt>
<dd> The <a rel="nofollow" class="external text" href="http://httpd.apache.org/docs/2.2/mod/mod_authnz_ldap.html#authldapurl">AuthLDAPURL</a> directive is used to define the URL specifying the LDAP search parameters. In this example the service is hosted at <i><tt>ldap.forumsys.com</tt></i>, on port <i><tt>389</tt></i>. The search will be for anyone associated with the domain components <i><tt>example</tt></i> and <i><tt>com</tt></i> (aka <i><tt>example.com</tt></i>).
</dd>
<dt> <tt>AuthLDAPBindDN "cn=read-only-admin,dc=example,dc=com"</tt>
</dt>
<dd> The <a rel="nofollow" class="external text" href="http://httpd.apache.org/docs/2.2/mod/mod_authnz_ldap.html#authldapbinddn">AuthLDAPBindDN</a> directive is an optional directive used to specify a <i><tt>distinguished name</tt></i> (DN) when binding to the server. If not present <b><tt>mod_authnz_ldap</tt></b> will use an anonymous bind. Many servers will not allow an anonymous binding and will require that the Apache service bind with a particular DN. In this example the server is instructed to bind with the <i>common name</i> (CN) <i><tt>read-only-admin</tt></i> at <i><tt>example.com</tt></i>
</dd>
<dt> <tt>AuthLDAPBindPassword password</tt>
</dt>
<dd> The <a rel="nofollow" class="external text" href="http://httpd.apache.org/docs/2.2/mod/mod_authnz_ldap.html#authldapbindpassword">AuthLDAPBindPassword</a> directove specifies the password to be used in conjunction with the <b><tt>AuthLDAPBindDN</tt></b>. In this example the password is the word <i><tt>password</tt></i>.
</dd>
<dt> <tt>AuthLDAPGroupAttributeIsDN off</tt>
</dt>
<dd> The <a rel="nofollow" class="external text" href="http://httpd.apache.org/docs/2.2/mod/mod_authnz_ldap.html#authldapgroupattributeisdn">AuthLDAPGroupAttributeIsDN</a> directive is a boolean valued directive that tells <i><tt>mod_authnz_ldap</tt></i> wether or not to use the DN of the client username when checking for group membership. In our example the value is set to <b><tt>off</tt></b> so the clients <i>username</i> will be used to locate the clients group membership.
</dd>
<dt> <tt>ErrorDocument 401 "Please use your username and password to login into this Hyrax server"</tt>
</dt>
<dd> The <a rel="nofollow" class="external text" href="http://httpd.apache.org/docs/2.2/mod/core.html#errordocument">ErrorDocument</a> directive specifies what message the server will return to the client in the event of an error. In this example we define a message to be returned for all 401 (Unauthorized) errors to help the client understand that they need to be authenticated to proceed.
</dd>
<dt> <tt>Require valid-user</tt>
</dt>
<dd> The <a rel="nofollow" class="external text" href="http://httpd.apache.org/docs/2.2/mod/core.html#require">Require</a> directive selects which authenticated users can access a resource. Multiple instances of this directive are combined with a logical "OR", such that a user matching any Require line is granted access. In this case it's effect is to say that any valid user that has authenticated (via the LDAP server ldap://ldap.forumsys.com:389 with the distinguished name components dc=example,dc=com) will be allowed access.
</dd>
<dt> <tt>Satisfy any</tt>
</dt>
<dd> The <a rel="nofollow" class="external text" href="http://httpd.apache.org/docs/2.2/mod/core.html#satisfy">Satisfy</a> directive defines the interaction between host-level access control and user authentication. It may have a value of either <b><tt>Any</tt></b> or  <b><tt>All</tt></b>. The any value indicates that the client will be admitted if they successfully authenticate using a username/password OR if they are coming from a host address that appears in an <b><tt>Allow from</tt></b> directive.
</dd>
</dl>
<p><br />
</p>
<h5><span class="mw-headline" id="LDAP_Authorization_Constraints"><span class="mw-headline-number">3.2.1.1</span> LDAP Authorization Constraints</span></h5>
<p>The Apache module <a rel="nofollow" class="external text" href="http://httpd.apache.org/docs/2.2/mod/mod_authnz_ldap.html">mod_authnz_ldap</a> provides a fairly rich set of "<tt>Require</tt>" directives which can be used to control (authorize) access to resources serviced by Apache. In the example above the <b><tt>Require</tt></b> directive  is quite simple:
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="apache source-apache"><pre class="de1">   <span class="kw1">Require</span> valid-<span class="kw1">user</span></pre></div></div>
<p>Which says (since the defined authentication mechanism for the enclosing <b><tt>Location</tt></b> directive is LDAP) that any LDAP authenticated user may be allowed access to anything that begins with the URL-path <b><tt>/opendap</tt></b>. While that may be adequate for some sites, many others will be required to have more complex access control policies in place. The LDAP module <b><tt><a rel="nofollow" class="external text" href="http://httpd.apache.org/docs/2.2/mod/mod_authnz_ldap.html">mod_authnz_ldap</a></tt></b> provides a rich collection of <b><tt>Require</tt></b> directive assertions that allow the administrator much more finely grained access control. Rather than provide an exhaustive discussion of these options here we will provide a few basic examples and refer the reader to <a rel="nofollow" class="external text" href="http://httpd.apache.org/docs/2.2/mod/mod_authnz_ldap.html">the comprehensive documentation for the <i><tt>mod_authnz_ldap</tt></i> module at the Apache project</a>.
</p>
<dl>
<dt> Grant access to anyone in the <i><tt>mathematicians</tt></i> group in the organization <i><tt>example.com</tt></i>.
</dt>
</dl>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="apache source-apache"><pre class="de1">    <span class="kw1">AuthLDAPURL</span> ldap://ldap.forumsys.com:<span class="nu0">389</span>/dc=example,dc=com
    <span class="kw1">AuthLDAPGroupAttributeIsDN</span> <span class="kw2">on</span>
    <span class="kw1">Require</span> ldap-<span class="kw1">group</span> ou=mathematicians,dc=example,dc=com</pre></div></div>
<p><br />
</p>
<dl>
<dt> Grant access to anyone who has an LDAP attribute  <i><tt>homeDirectory</tt></i> whose value is <i><tt>home</tt></i>.
</dt>
</dl>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="apache source-apache"><pre class="de1">    <span class="kw1">AuthLDAPURL</span> ldap://ldap.forumsys.com:<span class="nu0">389</span>/dc=example,dc=com
    <span class="kw1">Require</span> ldap-attribute homeDirectory=home</pre></div></div>
<p><br />
</p>
<dl>
<dt> Combine the previous two examples to grant access to anyone who has an LDAP attribute  <i><tt>homeDirectory</tt></i> whose value is <i><tt>home</tt></i> and to anyone in the  <i><tt>mathematicians</tt></i> group.
</dt>
</dl>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="apache source-apache"><pre class="de1">    <span class="kw1">AuthLDAPURL</span> ldap://ldap.forumsys.com:<span class="nu0">389</span>/dc=example,dc=com
    <span class="kw1">AuthLDAPGroupAttributeIsDN</span> <span class="kw2">on</span>
    <span class="kw1">Require</span> ldap-<span class="kw1">group</span> ou=mathematicians,dc=example,dc=com
    <span class="kw1">Require</span> ldap-attribute homeDirectory=home</pre></div></div>
<p>The possibilities are vast, but it is certainly the case that the contents of the LDAP service against which you are authenticating, and the richness of the group and attribute entries will in a large part determine the granularity of access control you will be able to provide.
</p>
<h4><span class="mw-headline" id="Shibboleth_.28mod_shib.29"><span class="mw-headline-number">3.2.2</span> Shibboleth (mod_shib)</span></h4>
<p><b>NB:</b> You must  <b><a href="#First:_Configure_Apache_httpd_and_Tomcat_to_work_together"> configure Apache and Tomcat (Hyrax) to work together</a></b> prior to completion of this section.
</p><p>The Shibboleth wiki provides excellent documentation on how to get Shibboleth authentication services working with Tomcat. This is primarily an Apache <i>httpd</i> activity.
</p><p>Basically you need to <a rel="nofollow" class="external text" href="https://wiki.shibboleth.net/confluence/display/SHIB2/NativeSPJavaInstall">follow the instructions for a Native Java Install</a> and as you read, remember - Hyrax does not use either Spring or Grails.
</p>
<h5><span class="mw-headline" id="Installation"><span class="mw-headline-number">3.2.2.1</span> Installation</span></h5>
<p>The logical starting point for this is with the  <a rel="nofollow" class="external text" href="https://wiki.shibboleth.net/confluence/display/SHIB2/NativeSPJavaInstall">Native Java SP Installation</a>:
</p>
<ul>
<li> <a rel="nofollow" class="external free" href="https://wiki.shibboleth.net/confluence/display/SHIB2/NativeSPJavaInstall">https://wiki.shibboleth.net/confluence/display/SHIB2/NativeSPJavaInstall</a>
</li>
</ul>
<p>But as far as the organization of the work is concerned it is really the last page you need to process, as it will send you off to do a platform dependent Shibboleth Native Service Provider for Apache installation which needs to be completed, working, and configured before you'll return to the  <a rel="nofollow" class="external text" href="https://wiki.shibboleth.net/confluence/display/SHIB2/NativeSPJavaInstall">Native Java SP Installation</a> to enable the part where Tomcat and <i>mod_shib</i> pass authenticated user information into Tomcat.
</p><p>The document path on the <a rel="nofollow" class="external text" href="https://wiki.shibboleth.net/confluence/display/SHIB2/NativeSPJavaInstall">Natvie Java Install wiki page</a> will send you off to do Shibboleth Native Service Provider  installation which is platform dependent:
</p>
<ul>
<li> <a rel="nofollow" class="external free" href="https://wiki.shibboleth.net/confluence/display/SHIB2/Installation">https://wiki.shibboleth.net/confluence/display/SHIB2/Installation</a>
<ul>
<li> Install a <i>Native Service Provider</i> on your target system. 
</li>
<li>  In the initial testing section for Linux they suggest accessing the Status page <a rel="nofollow" class="external free" href="https://localhost/Shibboleth.sso/Status">https://localhost/Shibboleth.sso/Status</a>, but you may have to use the loopback address to be able to do so: <a rel="nofollow" class="external free" href="https://127.0.0.1/Shibboleth.sso/Status">https://127.0.0.1/Shibboleth.sso/Status</a>
</li>
</ul>
</li>
</ul>
<p>Return to the  <a rel="nofollow" class="external text" href="https://wiki.shibboleth.net/confluence/display/SHIB2/NativeSPJavaInstall">Native Java SP Installation</a> and complete the instructions there.
</p>
<h5><span class="mw-headline" id="Configuration"><span class="mw-headline-number">3.2.2.2</span> Configuration</span></h5>
<p>Once the SP installation is completed go to the Native SP Configuration page:
</p>
<ul>
<li> <a rel="nofollow" class="external free" href="https://wiki.shibboleth.net/confluence/display/SHIB2/NativeSPConfiguration">https://wiki.shibboleth.net/confluence/display/SHIB2/NativeSPConfiguration</a>
</li>
</ul>
<p>Read that page and then follow the link to the instructions for Apache:
</p>
<ul>
<li> <a rel="nofollow" class="external free" href="https://wiki.shibboleth.net/confluence/display/SHIB2/NativeSPApacheConfig">https://wiki.shibboleth.net/confluence/display/SHIB2/NativeSPApacheConfig</a>
</li>
</ul>
<p>Follow those instructions.
</p>
<ul>
<li> Do not be confused by the section <a rel="nofollow" class="external text" href="https://wiki.shibboleth.net/confluence/display/SHIB2/NativeSPApacheConfig#NativeSPApacheConfig-MakingURLsUsedbymod_shibGetProperlyRouted">Making URLs Used by mod_shib Get Properly Routed</a>. While you must add this <i>Location</i> directive to "reveal" the shibboleth module to the world don't think the URL <a rel="nofollow" class="external free" href="https://yourhost/Shibboleth.sso">https://yourhost/Shibboleth.sso</a> is a valid access point to the module. That URL may always return a Shibboleth error page even if <i>mod_shib</i> and <i>shibd</i> are configured and working correctly.
</li>
<li> Read and understand the section <a rel="nofollow" class="external text" href="https://wiki.shibboleth.net/confluence/display/SHIB2/NativeSPApacheConfig#NativeSPApacheConfig-EnablingtheModuleforAuthentication">Enabling the Module for Authentication</a> 
</li>
</ul>
<p>The Shibboleth instructions should have had you add something like this:
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="apache source-apache"><pre class="de1">&lt;<span class="kw3">Location</span> /opendap&gt;
  <span class="kw1">AuthType</span> shibboleth
  ShibRequestSetting requireSession <span class="nu0">1</span>
  <span class="kw1">require</span> valid-<span class="kw1">user</span>
&lt;/<span class="kw3">Location</span>&gt;</pre></div></div>
<p>to <i>httpd.conf</i>. This will require users to authenticate to access any part of Hyrax which may be exactly what you want. If you want more fine grained control you may want use multiple <code>Location</code> elements with different <code>require</code> attributes. For example:
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="apache source-apache"><pre class="de1">&lt;<span class="kw3">Location</span> /opendap&gt;
  <span class="kw1">AuthType</span> shibboleth
  ShibCompatWith24 <span class="kw2">On</span>
  <span class="kw1">require</span> shibboleth
&lt;/<span class="kw3">Location</span>&gt;
&lt;<span class="kw3">Location</span> /opendap/AVHRR&gt;
  <span class="kw1">AuthType</span> shibboleth
  ShibCompatWith24 <span class="kw2">On</span>
  ShibRequestSetting requireSession <span class="nu0">1</span>
  <span class="kw1">require</span> valid-<span class="kw1">user</span>
&lt;/<span class="kw3">Location</span>&gt;
&lt;/apache&gt;</pre></div></div>
<p>In this example the first <code>Location</code> establishes Shibboleth as the authentication tool for the entire <i>/opendap</i> application path, and enables the Shibboleth module over the entire Hyrax Server.  
</p>
<ul>
<li> Since there is no <code>ShibRequestSetting requireSession 1</code> line it does not require a user to be logged in order to access the path. 
</li>
<li> The <code>require shibboleth</code> command activates mod_shib for all of Hyrax.
</li>
</ul>
<p>The second <code>Location</code> states that only valid-users may have access "/opendap/AVHRR" URL path.
</p>
<ul>
<li> The <code>require valid-user</code> command  requires user authentication.
</li>
<li> The <code>AuthType</code> command is set to <code>shibboleth</code> so <i>mod_shib</i> will be called upon to perform the authentication.
</li>
</ul>
<p>For more examples and better understanding see the <a rel="nofollow" class="external text" href="https://wiki.shibboleth.net/confluence/display/SHIB2/NativeSPApacheConfig#NativeSPApacheConfig-AuthConfigOptions">Apache Configuration section of the Shibboleth wiki.</a>
</p>
<h4><span class="mw-headline" id="URS_OAuth2_.28mod_auth_urs.29"><span class="mw-headline-number">3.2.3</span> URS OAuth2 (mod_auth_urs)</span></h4>
<p>URS/OAuth2 is a Single Sign On (SSO) authentication flow that utilizes HTTP redirects to guide client applications requesting an authenticated resource to a central URS authentication point where they are authenticated, and them redirected back to their requested resource. This way user credentials, however they may be exchanged, are only ever exchanged with a single trusted service.
</p><p>The URS documentation, downloads, application registration, and application approval all require URS credentials to access. Obtaining URS credentials must be the very first activity for anyone wishing to retrieve, configure and deploy <i>mod_auth_urs</i>.
</p><p>Each new instance of <i>mod_auth_urs</i> deployed will need to have a set of unique application credentials. These are generated  by registering the new instance as an new application with the URS system. Because each registered application is linked to a single <i>redirectUrl,</i> each different running instance of <i>mod_auth_urs</i> will need to be registered in order to successfully have the server redirect clients back from their authentication activity.
</p><p><br />
</p>
<h5><span class="mw-headline" id="Prerequisites_.26_Requirements"><span class="mw-headline-number">3.2.3.1</span> Prerequisites &amp; Requirements</span></h5>
<ul>
<li> You must be a registered URS user in order to perform this configuration. (First. Do this first.)
</li>
<li> You need mod_auth_urs (which you will likely have to build from source; see below).
</li>
<li> You must register a web application and authorize it. See <a href="#Obtain_URS_Application_Credentials"> Obtain URS Application Credentials</a> below for more information on this. Note: You can register your application with either the <a rel="nofollow" class="external text" href="https://uat.urs.earthdata.nasa.gov/profile">Test URS System</a> or the  <a rel="nofollow" class="external text" href="https://urs.earthdata.nasa.gov/profile">Main URS System</a>.
</li>
<li> You must complete the section <b><a href="#First:_Configure_Apache_httpd_and_Tomcat_to_work_together"> Configure Apache and Tomcat (Hyrax) to work together</a></b>.
</li>
<li> You will need the public facing domain name or IP address of your server.
</li>
</ul>
<p><br />
</p>
<h5><span class="mw-headline" id="Building_mod_auth_urs"><span class="mw-headline-number">3.2.3.2</span> Building mod_auth_urs</span></h5>
<p>The <a rel="nofollow" class="external text" href="https://wiki.earthdata.nasa.gov/display/URSFOUR/Apache+URS+Authentication+Module">documentation for mod_auth_urs</a> describes how to build the module from a clone of the git repo, however we found that on CentOS 6 that process had to be modified to include linking with the ssl library. Since it is a fairly simple build, we'll duplicate it here with the caveat that a newer version of the module might have a different build recipe, so if this doesn't work, <a rel="nofollow" class="external text" href="https://wiki.earthdata.nasa.gov/display/URSFOUR/Apache+URS+Authentication+Module">check the official page</a>. 
</p><p>With that said, to build the module for CentOS 6:
</p>
<ul>
<li> Make sure you have the httpd-devel and ssl-devel packages are loaded onto your host
</li>
</ul>
<pre><i><code>sudo yum install httpd-devel openssl-devel</code></i>
</pre>
<ul>
<li> Clone the mod_auth_urs git repo from the ECC system. You need a URS login for this, but you need a URS login for several other steps with this configuration as well
</li>
</ul>
<pre><i><code>git clone https://&lt;username&gt;@git.earthdata.nasa.gov/scm/aam/apache-urs-authentication-module.git urs</code></i>
</pre>
<ul>
<li> Build it using the apache extension build tool apxs in the <i>urs</i> directory just made by the git clone command. Note that for CentOS 6 you need to include the <i>ssl</i> library and that you'll need to be root as it installs libraries into apache.
</li>
</ul>
<pre><i><code>apxs -i -c -n mod_auth_urs mod_auth_urs.c mod_auth_urs_cfg.c mod_auth_urs_session.c mod_auth_urs_ssl.c mod_auth_urs_http.c mod_auth_urs_json.c -lssl</code></i>
</pre>
<h5><span class="mw-headline" id="Obtain_URS_Application_Credentials"><span class="mw-headline-number">3.2.3.3</span> Obtain URS Application Credentials</span></h5>
<ul>
<li> With your browser, navigate to your URS profile page. 
</li>
<li> Click the <b>My Applications</b> tab.
</li>
</ul>
<p>On the <b>My Applications</b> page:
</p>
<ul>
<li> Click the <b>Create A New Application</b> button located under the <b>Application Administration</b> section of the <b>My Applications</b> page.
</li>
<li> Fill out the form and save the information you enter into the form for later.
<ul>
<li> Make special note of the Application Username (UID) and password that you submit and the <i>ClientID</i> generated by the URS system.
</li>
</ul>
</li>
</ul>
<dl>
<dd><dl>
<dd> This information is required in section <b>3.2.3.5 Compute the Authorization Code</b> – the auth code is the hex conversion of the application UID and password.
</dd>
</dl>
</dd>
</dl>
<ul>
<li> Once you have registered the application you'll be able to see it in your profile's <b>My Applications</b> tab. 
</li>
</ul>
<p>Its status will show pending a while:
</p>
<div class="thumb tleft"><div class="thumbinner" style="width:846px;"><a href="../index.php/File:URSApplicationPending.png" class="image"><img alt="" src="../images/b/b7/URSApplicationPending.png" width="844" height="394" class="thumbimage" /></a>  <div class="thumbcaption">Freshly registered application <b>tesy_tesy</b> awaits approval...</div></div></div>
<div style="clear: both"></div>
<p>Once your application registration request passes through the approval process in URS land its status will be changed to <b>Active</b> and your instance of <i>mod_auth_urs</i> will be permitted to interact with the URS system. You should get an email acknowledging your application registration and another one indicating that your application has been activated. (The last time I did this it took ~20 minutes to receive the activation notification. <a href="../index.php/User:Ndp" title="User:Ndp">ndp</a> (<a href="../index.php?title=User_talk:Ndp&amp;action=edit&amp;redlink=1" class="new" title="User talk:Ndp (page does not exist)">talk</a>))
</p>
<h5><span class="mw-headline" id="Approve_your_URS_Application"><span class="mw-headline-number">3.2.3.4</span> Approve your URS Application</span></h5>
<p>Once your application is marked <b>Active</b> you will need to <i>approve</i> it so that the URS system knows that you are OK with the application having access to your URS user profile information (not your password). 
</p><p><i><b>Every single URS  user that is going to access your new server will need to do this too.</b></i>
</p><p>On the <b>My Applications</b> page:
</p>
<ul>
<li> Click the <b>Approve More Applications</b> button.
</li>
</ul>
<p>This will display the application search page:
</p>
<div class="thumb tleft"><div class="thumbinner" style="width:491px;"><a href="../index.php/File:UrsApplicationSearch.png" class="image"><img alt="" src="../images/4/47/UrsApplicationSearch.png" width="489" height="460" class="thumbimage" /></a>  <div class="thumbcaption">URS Application Search Page</div></div></div>
<div style="clear: both"></div>
<ul>
<li> Enter some or all of the name you picked (which became the UID) of your new application and click the <b>Search For Applications</b> button, this will bring you to the URS Application Approval page:
</li>
</ul>
<div class="thumb tleft"><div class="thumbinner" style="width:653px;"><a href="../index.php/File:UrsApproveApplication.png" class="image"><img alt="" src="../images/8/84/UrsApproveApplication.png" width="651" height="308" class="thumbimage" /></a>  <div class="thumbcaption">URS Application Approval Page</div></div></div>
<div style="clear: both"></div>
<ul>
<li> Select your new application and click the <b>Approve Selected Applications</b> button.
</li>
</ul>
<p>You will be returned to the <b>My Applications</b> page where you should now see your new application on the list of <b>Approved Applications</b>.
</p>
<div class="thumb tleft"><div class="thumbinner" style="width:401px;"><a href="../index.php/File:UrsApprovedApplicationList.png" class="image"><img alt="" src="../images/e/e0/UrsApprovedApplicationList.png" width="399" height="225" class="thumbimage" /></a>  <div class="thumbcaption">URS Approved Applications</div></div></div>
<div style="clear: both"></div>
<h5><span class="mw-headline" id="Compute_the_Authorization_Code"><span class="mw-headline-number">3.2.3.5</span> Compute the Authorization Code</span></h5>
<p>The last thing to do before configuring <i>mod_auth_urs</i> is to compute the authorization code  for your freshly registered application. To do this you will need to hex encode the Application Username (UID) and password that you assigned to your application when you registered it. The are a number of ways to generate the Authorization Code.
</p><p>Use a simple perl script:
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="perl source-perl"><pre class="de1">perl <span class="sy0">-</span>e <span class="st_h">'use MIME::Base64; print encode_base64(&quot;&lt;uid&gt;:&lt;pw&gt;&quot;);'</span></pre></div></div>
<p>Or php script:
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="php source-php"><pre class="de1">php <span class="sy0">-</span>r <span class="st_h">'echo base64_encode(&quot;&lt;uid&gt;:&lt;pw&gt;&quot;);'</span></pre></div></div>
<p>Or shell script:
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="bash source-bash"><pre class="de1"><span class="kw3">echo</span> <span class="re5">-n</span> <span class="st0">&quot;&lt;uid&gt;:&lt;pw&gt;&quot;</span> <span class="sy0">|</span> base64</pre></div></div>
<p>Where <i>&lt;uid&gt;</i> is the Application Username (UID) and <i>&lt;pw&gt;</i> is the password associated with your freshly registered application.
The resulting string of base64 encoded stuff is your application's URS authorization code, aka UrsAuthCode in <i>mod_auth_urs</i>.
</p>
<h5><span class="mw-headline" id="Configuration_2"><span class="mw-headline-number">3.2.3.6</span> Configuration</span></h5>
<p>The instructions for configuring the Apache module <b>mod_auth_urs</b> can be found here:
</p><p><a rel="nofollow" class="external free" href="https://wiki.earthdata.nasa.gov/display/URSFOUR/Apache+URS+Authentication+Module">https://wiki.earthdata.nasa.gov/display/URSFOUR/Apache+URS+Authentication+Module</a>
</p><p>Notes:
</p>
<ul>
<li> The instructions are clear and complete but you have to be a registered URS user with permissions to access that page in order to read it. 
</li>
<li> Also note that the apxs tool used to build an apache module is part of the <i>httpd-devel</i> package and won't be available if you don't have that package installed.
</li>
</ul>
<p>Once I had it installed all that was needed was to create the file <i>/etc/httpd/conf.d/urs.conf</i> and add the configuration content to the file. The configuration file you'll find below is annotated and you will need to review and possibly edit the values of the following fields: 
</p>
<ul>
<li> UrsAuthServer
</li>
<li> AuthName
</li>
</ul>
<p>And you MUST edit and provide your application credential information in these fields:
</p>
<ul>
<li> UrsAuthGroup
</li>
<li> UrsClientId
</li>
<li> UrsAuthCode
</li>
<li> UrsRedirectUrl
</li>
</ul>
<p>And you should review and possibly edit this value to point to an appropriate page on your server for failed authentication:
</p>
<ul>
<li> UrsAccessErrorUrl
</li>
</ul>
<p><br />
Example <i>urs.conf</i> file for <i>httpd</i>:
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="apache source-apache"><pre class="de1"><span class="co1"># Load the URS module</span>
<span class="kw1">LoadModule</span> auth_urs_module    modules/mod_auth_urs.so
<span class="co1">#</span>
<span class="co1"># Enable Debugging</span>
<span class="co1"># LogLevel debug</span>
<span class="co1">#</span>
<span class="co1"># START - URS module configuration</span>
<span class="co1"># The directory where session data will be stored</span>
<span class="co1"># NB: This directory MUST be readable and writable</span>
<span class="co1"># by the Apache httpd user!!!</span>
<span class="co1">#</span>
UrsSessionStorePath /var/tmp/urs/session
<span class="co1">#</span>
<span class="co1"># The address of the authentication server</span>
<span class="co1"># Where you registered your application/server.</span>
<span class="co1">#</span>
UrsAuthServer        https://uat.urs.earthdata.nasa.gov
<span class="co1"># </span>
<span class="co1"># The authentication endpoint</span>
<span class="co1">#</span>
UrsAuthPath          /oauth/authorize?app_type=<span class="nu0">401</span>
<span class="co1">#</span>
<span class="co1"># The token exchange endpoint</span>
<span class="co1">#</span>
UrsTokenPath         /oauth/token
<span class="co1">#</span>
<span class="co1">#</span>
<span class="co1"># END - URS module configuration</span>
&#160;
<span class="co1"># Place a URS security constraint on the Hyrax service</span>
&lt;<span class="kw3">Location</span> /opendap &gt;
&#160;
    <span class="co1"># Tells Apache to use URS/OAuth2 authentication in mod_auth_urs</span>
    <span class="kw1">AuthType</span> UrsOAuth2 
&#160;
    <span class="co1"># This is a localization field and I think it shows up in</span>
    <span class="co1"># browser and GUI client generated authentication dialog boxes.</span>
    <span class="kw1">AuthName</span> <span class="st0">&quot;URS_AuthTest&quot;</span>  
&#160;
    <span class="co1"># To access, a user must login.</span>
    <span class="kw1">Require</span> valid-<span class="kw1">user</span> 
&#160;
    <span class="co1">##########################################################</span>
    <span class="co1"># UrsAuthGroup     This defines a name for a group of protected resources. </span>
    <span class="co1"># All resources with the same group will share authentication state. i.e. If a </span>
    <span class="co1"># user attempts to access one resource in a group and authenticates, then </span>
    <span class="co1"># the authentication will be valid for all other resources in the group (be </span>
    <span class="co1"># aware that the group name is also used as a cookie name).</span>
    UrsAuthGroup       HyraxDataServer 
&#160;
    <span class="co1">##########################################################</span>
    <span class="co1"># UrsClientId     The ClientID that the URS application registration process </span>
    <span class="co1">#  assigned to your application</span>
    UrsClientId        ******
&#160;
    <span class="co1">##########################################################</span>
    <span class="co1"># UrsAuthCode     You compute this from the Client ID and application password</span>
    UrsAuthCode        ******
&#160;
    <span class="co1">##########################################################</span>
    <span class="co1"># UrsRedirectUrl  This is the redirection URL that was specified when </span>
    <span class="co1"># registering the application. This should include the scheme (http/https), </span>
    <span class="co1"># the outward facing domain (host)name (or IP address) of your server, </span>
    <span class="co1"># the port (if non-standard for the scheme), and path. Note </span>
    <span class="co1"># that the path does not need to refer to a real resource, since the module </span>
    <span class="co1"># will intercept it and redirect the user before Apache tries to find a </span>
    <span class="co1"># matching resource.</span>
    UrsRedirectUrl     https://localhost/opendap/login 
&#160;
    <span class="co1">##########################################################</span>
    <span class="co1"># UrsAccessErrorUrl  If the users authentication at the URS service fails, </span>
    <span class="co1"># this is the page on your server to which they will redirected. If it does not</span>
    <span class="co1"># exist they'll get a 404 error instead of the 403.</span>
    UrsAccessErrorUrl  /urs403.html
&#160;
&#160;
    UrsIdleTimeout     <span class="nu0">600</span>
    UrsActiveTimeout   <span class="nu0">36000</span>
    UrsIPCheckOctets   <span class="nu0">2</span>
    UrsUserProfileEnv  uid              URS_USER
    UrsUserProfileEnv  email_address    URS_EMAIL
    UrsUserProfileEnv  first_name       URS_FIRST
    UrsUserProfileEnv  last_name        URS_LAST
&#160;
&#160;
&lt;/<span class="kw3">Location</span>&gt;</pre></div></div>
<p>Assuming that you have also:
</p>
<ul>
<li> Completed configuring <a href="../index.php/Hyrax_-_Apache_Integration" title="Hyrax - Apache Integration"> AJP proxy for Tomcat</a> 
</li>
<li> Authorized your server (aka Application) to access your URS profile.
</li>
</ul>
<p>Simply restart Apache and Hyrax is ready to be accessed with your URS credentials.
</p>
<h4><span class="mw-headline" id="Logging_URS_information"><span class="mw-headline-number">3.2.4</span> Logging URS information</span></h4>
<p>It is possible to get the Apache module to pull user profile information into the request environment using the UrsUserProfileEnv configuration directive:
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="apache source-apache"><pre class="de1">UrsUserProfileEnv email_address URS_EMAIL
UrsUserProfileEnv user_type URS_TYPE</pre></div></div>
<p>This can be added to a custom log format by including:
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="apache source-apache"><pre class="de1"><span class="kw1">LogFormat</span> ...&#160;%{URS_EMAIL}e ... \<span class="st0">&quot;%{URS_TYPE}e<span class="es0">\&quot;</span> ...'''</span></pre></div></div>
<p>Where we show the <i>URS_TYPE</i> environment variable in double quotes because their values often contain spaces. Thanks to Peter Smith for this information.
</p><p>See the full Apache <a rel="nofollow" class="external text" href="http://httpd.apache.org/docs/2.2/mod/mod_log_config.html">LogFormat documentation</a> for more information.
</p>
<h3><span class="mw-headline" id="Common_Problems"><span class="mw-headline-number">3.3</span> Common Problems</span></h3>
<h4><span class="mw-headline" id="Clients_keep_getting_Internal_Server_Error"><span class="mw-headline-number">3.3.1</span> Clients keep getting <b>Internal Server Error</b></span></h4>
<dl>
<dt> Problem
</dt>
<dd> Everything seems to work fine but when the browser client is redirected back to the originally requested resource it receives an <b>Internal Server Error</b> from Apache httpd. In /var/log/httpd/ssl_error.log you see this type of thing:
</dd>
</dl>
<pre>[Sun Mar 22 20:05:47 2015] [notice] [client 71.56.150.130] UrsAuth: Redirecting to URS for authentication, referer: <a rel="nofollow" class="external free" href="https://52.1.74.222/opendap/data/contents.html">https://52.1.74.222/opendap/data/contents.html</a>
[Sun Mar 22 20:05:47 2015] [error] [client 71.56.150.130] UrsAuth: Redirection URL: <a rel="nofollow" class="external free" href="https://uat.urs.earthdata.nasa.gov/oauth/authorize?app_type=401&amp;client_id=tNxluRHmczrTN1iSjXCMiA&amp;response_type=code&amp;redirect_uri=https%3A%2F%2F52.1.74.222%2FOPeNDAP%2Flogin&amp;state=aHR0cHM6Ly81Mi4xLjc0LjIyMi9vcGVuZGFwL2RhdGEvaGRmNC9jb250ZW50cy5odG1s">https://uat.urs.earthdata.nasa.gov/oauth/authorize?app_type=401&amp;client_id=tNxluRHmczrTN1iSjXCMiA&amp;response_type=code&amp;redirect_uri=https%3A%2F%2F52.1.74.222%2FOPeNDAP%2Flogin&amp;state=aHR0cHM6Ly81Mi4xLjc0LjIyMi9vcGVuZGFwL2RhdGEvaGRmNC9jb250ZW50cy5odG1s</a>, referer: <a rel="nofollow" class="external free" href="https://52.1.74.222/opendap/data/contents.html">https://52.1.74.222/opendap/data/contents.html</a>
[Sun Mar 22 20:05:53 2015] [error] [client 71.56.150.130] UrsAuth: Failed to create new cookie, referer: <a rel="nofollow" class="external free" href="https://uat.urs.earthdata.nasa.gov/oauth/authorize?app_type=401&amp;client_id=tNxluRHmczrTN1iSjXCMiA&amp;response_type=code&amp;redirect_uri=https%3A%2F%2F52.1.74.222%2FOPeNDAP%2Flogin&amp;state=aHR0cHM6Ly81Mi4xLjc0LjIyMi9vcGVuZGFwL2RhdGEvaGRmNC9jb250ZW50cy5odG1s">https://uat.urs.earthdata.nasa.gov/oauth/authorize?app_type=401&amp;client_id=tNxluRHmczrTN1iSjXCMiA&amp;response_type=code&amp;redirect_uri=https%3A%2F%2F52.1.74.222%2FOPeNDAP%2Flogin&amp;state=aHR0cHM6Ly81Mi4xLjc0LjIyMi9vcGVuZGFwL2RhdGEvaGRmNC9jb250ZW50cy5odG1s</a>
</pre>
<dl>
<dd>This is often caused by the Apache httpd user not having read/write permission on the directory specified by <b>UrsSessionStorePath</b> in the httpd configuration:
</dd>
</dl>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="apache source-apache"><pre class="de1">UrsSessionStorePath /var/tmp/urs/session</pre></div></div>
<dl>
<dt>Solution 
</dt>
<dd> Check and repair the permissions of the directory  specified by  <b>UrsSessionStorePath</b> as needed.
</dd>
</dl>
<h2><span class="mw-headline" id="Tomcat_Authentication_Services_Configuration"><span class="mw-headline-number">4</span> Tomcat Authentication Services Configuration</span></h2>
<p>Tomcat provides a number of authentication Realm implementations including the JNDIRealm which provides LDAP SP services for Tomcat. There is currently no Shibboleth realm implementation for Tomcat, and it's an open question for the author if there could be one for Shibboleth or OAuth2 given the way that these protocols utilize 302 redirects away from the origin service. 
</p>
<h3><span class="mw-headline" id="LDAP"><span class="mw-headline-number">4.1</span> LDAP</span></h3>
<p>The <a rel="nofollow" class="external text" href="http://tomcat.apache.org/tomcat-7.0-doc/realm-howto.html#JNDIRealm">instructions for configuring Tomcat to perform LDAP authentication are located here.</a> It is clearly a benefit if you understand a fair bit about LDAP before you undertake this. 
</p><p>Here is an example of how to configure Tomcat to use LDAP authentication. 
</p><p>In this example we configure a Tomcat JNDI realm to use <a rel="nofollow" class="external text" href="http://forumsys.com">the public LDAP service provided by  ForumSys</a>.
</p><p>In the <i>server.xml</i> file we added a JNDI Realm element:
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="xml source-xml"><pre class="de1"><span class="sc3"><span class="re1">&lt;Realm</span> </span>
<span class="sc3">    <span class="re0">className</span>=<span class="st0">&quot;org.apache.catalina.realm.JNDIRealm&quot;</span> </span>
<span class="sc3">    <span class="re0">connectionURL</span>=<span class="st0">&quot;ldap://ldap.forumsys.com:389&quot;</span></span>
<span class="sc3">    <span class="re0">connectionName</span>=<span class="st0">&quot;cn=read-only-admin,dc=example,dc=com&quot;</span></span>
<span class="sc3">    <span class="re0">connectionPassword</span>=<span class="st0">&quot;password&quot;</span></span>
<span class="sc3">    <span class="re0">userPattern</span>=<span class="st0">&quot;uid={0},dc=example,dc=com&quot;</span> </span>
<span class="sc3">    <span class="re0">roleBase</span>=<span class="st0">&quot;dc=example,dc=com&quot;</span> </span>
<span class="sc3">    <span class="re0">roleName</span>=<span class="st0">&quot;ou&quot;</span> </span>
<span class="sc3">    <span class="re0">roleSearch</span>=<span class="st0">&quot;(uniqueMember={0})&quot;</span></span>
<span class="sc3"><span class="re2">/&gt;</span></span></pre></div></div>
<p>Configured to work with the <a rel="nofollow" class="external text" href="http://www.forumsys.com/tutorials/integration-how-to/ldap/online-ldap-test-server/">Forum Systems test LDAP server</a>. 
</p><p>Then in the <i>opendap</i> web application we added the following security constraint to the <i>WEB-INF/web.xml</i> file:
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="xml source-xml"><pre class="de1"><span class="sc3"><span class="re1">&lt;security-constraint<span class="re2">&gt;</span></span></span>
    <span class="sc3"><span class="re1">&lt;web-resource-collection<span class="re2">&gt;</span></span></span>
         <span class="sc3"><span class="re1">&lt;web-resource-name<span class="re2">&gt;</span></span></span>Hyrax Server<span class="sc3"><span class="re1">&lt;/web-resource-name<span class="re2">&gt;</span></span></span>
         <span class="sc3"><span class="re1">&lt;url-pattern<span class="re2">&gt;</span></span></span>/*<span class="sc3"><span class="re1">&lt;/url-pattern<span class="re2">&gt;</span></span></span>
    <span class="sc3"><span class="re1">&lt;/web-resource-collection<span class="re2">&gt;</span></span></span>
    <span class="sc3"><span class="re1">&lt;auth-constraint<span class="re2">&gt;</span></span></span>
         <span class="sc3"><span class="re1">&lt;role-name<span class="re2">&gt;</span></span></span>user<span class="sc3"><span class="re1">&lt;/role-name<span class="re2">&gt;</span></span></span>
    <span class="sc3"><span class="re1">&lt;/auth-constraint<span class="re2">&gt;</span></span></span>
&#160;
    <span class="sc3"><span class="re1">&lt;user-data-constraint<span class="re2">&gt;</span></span></span>
         <span class="sc-1">&lt;!-- this ensures that all efforts to access the admin interface nd resources must use HTTPS --&gt;</span>
         <span class="sc3"><span class="re1">&lt;transport-guarantee<span class="re2">&gt;</span></span></span>CONFIDENTIAL<span class="sc3"><span class="re1">&lt;/transport-guarantee<span class="re2">&gt;</span></span></span>
    <span class="sc3"><span class="re1">&lt;/user-data-constraint<span class="re2">&gt;</span></span></span>
<span class="sc3"><span class="re1">&lt;/security-constraint<span class="re2">&gt;</span></span></span></pre></div></div>
<p><br />
No changes were made to the <i>$CATALINA_HOME/conf/tomcat_users.xml</i> file.
</p>
<h3><span class="mw-headline" id="Shibboleth"><span class="mw-headline-number">4.2</span> Shibboleth</span></h3>
<p>There is no actual Shibboleth integration with Tomcat beyond what is <a href="#Shibboleth_.28mod_shib.29"> provided by running the Apache <i>httpd</i> module mod_shib and connecting Tomcat to <i>httpd</i> using AJP as described in the Apache/Shibboleth section on this page.</a>
</p>
<h3><span class="mw-headline" id="URS_OAuth2"><span class="mw-headline-number">4.3</span> URS OAuth2</span></h3>
<p>There is no actual URS integration with Tomcat beyond what is <a href="#URS_OAuth2_.28mod_auth_urs.29"> provided by running the Apache httpd module mod_auth_urs and connecting Tomcat to httpd using AJP as described in the Apache/URS section on this page.</a>
</p>



</div>
				<!-- end content -->
				<div class="visualClear"></div>
	</div>
</div></div>
</body></html>