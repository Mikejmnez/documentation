<?xml version="1.0" encoding="UTF-8"?><?asciidoc-toc?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>QuickStart - OPeNDAP Documentation</title>
<date>2016-11-23</date>
</info>
<section xml:id="__anchor_xml_id_introduction_xreflabel_introduction_introduction">
<title><anchor xml:id="Introduction" xreflabel="[Introduction]"/>Introduction</title>
<simpara><link xlink:href="http://www.opendap.org/">OPeNDAP</link> is the developer of client/server software, of the same name, that enables scientists to share data more easily over the internet. The OPeNDAP group is also the original developer of the <link xlink:href="http://www.opendap.org/pdf/ESE-RFC-004v1.1.pdf">Data Access Protocol</link> (DAP) that the software uses. Many other groups have adopted DAP and provide compatible clients, servers, and SDKs. OPeNDAP’s DAP is also a NASA community standard. For the rest of this document, "OPeNDAP" will refer to the software.</simpara>
<simpara>With OPeNDAP, you can access data using an OPeNDAP URL of any database server that supports OPeNDAP. You can do this via command-line, Intenet browser, or a custom UI. Note that OPeNDAP data is, by default, stored and transmitted in binary form.</simpara>
<simpara>This quick start guide covers how to use OPeNDAP in a typical web browser, such as Firefox, Chrome, or Safari, to discover information about data that is useful when creating database queries.</simpara>
<section xml:id="__anchor_xml_id_key_terms_xreflabel_key_terms_key_terms">
<title><anchor xml:id="Key_Terms" xreflabel="[Key_Terms]"/>Key Terms</title>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Constraint Expressions:</emphasis> Criteria that limits what data is returned from a database. Because most databases will have far more data than you want, you’ll want to find out something out about the data and then use that information to constrain your queries.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">DAS (Data Attribute Structure):</emphasis> Similar to a DDS but contains information about the data, such as units and the name of the variable.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">DAP (Data Access Protocol):</emphasis> A data transmission protocol designed by OPeNDAP
specifically for science data. The protocol relies on the widely used and stable HTTP and MIME standards and provides data types to accommodate gridded data, relational data, and time series, as well as allowing users to define their own data types.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">DDS (Dataset Descriptor Structure):</emphasis> Provides a description of the "shape" of data in a database, using a vaguely C-like syntax.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Hyrax:</emphasis> The server half of OPeNDAP, developed by the OPeNDAP group.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">OPeNDAP URL</emphasis> An OPeNDAP URL is a URL that enables you to access data on a database server on which OPeNDAP is implemented. An OPeNDAP URL will include "opendap.org" in its path.</simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="__anchor_xml_id_what_to_do_xreflabel_what_to_do_what_to_do_with_an_opendap_url">
<title><anchor xml:id="What_to_do" xreflabel="[What_to_do]"/>What to do With an OPeNDAP URL</title>
<simpara>Suppose someone gives you a hot tip that there is a lot of good data at…​</simpara>
<screen>http://test.opendap.org/dap/data/nc/sst.mnmean.nc.gz</screen>
<simpara>This URL points to monthly means of sea surface temperature, worldwide, compiled by Richard Reynolds of the Climate Modeling branch of NOAA.</simpara>
<simpara>The simplest thing you can is to download the data to which the URL points. You could feed it to an OPeNDAP-enabled data analysis package, like <link xlink:href="http://ferret.wrc.noaa.gov/Ferret">Ferret</link>, or you could append <emphasis role="strong">.ascii</emphasis> and feed the URL to a regular web browser. However, this approach would not be less than ideal because there is a large quanitity of data that you probably would not want at that URL. Instead, you will want to learn something about the type of data comprised by the database and then use contrained queries to retrieve only the data you need.</simpara>
<note>
<simpara>Because you will rarely want to request an entire archive, OPeNDAP provides sophisticated sub-sampling capabilities, and you need to know something about the data in order to use them.</simpara>
</note>
<section xml:id="__anchor_xml_id_the_easy_way_xreflabel_the_easy_way_the_easy_way_using_the_browser_based_opendap_server_dataset_access_form">
<title><anchor xml:id="The_Easy_Way" xreflabel="[The_Easy_Way]"/>The Easy Way: Using the Browser-Based OPeNDAP Server Dataset Access Form</title>
<simpara>OPeNDAP includes a way to sample data that makes writing a constraint expression somewhat easier than using only a URL to do the same thing. Append <emphasis role="strong">.html</emphasis> to an OPeNDAP URL, and you will get an OPeNDAP Server Dataset Access Form that simplifies the process for sampling data.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/0/05/Reynolds_ifh.png"/>
</imageobject>
<textobject><phrase>Reynolds ifh.png</phrase></textobject>
</mediaobject>
</informalfigure>
<note>
<simpara>As you read this section, it would be useful to have an OPeNDAP Server Dataset Access Form open. <link xlink:href="http://test.opendap.org/opendap/data/nc/sst.mnmean.nc.gz.html">Click here for a live OPeNDAP Dataset Access Form</link></simpara>
</note>
<simpara>The OPeNDAP Server Dataset Access Form has four main sections:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Actions:</emphasis> Use these controls after you have defined your variables:</simpara>
<itemizedlist>
<listitem>
<simpara>Click <emphasis role="strong">Get ASCII</emphasis>, and the data request will appear in a browser window, in comma-separated form.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Binary (DAP) Object</emphasis> to save a binary data file on your local disk.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Get as NetCDF</emphasis> to save the file in netCDF format on your local disk. (You can read either of these later with several OPeNDAP clients, by entering the file path instead of a URL.)</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara><emphasis role="strong">Data URL:</emphasis> This is the OPeNDAP URL connected to the data that we are interested in, but it is "unsampled" (that is, there is no constraint expression on it.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Global Attributes:</emphasis> This information is only for refernce.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Variables:</emphasis> This is the most important part of the page. For each variable in the dataset, you will see the data description (something like "Array of 32 bit Reals [lat = 0..88]"), a checkbox, a text input box, and a list of the variable’s attributes. If you click the checkbox, you will see the variable’s array bounds appear in the text box, and you will see the variable appear in a constraint expression appended to the Data URL at the top of the page. If you edit the array bounds in the text box, press <emphasis role="strong">enter</emphasis> to place your edits in the Data URL box. Move on down the variable list, editing your request, and experiment by adding and changing variable requests. When you have a request you would like to make, use the Actions buttons at the top of the page.</simpara>
</listitem>
</itemizedlist>
<note>
<simpara>You will see a "stride" mentioned. This is another way to subsample an OPeNDAP array or grid. Asking for <emphasis role="strong">lat[0:4]</emphasis> gets you the first five members of the <emphasis role="strong">lat</emphasis> array. Adding a stride value allows you to skip array values. Asking for <emphasis role="strong">lat[0:2:10]</emphasis> gets you every second array value between 0 and 10: 0, 2, 4, 6, 8, 10.</simpara>
</note>
<simpara>The OPeNDAP Server Dataset Access Form works for sequence data as well
as grids. However, since sequence constraint expressions look different
from grid expressions, the form also looks slightly different. The variable selection boxes allow you to enter relational
expressions for each variable. Apart from that, the function is exactly the same.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/d/d9/Gsodock-html.png"/>
</imageobject>
<textobject><phrase>images\d\d9\Gsodock html.png</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click <link xlink:href="http://test.opendap.org/dap/data/ff/gsodock.dat.html">here</link> to see
a live "sequence" form. Click the checkboxes to choose which data
types you want returned, and then add constraint expressions as desired.
The data file contains a day’s record of changing water properties off
a dock in Rhode Island. If you click the <emphasis>Depth</emphasis> and <emphasis>Time</emphasis> boxes (as in
the figure), you will get a record of the tide going in and out twice. You
can add conditions by entering values in the text boxes. See what you
get when you limit the selection to records where the Depth is greater
than 2 meters.</simpara>
</section>
<section xml:id="__anchor_xml_id_a_more_flexible_way_xreflabel_a_more_flexible_way_a_more_flexible_way_using_commands_in_a_browser">
<title><anchor xml:id="A_More_Flexible_Way" xreflabel="[A_More_Flexible_Way]"/>A More Flexible Way: Using Commands in a Browser</title>
<simpara>If you would perfer to not use the OPeNDAP Server Data Access Form, you can use just a browser instead. This section describes how to do that.</simpara>
<simpara>OPeNDAP has sophisticated methods for subsampling data at a remote site, but you need some information about the data first. First, we will look at data’s Dataset Descriptor Structure (DDS). This provides a description of the "shape" of the data, using a vaguely C-like syntax. You get a dataset’s DDS by appending <emphasis role="strong">.dds</emphasis> to the URL. Click <link xlink:href="http://test.opendap.org/dap/data/nc/sst.mnmean.nc.gz.dds">here</link> to see an example of an OPeNDAP DDS at sst.mnmean.nc.gz.dds. The DDS looks like this:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/a/a4/Reynolds_dds.png"/>
</imageobject>
<textobject><phrase>Reynolds dds.png</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>From the sst.mnmean.nc.gz DDS, you can see that the dataset consists of two different pieces:</simpara>
<itemizedlist>
<listitem>
<simpara>A "Grid" comprising a three-dimensional array of integer values
(Int16) called sst; and three "Map" vectors:</simpara>
<itemizedlist>
<listitem>
<simpara>A 89-element vector called "lat",</simpara>
</listitem>
<listitem>
<simpara>A 180-element vector called "lon",</simpara>
</listitem>
<listitem>
<simpara>A 1857-element vector called "time", and</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>A 1857 by 2 array called "time_bnds".</simpara>
</listitem>
</itemizedlist>
<simpara>The Grid is a special OPeNDAP data type that includes a multidimensional array and map vectors that indicate independent variable values. That is, you can use a Grid to store an array in which rows appear in irregular intervals. Here is a diagram of a simple grid:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/d/d4/Gridpts.gif"/>
</imageobject>
<textobject><phrase>Gridpts.gif</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>The array part of the grid (like <emphasis role="strong">sst</emphasis> in the example above) contains the data points measured at each one of the squares. The X map vector contains the horizontal positions of the columns (like the <emphasis role="strong">lon</emphasis> vector above). The Y map vector contains the vertical positions of the rows (like the <emphasis role="strong">lat</emphasis> vector above).</simpara>
<simpara>You can also use a grid to store arrays in which the columns and rows occur at regular intervals. You will often see OPeNDAP data stored in this way.</simpara>
<simpara>(The other special OPeNDAP data type worth considering is the <emphasis>Sequence</emphasis> . You will see more about this later. There are also <emphasis>Structures</emphasis> for representing arbitrary hierarchies.)</simpara>
<simpara>You can see from the DDS that the Reynolds data is in a 89x180x1857
element grid, and the dimensions of the Grid are called "lat", "lon",
and "time". This is suggestive, but not as helpful as one could wish. To find out more about what the data <emphasis>is</emphasis>, you can look at the other
important OPeNDAP structure: the Data Attribute Structure (DAS). This
structure is somewhat similar to the DDS but contains information about
the data, such as units and the name of the variable. Part of the DAS
for the Reynolds data taht we saw above is shown in the figure below. Click <link xlink:href="http://test.opendap.org/dap/data/nc/sst.mnmean.nc.gz.das">sst.mnmean.nc.gz.das</link>
to see the rest of it.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/f/f9/Reynolds_das.png"/>
</imageobject>
<textobject><phrase>Reynolds das.png</phrase></textobject>
</mediaobject>
</informalfigure>
<note>
<simpara>Unlike the DDS, the DAS is populated at the data provider’s discretion. Cosenquently, the quality of the data in it (the "metadata") varies widely. The data in the Reynolds dataset used in this example are COARDS compliant. Other metadata standards you may encounter with OPeNDAP data are HDF-EOS, EPIC, FGDC, or no metadata at all.</simpara>
</note>
<simpara>We can now understand the data better. Apparently the <emphasis role="strong">lat</emphasis>
vector contains latitude, in degrees north, and the range is from 89.5
to -89.5. Since this is a global grid, the latitude values probably go
in order. We can check this by asking for just the latitude vector, as in the following:</simpara>
<screen>http://test.opendap.org/dap/data/nc/sst.mnmean.nc.gz.ascii?lat</screen>
<simpara>What we have done here is to append a constraint expression to the OPeNDAP URL, to indicate how to constrain our request for data. Constraint expressions can take many forms. This guide will only describe a few of them. (You can refer to the OPeNDAP User Guide for more complete information about constraint expressions.) Try requesting the <link xlink:href="http://test.opendap.org/dap/data/nc/sst.mnmean.nc.gz.ascii?time">time</link> and <link xlink:href="http://test.opendap.org/dap/data/nc/sst.mnmean.nc.gz.ascii?lon">longitude</link> vectors to see how this works.</simpara>
<simpara>According to the DAS, time is kept in "days since 1800-1-1 00:00:00" in
this dataset. This DAS also contains the actual time period recorded in
the data (19723 to 76214) which, because of your familiarity with the
Julian calendar, you instantly recognize as beginning January 1, 1854.</simpara>
<simpara>OPeNDAP provides an <emphasis role="strong">info</emphasis> service that returns, in a single request, all the data
we have seen so far. The returned data is also
formatted differently, and you can occasionally
find server-specific documentation here, as well. Some will find this
the easiest way to read the attribute and structure information
described above. You can see what information is available by appending
<emphasis role="strong">.info</emphasis> to a URL, like
<link xlink:href="http://test.opendap.org/dap/data/nc/sst.mnmean.nc.gz.info">this</link>:</simpara>
<screen>http://test.opendap.org/dap/data/nc/sst.mnmean.nc.gz.info</screen>
</section>
<section xml:id="__anchor_xml_id_peeking_at_data_xreflabel_peeking_at_data_peeking_at_data">
<title><anchor xml:id="Peeking_at_Data" xreflabel="[Peeking_at_Data]"/>Peeking at Data</title>
<simpara>Now that we know a little about the shape of the data and the data
attributes, we will look at some of the data.</simpara>
<simpara>You can request a piece of an array with subscripts, just like in a C
program, Matlab, or many other computer languages. Use a colon to indicate a subscript range. For example, <link xlink:href="http://test.opendap.org/dap/data/nc/sst.mnmean.nc.gz.ascii?time%5b0:6%5d">http://test.opendap.org/dap/data/nc/sst.mnmean.nc.gz.ascii?time%5b0:6%5d</link> will produce a time vecor that looks like this:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/0/01/Reynolds_time_vector.png"/>
</imageobject>
<textobject><phrase>Reynolds time vector.png</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>If you are interested in the Reynolds dataset, you are probably more
interested in the sea surface temperature data than the dependent
variable vectors. The temperature data is a three-dimensional grid. To
sample the sst grid, you just add a dimension for time: "…​sst/mnmean.nc.ascii?sst[0:1][13:16][103:105]". Click <link xlink:href="http://test.opendap.org/dap/data/nc/sst.mnmean.nc.gz.ascii?sst%5b0:1%5d%5b13:16%5d%5b103:105%5d">here</link> to see this example in action. You will see something like this:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/a/a8/Reynolds_sst.png"/>
</imageobject>
<textobject><phrase>Reynolds sst.png</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Notice that when you ask for part of an OPeNDAP grid, you get the array
part along with the corresponding parts of the map vectors.</simpara>
<simpara>One potentially confusing thing about our request is that we requested
the time, latitude, and longitude by their position in the map vectors,
but in the returned information they are referenced by their values.
That is, we asked for the 0th and 1st time values, but these are 19723
and 19754. We also asked for the 103rd, 104th, and 105th longitude
values, but these are 206, 208, and 210 degrees, respectively. The value
434 in the return can be referenced as "…​sst/mnmean.nc.ascii?sst[1][15][103]". Click <link xlink:href="http://test.opendap.org/dap/data/nc/sst.mnmean.nc.gz.ascii?sst%5b1%5d%5b15%5d%5b103%5d">here</link> to see this in action.</simpara>
<simpara>Note that the sst values are in Celsius degrees multiplied by 100, as
indicated by the <emphasis role="strong">scale_factor</emphasis> attribute of the
<link xlink:href="http://test.opendap.org/dap/data/nc/sst.mnmean.nc.gz.das">DAS</link>. Further,
it’s important to remember that with this dataset the data were
obtained by calculating spatial and temporal means. Consequently, the
data points in the <emphasis role="strong">sst</emphasis> array should be ignored when the value is the
missing data flag (32767) as these pixels are probably coincident with
land (although there can be other reasons for missing data).</simpara>
<section xml:id="__anchor_xml_id_server_functions_xreflabel_server_functions_server_functions_looking_at_geo_referenced_data_using_hyrax">
<title><anchor xml:id="Server_Functions" xreflabel="[Server_Functions]"/>Server Functions: Looking at Geo-Referenced Data Using Hyrax</title>
<simpara>There are a number of different DAP servers that have been developed by
different organizations. Hyrax, the DAP server developed by the OPeNDAP
group, supports access to geo-referenced data using lat/lon coordinates.
You probably noticed that the array and grid indexes used so far are not
very intuitive. You can see the data are global and are indexed by
latitude and longitude, but in the previous example we first looked at
the lat and lon vectors, saw which indexes corresponded to which
real-world locations, and then made our accesses using those indexes.</simpara>
<simpara>Hyrax supports a small set of functions which can perform these look-up
operations for you. For example, we could rewrite the example above like
this: "…​mnmean.nc.gz.ascii?geogrid(sst,62,206,56,210,"19722&lt;time&lt;19755")". Click <link xlink:href="http://test.opendap.org/opendap/data/nc/sst.mnmean.nc.gz.ascii?geogrid(sst,62,206,56,210,%2219722%3Ctime%3C19755%22)">here</link> to see this in action. The results look like this:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/c/c8/Reynolds_sst_geogrid.png"/>
</imageobject>
<textobject><phrase>Reynolds sst geogrid.png</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>The Syntax for <literal>geogrid()</literal> is: "geogrid(grid variable, upper latitude, left longitude, lower latitude,
right longitude, <emphasis>other expressions</emphasis>)", ehere <emphasis>other expressions</emphasis> must be enclosed in double quotes, and can be one of these forms:</simpara>
<itemizedlist>
<listitem>
<simpara>variable relop value</simpara>
</listitem>
<listitem>
<simpara>value relop variable</simpara>
</listitem>
<listitem>
<simpara>value relop variable relop value</simpara>
</listitem>
</itemizedlist>
<simpara><emphasis role="strong">Relop</emphasis> stands for one of the relational operators: &lt;,&gt;,⇐,&gt;=,=,!=.
<emphasis role="strong">Value</emphasis> stands for a numeric constant, and <emphasis role="strong">Variable</emphasis> must be the name
of one of the grid dimensions. You can use multiple clauses by
separating them with commas, but each clause must be surrounded by
double quotes. For example, the following is yet another way to get the
same return data as the above example:</simpara>
<simpara><link xlink:href="http://test.opendap.org/opendap/data/nc/sst.mnmean.nc.gz.ascii?geogrid(sst,62,206,56,210,%2219722%3Ctime%22,%22time%3C19755%22)">…​mnmean.nc.gz.ascii?geogrid(sst,62,206,56,210,"19722&lt;time","time&lt;19755")</link></simpara>
<simpara>You can figure out which functions are supported by Hyrax by calling
the server function
<link xlink:href="http://test.opendap.org/dap/data/nc/sst.mnmean.nc.gz.ascii?version()">version()</link>.
This will return an XML document that shows each registered function and
its version.</simpara>
<simpara>To find out how to call each function, you can call it with an empty
parameter list and get some documentation for that function. For
example, try
<link xlink:href="http://test.opendap.org/dap/data/nc/sst.mnmean.nc.gz.ascii?geogrid()">…​?geogrid()</link>.</simpara>
</section>
<section xml:id="__anchor_xml_id_more_fun_xreflabel_more_fun_more_fun_with_server_functions">
<title><anchor xml:id="More_Fun" xreflabel="[More_Fun]"/>More Fun With Server Functions</title>
<simpara>Server functions can be composed to form pipelines, feeding the value of
one function to another. Since the values in this data set are scaled up
by a factor of 100, we can use the <emphasis>linear_scale()</emphasis> function to scale
the result using…​</simpara>
<screen>y = mx + b</screen>
<simpara>…​where <emphasis role="strong">m</emphasis> is the scale factor and <emphasis role="strong">b</emphasis> offset. The <emphasis>linear_scale()</emphasis>
function syntax is:</simpara>
<itemizedlist>
<listitem>
<simpara>linear_scale(variable, scale factor, offset)</simpara>
</listitem>
<listitem>
<simpara>linear_scale(variable)</simpara>
</listitem>
</itemizedlist>
<simpara>Use the first form when you want to specify <emphasis role="strong">m</emphasis> and <emphasis role="strong">b</emphasis> explicitly or
the second form when Hyrax can guess the values using data set metadata.
(Note: You will get an error if the server cannot figure out value to use). For example,</simpara>
<simpara><link xlink:href="http://test.opendap.org/opendap/data/nc/sst.mnmean.nc.gz.ascii?linear_scale(geogrid(sst,78,0,56,10,%22time=19723%22),0.01,0)">…​nc.gz.ascii?linear_scale(geogrid(sst,78,0,56,10,"time=19723"),0.01,0)</link> produces the following:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/9/96/Reynolds_sst_linear_scale_geogrid.png"/>
</imageobject>
<textobject><phrase>Reynolds sst linear scale geogrid.png</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
</section>
<section xml:id="__anchor_xml_id_sequence_data_xreflabel_sequence_data_sequence_data">
<title><anchor xml:id="Sequence_Data" xreflabel="[Sequence_Data]"/>Sequence Data</title>
<simpara>Gridded data works well for satellite images, model data, and data
compilations such as the Reynolds data we have just looked at. Other data,
such as data measured at a specific site, are not so readily stored in
that form. OPeNDAP provides a data type called a "sequence" to store this
kind of data.</simpara>
<simpara>A sequence can be thought of as a relational data table, with each
column representing a different data variable, and each row representing
a different measurement of a set of values (also called an "instance").
For example, an ocean temperature profile can be stored as a Sequence
with two columns: pressure and temperature. Each measurement is a
pressure and a temperature and is contained in one row. A weather
station’s data can be stored as a sequence with time in one column and
each weather variable in another column. You can find a good example of a sequence at <link xlink:href="http://test.opendap.org/dap/data/ff/gsodock.dat.info">http://test.opendap.org/dap/data/ff/gsodock.dat</link></simpara>
<simpara>This is a 24-hour record of measurements at a weather station on a dock
in Rhode Island. Each record consists of a dozen different variables,
including air temperature, wind speed, and direction, as well as depth,
temperature, and water salinity The data is arranged into 144
measurements of each of the twelve variables.</simpara>
<simpara><link xlink:href="http://test.opendap.org/dap/data/ff/gsodock.dat.dds">Ask for the DDS</link>, and you will see the twelve variables, all contained in a Sequence called URI_GSO-Dock:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/7/71/Gsodock-dds.png"/>
</imageobject>
<textobject><phrase>Gsodock dds.png</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara><link xlink:href="http://test.opendap.org/dap/data/ff/gsodock.dat.das">The DAS</link> contains the units for each data type and some additional information:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/8/85/Gsodock-das.png"/>
</imageobject>
<textobject><phrase>Gsodock das.png</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>To select the data you want from a server, use a constraint
expression, just as you did with the gridded data above. Now, though,
the constraint contains two kinds of clauses. One is a list of variables
you wish to have returned, and the other is the conditions under which
they should be returned. The first is called the <emphasis role="strong">projection</emphasis> clause and
the second the <emphasis role="strong">selection</emphasis> clause. For example, if you want to see salinity data read after noon that day, try this:</simpara>
<simpara><link xlink:href="http://test.opendap.org/dap/data/ff/gsodock.dat.ascii?URI_GSO-Dock.Salinity&amp;URI_GSO-Dock.Time%3E35234.5">…​gsodock.dat.ascii?URI_GSO-Dock.Salinity&amp;URI_GSO-Dock.Time&gt;35234.5</link></simpara>
<simpara>Selection clauses can be stacked endlessly against a projection clause,
allowing all the flexibility most people need to sample data files.
Here is an example of applying two conditions:</simpara>
<simpara><link xlink:href="http://test.opendap.org/dap/data/ff/gsodock.dat.ascii?URI_GSO-Dock.Salinity&amp;URI_GSO-Dock.Time%3E35234.5&amp;URI_GSO-Dock.Depth%3E2">…​gsodock.dat.ascii?URI_GSO-Dock.Salinity&amp;URI_GSO-Dock.Time&gt;35234.5&amp;URI_GSO-Dock.Depth&gt;2</link></simpara>
<simpara>Try it yourself with three or four conditions or more.</simpara>
</section>
</section>
<section xml:id="__anchor_xml_id_finding_urls_xreflabel_finding_urls_finding_opendap_urls">
<title><anchor xml:id="Finding_URLs" xreflabel="[Finding_URLs]"/>Finding OPeNDAP URLs</title>
<simpara>Data often comes in the form of a URL enclosed in an email message, and there are several other ways to find data served by OPeNDAP servers.</simpara>
<section xml:id="__anchor_xml_id_gcmd_xreflabel_gcmd_gcmd">
<title><anchor xml:id="GCMD" xreflabel="[GCMD]"/>GCMD</title>
<simpara>The <link xlink:href="http://gcmd.gsfc.nasa.gov">Global Change Master Directory</link> provides a huge amount of earth science data and catalogs OPeNDAP URLs for the datasets that have them. You can search on "OPeNDAP" from the main page to find many of these datasets.</simpara>
<simpara>If you make that search, check the list for the Reynolds data; it should be there.</simpara>
</section>
<section xml:id="__anchor_xml_id_web_interface_xreflabel_web_interface_web_interface">
<title><anchor xml:id="Web_Interface" xreflabel="[Web_Interface]"/>Web Interface</title>
<simpara>Many sites that serve one OPeNDAP dataset also serve others. The OPeNDAP web interface (if it is enabled by the site) allows you to check the directory structure for other datasets. For example, we will look at the Reynolds data we saw previously: <link xlink:href="http://test.opendap.org/dap/data/nc/sst.mnmean.nc.gz.html">http://test.opendap.org/dap/data/nc/sst.mnmean.nc.gz.html</link></simpara>
<simpara>If we use the same URL, but without the file name at the end, we can browse the directory of data: <link xlink:href="http://test.opendap.org/dap/data/nc/">http://test.opendap.org/dap/data/nc/</link></simpara>
<simpara>The OPeNDAP server checks to see whether the URL is a directory, and if
it is, it generates a directory listing, like <link xlink:href="http://test.opendap.org/dap/data/nc/">this:</link></simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="../images/9/9e/Test.oopendap.org_directory_view.png"/>
</imageobject>
<textobject><phrase>Test.oopendap.org directory view.png</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>You can see from the directory listing that the monthly mean dataset
that we have been looking at is accompanied by a host of other datasets. The
site you are looking at is our test data sit. We use these datasets to
run many of our nightly tests. All of the files in the the <emphasis>/data/nc</emphasis>
directory are stored in NetCDF files; other directories under <emphasis>/data</emphasis>
hold data stored in other file types.</simpara>
<simpara><emphasis role="strong">Note:</emphasis> In general, this list is produced by an OPeNDAP server and this feature works on all servers. However, it only really understands OPeNDAP data files, so other file types will simply be sent without any interpretation. This can be useful if the <emphasis>other file</emphasis> happens to be a README or other documentation file since this
makes it simple to serve data stored in files and documented using plain
text files. Essentially, the person or organization providing data does not need to do anything besides <link xlink:href="../index.php/Hyrax">installing the server</link>.</simpara>
</section>
<section xml:id="__anchor_xml_id_file_servers_xreflabel_file_servers_file_servers">
<title><anchor xml:id="File_Servers" xreflabel="[File_Servers]"/>File Servers</title>
<simpara>Some datasets that you will find are actually lists of other datasets. These
are called <emphasis>file servers</emphasis> and are themselves OPeNDAP datasets, organized
as a Sequence, containing URLs with some other identifying data (often
time). You can request the entire dataset or subsample it just like any
other OPeNDAP dataset.</simpara>
<simpara>NASA’s atmospheric composition data information services maintains some
OPeNDAP file servers:</simpara>
<simpara><link xlink:href="http://acdisc.sci.gsfc.nasa.gov/opendap/catalog/DatapoolCatalog/AIRS/contents.html">http://acdisc.sci.gsfc.nasa.gov/opendap/catalog/DatapoolCatalog/AIRS/contents.html</link></simpara>
<simpara>Try selecting one of the datasets listed in the above, and look at the
DDS and DAS of that dataset. You will see it is a list of OPeNDAP URLs
(called <emphasis role="strong">DODS_URL</emphasis> here), labeled with the date of measurement. If you
go to the
<link xlink:href="http://acdisc.sci.gsfc.nasa.gov/opendap/catalog/DatapoolCatalog/AIRS/AIRX3C2M_005-cat.dat.html">html
form</link> for one of them, and click on the <emphasis role="strong">DODS_URL</emphasis> checkbox to get a
list of URLs, and then add some conditions (try limiting the files to
data from 2003), and click <emphasis role="strong">Get ASCII</emphasis>. Now you can cut and paste the
resulting URLs to get more data.</simpara>
</section>
</section>
<section xml:id="__anchor_xml_id_further_analysis_xreflabel_further_analysis_further_analysis">
<title><anchor xml:id="Further_Analysis" xreflabel="[Further_Analysis]"/>Further Analysis</title>
<simpara>This guide is about forming an OPeNDAP URL. After you have figured out
how to request the data, there are a variety of things you can do with
it. (OPeNDAP software mentioned here is available from the
<link xlink:href="http://www.opendap.org">OPeNDAP Home Page</link> .)</simpara>
<itemizedlist>
<listitem>
<simpara>Use a generic web client like <emphasis role="strong">geturl</emphasis> (a standard part of the OPeNDAP
package), the free programs
<link xlink:href="https://www.gnu.org/software/wget/">wget</link> or
<link xlink:href="http://lynx.browser.org">lynx</link>, or even a browser like <emphasis role="strong">Netscape
Navigator</emphasis> or <emphasis role="strong">Chrome</emphasis> to download data into a local data
file. To be able to use the data further, you will probably have to
download the ASCII version by using the <emphasis role="strong">.ascii</emphasis> suffix on the URL, as
in the examples shown above.</simpara>
</listitem>
<listitem>
<simpara>There are pre-packaged OPeNDAP clients available that can download
binary OPeNDAP data from the web into a useful form. As of today,
command line clients (<emphasis role="strong">loaddods</emphasis>) are available for the Matlab and IDL
data analysis environments, with which you can download OPeNDAP data
directly into IDL or Matlab objects.</simpara>
</listitem>
<listitem>
<simpara>The <link xlink:href="http://ferret.wrc.noaa.gov/Ferret">Ferret</link> and
<link xlink:href="http://cola.gmu.edu/grads/">GrADS</link> free data analysis packages both
support OPeNDAP. You can use these for downloading OPeNDAP data, and for
examining it afterwards. (There are limitations. For example, Ferret may not be able to read datasets served as Sequence data.)</simpara>
</listitem>
<listitem>
<simpara>The Matlab analysis package also supports an OPeNDAP client attached
to a graphical user interface. You can use the GUI to create a
constrained OPeNDAP URL, and download the data directly into Matlab. Click
<link xlink:href="https://www.opendap.org/about/workshops-and-presentations/2002-02-22">here</link>
for more information about the Matlab GUI client.</simpara>
</listitem>
<listitem>
<simpara>If you have a data analysis program or package that you like, you can
look into the possibility of linking that package to the OPeNDAP toolkit
library, in effect making your program into a web-capable OPeNDAP
client. OPeNDAP libraries exist to mimic the behavior of the
<link xlink:href="http://www.unidata.ucar.edu/software/netcdf/docs/netcdf_apis.html">netcdf</link>,
<link xlink:href="http://www.hdfgroup.org/">HDF</link> and <link xlink:href="http://www1.whoi.edu/jgofs.html">JGOFS</link>
data access APIs. If your program already uses one of these APIs,
getting it to run with OPeNDAP may be as simple as changing the
libraries to which you link it. The <link xlink:href="https://www.opendap.org/support/user-documentation">OPeNDAP User
Documentation</link> describes how to do this and how you can use the OPeNDAP toolkit
directly to create a new application that doesn’t use one of the
established data access APIs.</simpara>
</listitem>
</itemizedlist>
<simpara>The use of these clients, like the ways in which you can analyze the
data you find, is beyond the scope of this document.</simpara>
</section>
</article>