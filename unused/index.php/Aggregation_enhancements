
<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>Aggregation enhancements - OPeNDAP Documentation</title>

</head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Aggregation_enhancements skin-monobook action-view">
<div id="globalWrapper">
<div id="column-content"><div id="content" class="mw-body-primary" role="main">
	
	
	<h1 id="firstHeading" class="firstHeading" lang="en"><span dir="auto">Aggregation enhancements</span></h1>
	<div id="bodyContent" class="mw-body">
		<div id="siteSub">From OPeNDAP Documentation</div>
		<div id="contentSub"></div>
		

		<!-- start content -->
<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><p>In response to requests from NASA, and with their support, we have added two new kinds of aggregation to Hyrax. Both of these aggregation operations provide a way for client software to specify the granules that will be used to build the aggregate result. While our existing aggregation interface, based on NcML, works well for NASA's level 3 data products, it is all but useless for level 2 <i>swath data</i>. These aggregation functions are specifically designed to work with satellite swath data without being limited to just swath data and are explicitly intended for use with search interfaces that have knowledge of the individual files that make up typical satellite data sets (often called a <i>dataset inventory</i>).
</p>
<div id="toc" class="toc"><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Overview_of_the_new_capability"><span class="tocnumber">1</span> <span class="toctext">Overview of the new capability</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="#Intended_audience"><span class="tocnumber">1.1</span> <span class="toctext">Intended audience</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="#Accessing_the_Aggregation_Services"><span class="tocnumber">1.2</span> <span class="toctext">Accessing the Aggregation Services</span></a>
<ul>
<li class="toclevel-3 tocsection-4"><a href="#How_to_use_these_parameters"><span class="tocnumber">1.2.1</span> <span class="toctext">How to use these parameters</span></a></li>
<li class="toclevel-3 tocsection-5"><a href="#Response_formats"><span class="tocnumber">1.2.2</span> <span class="toctext">Response formats</span></a></li>
<li class="toclevel-3 tocsection-6"><a href="#More_about_var"><span class="tocnumber">1.2.3</span> <span class="toctext">More about <i>var</i></span></a></li>
<li class="toclevel-3 tocsection-7"><a href="#More_about_bbox"><span class="tocnumber">1.2.4</span> <span class="toctext">More about <i>bbox</i></span></a>
<ul>
<li class="toclevel-4 tocsection-8"><a href="#bbox_.26_zip-formatted_returns"><span class="tocnumber">1.2.4.1</span> <span class="toctext"><i>bbox &amp; zip-formatted returns</i></span></a></li>
<li class="toclevel-4 tocsection-9"><a href="#bbox_.26_the_csv_response"><span class="tocnumber">1.2.4.2</span> <span class="toctext"><i>bbox &amp; the csv response</i></span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-2 tocsection-10"><a href="#Performance_and_Implementation"><span class="tocnumber">1.3</span> <span class="toctext">Performance and Implementation</span></a>
<ul>
<li class="toclevel-3 tocsection-11"><a href="#Implementation"><span class="tocnumber">1.3.1</span> <span class="toctext">Implementation</span></a></li>
<li class="toclevel-3 tocsection-12"><a href="#Design"><span class="tocnumber">1.3.2</span> <span class="toctext">Design</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-13"><a href="#Examples"><span class="tocnumber">1.4</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-3 tocsection-14"><a href="#Version"><span class="tocnumber">1.4.1</span> <span class="toctext">Version</span></a></li>
<li class="toclevel-3 tocsection-15"><a href="#Returning_an_Archive"><span class="tocnumber">1.4.2</span> <span class="toctext">Returning an Archive</span></a></li>
<li class="toclevel-3 tocsection-16"><a href="#Returning_a_Table"><span class="tocnumber">1.4.3</span> <span class="toctext">Returning a Table</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-17"><a href="#Potential_Extensions_to_the_Service"><span class="tocnumber">1.5</span> <span class="toctext">Potential Extensions to the Service</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span class="mw-headline" id="Overview_of_the_new_capability"><span class="mw-headline-number">1</span> Overview of the new capability</span></h2>
<p><b>Summary</b>: This service provides value-based subsetting for satellite <i>swath data</i>. It's applicable to lots of other kinds of data, but works best with data that meet certain requirements.
</p><p>Providing search results that include explicit references to hundreds or thousands of discrete files has been the only option for many search interfaces up to this point. This is especially when the datasets holds satellite swath data because swath data are not easily aggregated. For this interface to Hyrax's aggregation software, we provide two kinds of responses: Data in multiple files that are bundled together using an zip archive and data in tabular form. For clients that request the aggregate result in a zip file, given a request for values from N files, there will be N entries in the resulting zip archive. Some of these entries may simply indicate that no data matching the spatial or other constraints were found. While the source data files can be in any format that the Hyrax server can read, the response will be either netCDF3, netCDF4 or ASCII. The netCDF3/4 files returned will conform to CF 1.6 to the extent possible (the underlying data files may lack information CF 1.6 requires). For clients that request data in tabular form, the data from N files will be returned in one ASCII CSV response. These values can be easily assimilated by database systems, Excel and other tools.
</p>
<h3><span class="mw-headline" id="Intended_audience"><span class="mw-headline-number">1.1</span> Intended audience</span></h3>
<p>This service was originally intended for software developers working data search tools who need to be able to return results that encompass hundreds or thousands of granules. It works best from a programmatic interface, but it's certainly open to end users, see the examples using curl for one way to access the service.
</p>
<h3><span class="mw-headline" id="Accessing_the_Aggregation_Services"><span class="mw-headline-number">1.2</span> Accessing the Aggregation Services</span></h3>
<p>This 'service' is accessed using HTTP's GET or POST methods. In this documentation I will describe how to use POST to send information, but the same key-value parameters can be sent using the GET method, albeit within the character limits of a URL (which vary depending on implementation).
</p><p>The service is accessed using the following set of key-value parameters:
</p>
<dl>
<dt>operation</dt>
<dd> Use <i>operation</i> to select from various kinds of responses. The form of the response also determines how the aggregation is built. The current values for this parameter are: <i>version</i> which returns information about the service's version; <i>file</i> returns a collection of files; <i>netcdf3</i>, <i>netcdf4</i>, <i>ascii</i> all translate the underlying granule format to netcdf3, etc., and return that collection of translated files; <i>csv</i> returns data from many granules as a single table of data, using Comma Separated Values (csv) format. More information about this is given below.
</dd>
<dt>file</dt>
<dd> The URL path component to a granule served by Hyrax. This parameter will appear once for each file in the aggregation.
</dd>
<dt>var</dt>
<dd> A comma-separated list of variables to include in the files returned when using <i>operation</i> equal to <i>netcdf3</i>, <i>netcdf4</i>, <i>ascii</i>, or <i>csv</i>
</dd>
<dt>bbox</dt>
<dd> Limit the values returned to those that fall within a bounding box for a given variable. Like <i>var</i>, this applies only to <i>netcdf3</i>, <i>netcdf4</i>, <i>ascii</i>, or <i>csv</i>
</dd>
</dl>
<h5><span class="mw-headline" id="How_to_use_these_parameters"><span class="mw-headline-number">1.2.1</span> How to use these parameters</span></h5>
<p>The <i>operation</i> and <i>file</i> parameters are the key to the service. By listing multiple files, you can explicitly control which files are accessed and the order of that access. The <i>operation</i> parameter provides a way to choose between a zipped response with many files either in their native format (<i>file</i>) or in one of three well known representations (<i>netcdf3</i>, netcdf4<i> or </i>ascii<i>). </i>
</p><p>While a complete request can make use of only the <i>operation</i> and <i>file</i> parameters, adding the variable and value subsetting can provide a much more manageable response. The <i>var</i> and <i>bbox</i> parameters can appear either once or <i>N</i> times where <i>N</i> is the number of time the <i>file</i> parameter appears. In the first case, the values of the single instances of <i>var</i> and/or <i>bbox</i> are applied to every file/granule listed in the request. In the second case the value of <i>var1</i> is used with <i>file1</i>, <i>var2</i> with <i>file2</i>, and so on up to <i>varN</i> and <i>fileN</i>. The same is true of the <i>bbox</i> parameter. Furthermore, these parameters act independently, so a request can use one value for <i>var</i> and <i>N</i> values for <i>bbox</i> or vice versa.
</p>
<h5><span class="mw-headline" id="Response_formats"><span class="mw-headline-number">1.2.2</span> Response formats</span></h5>
<p>This service will either return a collection of files bundled in a <i>zip archive</i> or it will return a since CSV/text file. When <i>operation</i> is <i>file</i>, <i>netcdf3</i>, <i>netcdf4</i> or <i>ascii</i>, the service will take each of the files as they are retrieve or built and put them in a zip archive that it streams back to the client. The ZIP64(tm) format extensions are used to overcome the size limitations of the original ZIP format. 
</p><p>For the <i>csv</i> operation, the response is a single CSV/text file.
</p>
<h5><span class="mw-headline" id="More_about_var"><span class="mw-headline-number">1.2.3</span> More about <i>var</i></span></h5>
<p>The <i>var</i> parameter is a comma-separated list of variables in the files listed in the request. Each of the variables must be named just as it is in the DAP dataset. If you're getting errors from the service that 'No such variable exists in the dataset ...', use a web browser or <i>curl</i> to look at one of the granules and see what the exact name is. For many NASA dataset, these names can be quite long and have several components, separated by dots. One way to test the name is to build a URL to the file and use the <i>getdap</i> (part of the libdap software package) tool like this
</p>
<dl>
<dd><i>getdap -d &lt;url&gt; -c <var></i>
</dd>
</dl>
<p>If this returns an error, look at the DDS or DMR from the dataset and figure out the correct name. Do that using
</p>
<dl>
<dd><i>getdap -d &lt;url&gt;</i> or 
</dd>
<dd><i>getdap4 -d &lt;url&gt;</i>
</dd>
</dl>
<h5><span class="mw-headline" id="More_about_bbox"><span class="mw-headline-number">1.2.4</span> More about <i>bbox</i></span></h5>
<p>The <i>bbox</i> parameter is probably the most powerful of the parameters in terms of its ability to select specific data values. It has two different modes, one when used with the zip-formatted responses (i.e., <i>operation</i> is <i>netcdf3</i>, <i>netcdf4</i> or <i>ascii</i>) and another when its used with  <i>operation</i> equal to <i>csv</i>. However, ther are somethings that are common to both uses of the parameter. In either case, <i>bbox</i> is used to select a range of values for a particular variable or a set of variables. The format for a <i>bbox</i> request has the following form
</p>
<dl>
<dd><i>[</i> &lt;lower value&gt; <i>,</i> &lt;variable name&gt; <i>,</i> &lt;upper value&gt; <i>]</i>
</dd>
</dl>
<p>for each variable in the subset request. If more than one variable is included, use a series of <i>range requests</i> surrounded by double quotes. An example <i>box</i> request looks like
</p>
<dl>
<dd>&amp;bbox="[49,Latitude,50][167,Longitude,170]"
</dd>
</dl>
<p>which translates to <i>"for the variable Latitude, return only values between 49 and 50 (inclusive) and for the variable Longitude return only values between 167 and 170"</i>. Note that the example here uses two variables named <i>Latitude</i> and <i>Longitude</i>, but any variables in the dataset could be used.
</p><p>The <i>bbox</i> operation is special, however, because the range limitation applies not only to the variable listed, but to any other variables in the request that share dimensions with those variables. Thus, for a dataset that contains <i>Latitude</i>, <i>longitude</i> and <i>Optical_Depth</i> where all have the shared dimensions <i>x</i> and <i>y</i>, the <i>bbox</i> parameter will choose values of <i>Latitude</i> and <i>Longitude</i> within the given values and then apply the resulting bounding box to those variables and any other variables that use the same named dimensions as those variables. The named (i.e., <i>shared</i>) dimensions form the linkage between the subsetting of the variables named in the <i>bbox</i> value subset operation and the other variables in the list of <i>var</i>s to return.
</p><p>You can find out if variables in a dataset share named dimensions by looking at the DDS (DAP2) or DMR (DAP4) for the dataset. Note that for DAP4, in the example used in the previous paragraph, <i>Latitude</i>, <i>longitude</i> and <i>Optical_Depth</i> form a 'coverage' where <i>Latitude</i> and <i>longitude</i> are the domain and <i>Optical_Depth</i> is the 'range'.
</p><p>Note that the variables in the <i>bbox</i> range requests must also be listed in the <i>var</i> parameter if you want their values to be returned.
</p><p>The next two sections describe how the return format (zipped collection of files or CSV table of data) affects the way the <i>bbox</i> subset request is interpreted.
</p>
<h6><span class="mw-headline" id="bbox_.26_zip-formatted_returns"><span class="mw-headline-number">1.2.4.1</span> <i>bbox &amp; zip-formatted returns</i></span></h6>
<p>When the Aggregation Service is asked to provide a zipped collection of files (<i>operation</i> = <i>netcdf3</i>, <i>netcdf4</i> or <i>ascii</i>), the resulting data is stored as N-dimensional arrays in those kinds of responses. This limits how <i>bbox</i> can form subsets, particularly when the values are in the form of 'swath data.' For this request type, <i>bbox</i> forms a bounding box for each variable in the list of range requests and then forms the <i>union</i> of those bounding boxes. For swath data, this means that some extra values will be returned both because the data rarely fit perfectly in a box for any given domain variable and then the union of those two (imperfect) subsets usually results in some data that are actually in neither bounding box. The <i>bbox</i> operation (which maps to a Hyrax server function) was designed to be liberal in applying the subset to as to include all data points that meet the subset criteria at the cost of including some that don't. The alternative would be to exclude some matching data. Similarly, the bounding box for the set of variables is the union for the same reason. Hyrax contains server functions that can form both the union and intersection of several bounding boxes returned by the <i>bbox</i> function.
</p>
<h6><span class="mw-headline" id="bbox_.26_the_csv_response"><span class="mw-headline-number">1.2.4.2</span> <i>bbox &amp; the csv response</i></span></h6>
<p>The <i>csv</i> response format is treated differently because the data values are returned in a table and not arrays. Because of this, the interpretation of <i>bbox</i> is quite different. The subset request syntax is interpreted as a set of <i>value filters</i> that can be expressed as an series of relational expressions that are combined using a logical AND operation. Returning to the original example
</p>
<dl>
<dd>&amp;bbox="[49,Latitude,50][167,Longitude,170]"
</dd>
</dl>
<p>a corresponding relational expression for this subset request would be
</p>
<dl>
<dd>49 &lt;= Latitude &lt;= 50 AND 167 &lt;= Longitude &lt;= 170
</dd>
</dl>
<p>Because the response is a single table, each variable named in the request appears as a column. If there are <i>N</i> variables listed in <i>var</i>, then <i>N</i> columns will appear in the resulting table (with one potential exception where <i>N+1</i> columns may appear). The filter expression built from the <i>bbox</i> subset request will be applied to each row of this table, and only those rows with values that satisfy it will be included in the output.
</p><p>A tabular response like this implies that all of the values of a particular row are related. For this kind of response (<i>operation</i> = <i>csv</i>) to work, each variable listed by use a common set of named dimensions (i.e., shared dimensions). The one exception to this rule is when the variables listed with <i>var</i> fall into two groups, one of which has <i>M</i> dimensions (e.g., 2) and another group has <i>N</i> (e.g., 3) and the second group's named dimensions contains the first group's as a proper subset. In this case, the extra dimension(s) of the second group will appear as additional columns in the response. It sounds confusing, but in practice it is pretty straightforward. Here's a concrete example. Suppose a dataset has <i>Latitude</i>, <i>Longitude</i> and <i>Corrected_Optical_Depth</i> and both Latitude and Longitude are two dimensional arrays with named dimensions <i>x</i> and <i>y</i> and Corrected_Optical_Depth is a three dimensional array with named dimensions <i>Solution_3_Land</i>, <i>x</i> and <i>y</i>. The <i>csv</i> response would include four columns, one each for Latitude, Longitude and Corrected_Optical_Depth and a fourth for Solution_3_Land where the value would be the index number.
</p>
<h3><span class="mw-headline" id="Performance_and_Implementation"><span class="mw-headline-number">1.3</span> Performance and Implementation</span></h3>
<p>Performance is linear in terms of the number of granules. The response is streamed as it is built, so even very large responses use only a little memory on the server. Of course, that won't be the case on the client...
</p>
<h5><span class="mw-headline" id="Implementation"><span class="mw-headline-number">1.3.1</span> Implementation</span></h5>
<p>The interface described here is built using a Servlet that talks to the Hyrax BES - a C/C++ Unix daemon that reads and processes data building the raw DAP2/4 response objects. The Servlet builds the response objects it returns using the response objects returned by the BES. In the case of the 'zipped files' response, the BES is told one by one to subset the granules and return the result as <i>netcdf3</i>, et cetera. It streams each returned file using a <i>ZipPOutputStream</i> object from the Apache Commons set of Java libraries. In the case of the <i>csv</i> response the BES is told to return the filtered data as ASCII and the servlet uses the Java FilteredOutputStream class to strip away redundant header information from the second, ..., Nth file/granule.
</p><p>For each type of request, most of the work of subsetting the values is performed by the BES, its constraint evaluator and a small set of server functions. The server functions used for this service are:
</p>
<dl>
<dt>roi</dt>
<dd> subsetting based on indices of shared dimensions
</dd>
<dt>bbox</dt>
<dd> building bounding boxes described in array index space
</dd>
<dt>bbox_union</dt>
<dd> building bounding boxes for forming the union or intersection of two or more bounding boxes
</dd>
<dt>tabular</dt>
<dd> building a DAP Sequence from <i>N</i> arrays, where when <i>N</i> &gt; 1, each array must be a member of the same DAP4 'coverage'
</dd>
</dl>
<p>It is possible to access the essential functionality of the Aggregation Service using these functions.
</p>
<h5><span class="mw-headline" id="Design"><span class="mw-headline-number">1.3.2</span> Design</span></h5>
<p>The design of the <a href="../index.php/Use_cases_for_swath_and_time_series_aggregation" title="Use cases for swath and time series aggregation"> Aggregation Service</a> is documented as well, although some aspects of that document are old and incorrect. it may also be useful to look at the source code, which can be found on GitHub at <a rel="nofollow" class="external text" href="https://github.com/opendap/olfs">olfs</a> and <a rel="nofollow" class="external text" href="https://github.com/opendap/bes">bes</a> in the <a rel="nofollow" class="external text" href="https://github.com/OPENDAP/olfs/tree/master/src/opendap/aggregation">aggregation</a> and <a rel="nofollow" class="external text" href="https://github.com/OPENDAP/bes/tree/master/functions">functions</a> parts of those repos, respectively.
</p>
<h3><span class="mw-headline" id="Examples"><span class="mw-headline-number">1.4</span> Examples</span></h3>
<p>This section lists a number of examples of the aggregation service. We have only a handful of data on our test server, but these examples should work. Because the aggregation service is a machine interface, the examples require that use of curl and text files that contain the POST requests (except for the version operation).
</p>
<h5><span class="mw-headline" id="Version"><span class="mw-headline-number">1.4.1</span> Version</span></h5>
<dl>
<dt>Request</dt>
<dd> <a rel="nofollow" class="external free" href="http://test.opendap.org/dap/aggregation/?&amp;operation=version">http://test.opendap.org/dap/aggregation/?&amp;operation=version</a>
</dd>
</dl>
<dl>
<dt>Returns</dt>
<dd>
</dd>
</dl>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="xml source-xml"><pre class="de1">Aggregation Interface Version: 1.1
<span class="sc3"><span class="re1">&lt;?xml</span> <span class="re0">version</span>=<span class="st0">&quot;1.0&quot;</span> <span class="re0">encoding</span>=<span class="st0">&quot;UTF-8&quot;</span><span class="re2">?&gt;</span></span>
<span class="sc3"><span class="re1">&lt;response</span> <span class="re0">xmlns</span>=<span class="st0">&quot;http://xml.opendap.org/ns/bes/1.0#&quot;</span> <span class="re0">reqID</span>=<span class="st0">&quot;[ajp-bio-…&quot;</span><span class="re2">&gt;</span></span>
  <span class="sc3"><span class="re1">&lt;showVersion<span class="re2">&gt;</span></span></span>
    <span class="sc3"><span class="re1">&lt;Administrator<span class="re2">&gt;</span></span></span>support@opendap.org<span class="sc3"><span class="re1">&lt;/Administrator<span class="re2">&gt;</span></span></span>
    <span class="sc3"><span class="re1">&lt;library</span> <span class="re0">name</span>=<span class="st0">&quot;bes&quot;</span><span class="re2">&gt;</span></span>3.16.0<span class="sc3"><span class="re1">&lt;/library<span class="re2">&gt;</span></span></span>
    <span class="sc3"><span class="re1">&lt;module</span> <span class="re0">name</span>=<span class="st0">&quot;dap-server/ascii&quot;</span><span class="re2">&gt;</span></span>4.1.5<span class="sc3"><span class="re1">&lt;/module<span class="re2">&gt;</span></span></span>
    <span class="sc3"><span class="re1">&lt;module</span> <span class="re0">name</span>=<span class="st0">&quot;csv_handler&quot;</span><span class="re2">&gt;</span></span>1.1.2<span class="sc3"><span class="re1">&lt;/module<span class="re2">&gt;</span></span></span>
    <span class="sc3"><span class="re1">&lt;library</span> <span class="re0">name</span>=<span class="st0">&quot;libdap&quot;</span><span class="re2">&gt;</span></span>3.16.0<span class="sc3"><span class="re1">&lt;/library<span class="re2">&gt;</span></span></span>
…
<span class="sc3"><span class="re1">&lt;/response<span class="re2">&gt;</span></span></span></pre></div></div>
<p><br />
</p>
<h5><span class="mw-headline" id="Returning_an_Archive"><span class="mw-headline-number">1.4.2</span> Returning an Archive</span></h5>
<p><b>NB:</b> To get these examples, clone <a rel="nofollow" class="external free" href="https://github.com/opendap/olfs">https://github.com/opendap/olfs</a>, then cd to <i>resources/aggregation/tests/demo</i>. 
</p><p>The example files are also available here:
</p>
<ul>
<li><a rel="nofollow" class="external text" href="../index.php/File:D1_netcdf3_variable_subset.txt">d1_netcdf3_variable_subset.txt</a>
</li>
<li><a rel="nofollow" class="external text" href="../images/1/1e/D2_netcdf3_bbox_subset.txt">d2_netcdf3_bbox_subset.txt</a>
</li>
<li><a rel="nofollow" class="external text" href="../images/4/46/D3_csv_subset.txt">d3_csv_subset.txt</a>
</li>
<li><a rel="nofollow" class="external text" href="../images/8/88/D4_csv_subset_dim.txt">d4_csv_subset_dim.txt</a>
</li>
</ul>
<p>In the OLFS repo on github, you'll see a file named <i>resources/aggregation/tests/demo/short_names/d1_netcdf3_variable_subset.txt</i>. Here's what it looks like:
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="bash source-bash"><pre class="de1">edamame:demo jimg$ <span class="kw2">more</span> short_names<span class="sy0">/</span>d1_netcdf3_variable_subset.txt 
<span class="sy0">&amp;</span><span class="re2">operation</span>=netcdf3
<span class="sy0">&amp;</span><span class="re2">var</span>=Latitude,Longitude,Optical_Depth_Land_And_Ocean
<span class="sy0">&amp;</span><span class="re2">file</span>=<span class="sy0">/</span>data<span class="sy0">/</span>modis<span class="sy0">/</span>MOD04_L2.A2015021.0020.051.NRT.hdf
<span class="sy0">&amp;</span><span class="re2">file</span>=<span class="sy0">/</span>data<span class="sy0">/</span>modis<span class="sy0">/</span>MOD04_L2.A2015021.0025.051.NRT.hdf
<span class="sy0">&amp;</span><span class="re2">file</span>=<span class="sy0">/</span>data<span class="sy0">/</span>modis<span class="sy0">/</span>MOD04_L2.A2015021.0030.051.NRT.hdf</pre></div></div>
<p>This example shows how the DAP2 projection constraint can be given once and applied to a number of files. It's also possible to provide a unique constraint for each file.
</p><p>Each of the parameters begins with an ampersand (<i>&amp;</i>). This command, which will be sent to the service using POST, specifies the <i>netcdf3</i> response, three files, and the DAP projection constraint <i>Latitude,Longitude,Optical_Depth_Land_And_Ocean</i>. It may be that the parameter name <i>&amp;var</i> is a bit misleading since you can actually provide array subsetting there as well (but not the filtering-type DAP2/DAP4 constraints).
</p><p>To send this command to the service, use <i>curl</i> like this:
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="bash source-bash"><pre class="de1">edamame:demo jimg$ curl <span class="re5">-X</span> POST <span class="re5">-d</span> <span class="sy0">@</span>short_names<span class="sy0">/</span>d1_netcdf3_variable_subset.txt http:<span class="sy0">//</span>test.opendap.org<span class="sy0">/</span>opendap<span class="sy0">/</span>aggregation <span class="sy0">&gt;</span> d1.zip
  <span class="sy0">%</span> Total    <span class="sy0">%</span> Received <span class="sy0">%</span> Xferd  Average Speed   Time    Time     Time  Current 
                                                     Dload  Upload   Total   Spent    Left  Speed
<span class="nu0">100</span>  552k    <span class="nu0">0</span>  552k  <span class="nu0">100</span>   <span class="nu0">226</span>   305k    <span class="nu0">124</span>  <span class="nu0">0</span>:00:01  <span class="nu0">0</span>:00:01 --:--:--  305k</pre></div></div>
<p>The output of <i>curl</i> is redirected to a file (<i>d1.zip</i>) and we can list its contents
</p>
<pre>verifying that it contains the files we expect.
</pre>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="bash source-bash"><pre class="de1">edamame:demo jimg$ <span class="kw2">unzip</span> <span class="re5">-t</span> d1.zip 
Archive:  d1.zip
    testing: MOD04_L2.A2015021.0020.051.NRT.hdf.nc   OK
    testing: MOD04_L2.A2015021.0025.051.NRT.hdf.nc   OK
    testing: MOD04_L2.A2015021.0030.051.NRT.hdf.nc   OK
No errors detected <span class="kw1">in</span> compressed data of d1.zip.</pre></div></div>
<h5><span class="mw-headline" id="Returning_a_Table"><span class="mw-headline-number">1.4.3</span> Returning a Table</span></h5>
<p>In this example, a request is made for data from the same three variables from the same files, but the data are returned in a single table. This request file is in the same directory as the previous example.
</p><p>The command file is close to the same as before, but uses the <i>&amp;operation</i> or <i>csv</i> and also adds a <i>&amp;bbox</i> command, the latter provides a way to specify filtering based on latitude/longitude bounding boxes.
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="bash source-bash"><pre class="de1">edamame:demo jimg$ <span class="kw2">more</span> short_names<span class="sy0">/</span>d3_csv_subset.txt 
<span class="sy0">&amp;</span><span class="re2">operation</span>=csv
<span class="sy0">&amp;</span><span class="re2">var</span>=Latitude,Longitude,Image_Optical_Depth_Land_And_Ocean
<span class="sy0">&amp;</span><span class="re2">bbox</span>=<span class="st0">&quot;[49,Latitude,50][167,Longitude,170]&quot;</span>
<span class="sy0">&amp;</span><span class="re2">file</span>=<span class="sy0">/</span>data<span class="sy0">/</span>modis<span class="sy0">/</span>MOD04_L2.A2015021.0020.051.NRT.hdf
<span class="sy0">&amp;</span><span class="re2">file</span>=<span class="sy0">/</span>data<span class="sy0">/</span>modis<span class="sy0">/</span>MOD04_L2.A2015021.0025.051.NRT.hdf
<span class="sy0">&amp;</span><span class="re2">file</span>=<span class="sy0">/</span>data<span class="sy0">/</span>modis<span class="sy0">/</span>MOD04_L2.A2015021.0030.051.NRT.hdf</pre></div></div>
<p>The command is sent using '<i>curl</i> as before:
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="bash source-bash"><pre class="de1">edamame:demo jimg$ curl <span class="re5">-X</span> POST <span class="re5">-d</span> <span class="sy0">@</span>short_names<span class="sy0">/</span>d3_csv_subset.txt http:<span class="sy0">//</span>test.opendap.org<span class="sy0">/</span>opendap<span class="sy0">/</span>aggregation <span class="sy0">&gt;</span> d3.csv
  <span class="sy0">%</span> Total    <span class="sy0">%</span> Received <span class="sy0">%</span> Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
<span class="nu0">100</span>  <span class="nu0">4141</span>    <span class="nu0">0</span>  <span class="nu0">3870</span>  <span class="nu0">100</span>   <span class="nu0">271</span>   <span class="nu0">5150</span>    <span class="nu0">360</span> --:--:-- --:--:-- --:--:--  <span class="nu0">5153</span></pre></div></div>
<p>However, the response is now an ASCII table:
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="bash source-bash"><pre class="de1">edamame:demo jimg$ <span class="kw2">more</span> d3.csv
Dataset: function_result_MOD04_L2.A2015021.0020.051.NRT.hdf
table.Latitude, table.Longitude, table.Image_Optical_Depth_Land_And_Ocean
<span class="nu0">49.98</span>, <span class="nu0">169.598</span>, <span class="re5">-9999</span>
<span class="nu0">49.9312</span>, <span class="nu0">169.82</span>, <span class="re5">-9999</span>
<span class="nu0">49.9878</span>, <span class="nu0">169.119</span>, <span class="re5">-9999</span>
<span class="nu0">49.9423</span>, <span class="nu0">169.331</span>, <span class="re5">-9999</span>
<span class="nu0">49.8952</span>, <span class="nu0">169.548</span>, <span class="re5">-9999</span>
<span class="nu0">49.8464</span>, <span class="nu0">169.77</span>, <span class="re5">-9999</span>
<span class="nu0">49.7958</span>, <span class="nu0">169.998</span>, <span class="re5">-9999</span>
<span class="nu0">49.9897</span>, <span class="nu0">168.659</span>, <span class="re5">-9999</span>
<span class="nu0">49.9471</span>, <span class="nu0">168.862</span>, <span class="re5">-9999</span>
...</pre></div></div>
<h3><span class="mw-headline" id="Potential_Extensions_to_the_Service"><span class="mw-headline-number">1.5</span> Potential Extensions to the Service</span></h3>
<p>This service was purpose-built for the NASA CMR system, but it could be extended in several useful ways.
</p>
<ul>
<li> Support general DAP2 and DAP4 constraint expressions, including function calls (functions are used behind the scenes already)
</li>
<li> Increased parallelism.
</li>
<li> Support for the <b>tar.gz</b> return type.</var>
</li>
</ul>

</div>		<!-- end content -->
	</div>
</div></div>
</body></html>