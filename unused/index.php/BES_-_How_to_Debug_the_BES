
<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>BES - How to Debug the BES - OPeNDAP Documentation</title>
</head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-BES_-_How_to_Debug_the_BES skin-monobook action-view">
<div id="globalWrapper">
<div id="column-content"><div id="content" class="mw-body-primary" role="main">
	
	
	<h1 id="firstHeading" class="firstHeading" lang="en"><span dir="auto">BES - How to Debug the BES</span></h1>
	<div id="bodyContent" class="mw-body">
		<div id="siteSub">From OPeNDAP Documentation</div>
		<div id="contentSub"></div>
		

		<!-- start content -->
<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><div id="toc" class="toc"><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Tricks"><span class="tocnumber">1</span> <span class="toctext">Tricks</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Use_the_BESDEBUG_Macro"><span class="tocnumber">2</span> <span class="toctext">Use the BESDEBUG Macro</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="#Start_the_BES_with_Debuging_on"><span class="tocnumber">3</span> <span class="toctext">Start the BES with Debuging on</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="#Send_Commands_to_the_BES"><span class="tocnumber">4</span> <span class="toctext">Send Commands to the BES</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Tricks"><span class="mw-headline-number">1</span> Tricks</span></h2>
<ul>
<li> Set the beslistener to run in single, not multiprocess, mode. Do this in the <i>bes.conf</i> file (use the <i>BES.ProcessManagerMethod</i> parameter).
</li>
<li> Build the bes using <i>developer</i> mode (so it won't need to be root, among other things). Do this with <i>./configure --enable-developer</i>
</li>
</ul>
<h2><span class="mw-headline" id="Use_the_BESDEBUG_Macro"><span class="mw-headline-number">2</span> Use the BESDEBUG Macro</span></h2>
<p>Use the macro <i>BESDEBUG</i> defined in <i>BESDebug.h</i>.
</p><p>Set the macro's 'context' as "bes" (nominally, or you can make up whatever you want) and then use the "cerr &lt;&lt; "text: " &lt;&lt; var &lt;&lt; endl" style output <i>except</i> that you should leave off the initial "cerr &lt;&lt;" and start with the first argument of the stuff to be output - the marco will take care of getting the output sink and using the output operator.
</p><p>Example:
</p>
<pre>#include &lt;BESDebug.h&gt;
...
BESDEBUG( "h4", "File Id:" &lt;&lt; _file_id &lt;&lt; endl);
</pre>
<p>Notes:
</p>
<ol>
<li> You'll need to include the BES_DAP_LIBS when you link an executable or a libtool library and you'll need BES_CPPFLAGS when you compile (for libdap code)
</li>
<li> The trailing semicolon is not needed but including it makes automatic code indent software (eclipse, emacs, ...) much happier.
</li>
</ol>
<h2><span class="mw-headline" id="Start_the_BES_with_Debuging_on"><span class="mw-headline-number">3</span> Start the BES with Debuging on</span></h2>
<p>Use the <i>-d</i> option to <i>besctl</i> and give <i>-d</i> one argument, a string, with two parts: "&lt;output sink&gt;,&lt;context&gt;". For example, 
</p>
<pre>besctl start -d "cerr,bes"
</pre>
<p>would start up <i>beslistener</i> with the <i>bes</i> debug context active and write all the debugging info to <i>cerr</i>, which is standard error. You can provide several contexts. For example, you could say
</p>
<pre>besctl start -d "./bes.dbg,bes,nc"
</pre>
<p>This will send debug statements to the file ./bes.dbg for the context bes and nc (netcdf_handler). You can also specify the context <i>all</i>, that will send debugging statements for all context.
</p><p>The BES has debug statements for <i>bes</i>, <i>ppt</i> and <i>server</i>. Each of the modules that you install will also have debug context. And, you can create your own context when writing your own module. In your Module class you would register your context, so as to be available with the help command, by using the following code:
</p>
<pre>
    BESDebug::Register( &quot;&lt;context&gt;&quot; )&#160;;
</pre>
<p>Where context is the string that will be used for your module's debug context. For example, nc for the netcdf_handler.
</p><p>To see what debug context is available, when you start the BES using <i>besctl</i>, use the help option:
</p>
<pre>besctl help
</pre>
<pre>
BES install directory: /Users/westp/opendap/opendap
BES configuration file: /Users/westp/opendap/opendap/etc/bes/bes.conf
Developer Mode: not testing if BES is run by root
/Users/westp/opendap/opendap/bin/beslistener: -i &lt;INSTALL_DIR&gt; -c &lt;CONFIG&gt; -d &lt;STREAM&gt; -h -p &lt;PORT&gt; -s -u &lt;UNIX_SOCKET&gt; -v

-i back-end server installation directory
-c use back-end server configuration file CONFIG
-d set debugging to cerr or &lt;filename&gt;
-h show this help screen and exit
-p set port to PORT
-s specifies a secure server using SLL authentication
-u set unix socket to UNIX_SOCKET
-v echos version and exit

Debug help:

Set on the command line with -d &quot;file_name|cerr,[-]context1,[-]context2,...,[-]contextn&quot;
  context with dash (-) in front will be turned off

Possible context:
  ascii: off
  bes: off
  dap: off
  ff: off
  h4: off
  h5: off
  nc: off
  ppt: off
  server: off
  usage: off
  www: off

USAGE: besctl (help|start|stop|restart|status) [options]
where [options] are passed to besdaemon; see besdaemon -h
</pre>
<h2><span class="mw-headline" id="Send_Commands_to_the_BES"><span class="mw-headline-number">4</span> Send Commands to the BES</span></h2>
<p>Now run some commands using bescmdln. You should see debugging being output to either cerr, or the file you specified when you started the BES. Here's an example:
</p>
<pre>
BESClient&gt; set context dap_format to dap2;
BESClient&gt; set container in catalog values c,/data/nc/fnoc1.nc;
BESClient&gt; define d as c;
BESClient&gt; get das for d;
Attributes {
    u {
        String units &quot;meter per second&quot;;
        String long_name &quot;Vector wind eastward component&quot;;
</pre>




</div>
				<!-- end content -->
				<div class="visualClear"></div>
	</div>
</div></div>
</body></html>