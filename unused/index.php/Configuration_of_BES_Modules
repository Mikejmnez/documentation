
<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>Configuration of BES Modules - OPeNDAP Documentation</title>
</head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Configuration_of_BES_Modules skin-monobook action-view">
<div id="globalWrapper">
<div id="column-content"><div id="content" class="mw-body-primary" role="main">
	
	
	<h1 id="firstHeading" class="firstHeading" lang="en"><span dir="auto">Configuration of BES Modules</span></h1>
	<div id="bodyContent" class="mw-body">
		<div id="siteSub">From OPeNDAP Documentation</div>
		<div id="contentSub"></div>
		

		<!-- start content -->
<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><p>Under construction 11/20/14
</p><p>Use the <i>modules</i> branch of <i>bes</i> to automatically build modules.
</p><p>Tis pages describes how to take an existing BES module and incorporate it into the <i>modules</i> branch of the BES so that it can build both as a standalone module and as part of an ensemble of modules built using a single <i>configure</i> script and <i>Makefile.</i> The first step is to add the module as a git submodule and then make a handful of edits to the bes and module's configure.ac and Makefile.am files. The changes are minimal and the resulting module code will build both as a standalone module and as part of the 'combined modules' build. The BES will also build as a standalone program, and because of the way git's submodules work, it's easy to checkout just the BES with the baggage of the modules.
</p>
<div id="toc" class="toc"><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#To_add_a_new_handler_to_the_BES_repo_on_github"><span class="tocnumber">1</span> <span class="toctext">To add a new handler to the BES repo on github</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Changes_to_the_module.27s_Makefile.am"><span class="tocnumber">2</span> <span class="toctext">Changes to the module's <i>Makefile.am</i></span></a></li>
<li class="toclevel-1 tocsection-3"><a href="#Changes_to_the_module.27s_configure.ac"><span class="tocnumber">3</span> <span class="toctext">Changes to the module's <i>configure.ac</i></span></a></li>
<li class="toclevel-1 tocsection-4"><a href="#Additions_to_the_module.27s_files"><span class="tocnumber">4</span> <span class="toctext">Additions to the module's files</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="#Changes_to_the_BES.27_configure.ac"><span class="tocnumber">5</span> <span class="toctext">Changes to the BES' <i>configure.ac</i></span></a></li>
<li class="toclevel-1 tocsection-6"><a href="#Changes_to_the_BES.27_modules.2FMakefile.am"><span class="tocnumber">6</span> <span class="toctext">Changes to the BES' <i>modules/Makefile.am</i></span></a></li>
<li class="toclevel-1 tocsection-7"><a href="#Pushing_the_new_branch_to_the_remote_repo"><span class="tocnumber">7</span> <span class="toctext">Pushing the new branch to the remote repo</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="#Git_Hacks"><span class="tocnumber">8</span> <span class="toctext">Git Hacks</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="To_add_a_new_handler_to_the_BES_repo_on_github"><span class="mw-headline-number">1</span> To add a new handler to the BES repo on github</span></h2>
<p>The following assumes that you have cloned the BES repo from github and are on the <i>master</i> branch.
</p><p>For each module to be added:
</p>
<dl>
<dt>check it out in the <i>bes/modules</i> directory</dt>
<dd> git submodule add &lt;github repo url&gt;
</dd>
<dt>make a <i>modules</i> branch</dt>
<dd> cd &lt;module dir&gt;; git branch modules
</dd>
<dt>switch to the new branch</dt>
<dd> git checkout modules
</dd>
<dt>set the <i>modules</i> branch in the <i>.gitmodules</i> file</dt>
<dd> emacs .gitmodules; <i>branch = master</i>
</dd>
</dl>
<p>Now follow the recipe outlined in the following sections of the page...
</p>
<h2><span class="mw-headline" id="Changes_to_the_module.27s_Makefile.am"><span class="mw-headline-number">2</span> Changes to the module's <i>Makefile.am</i></span></h2>
<p>Hack the module's Makefile.am so that CPPFLAGS and LIBADD reference the correct places given that the code will build w/o bes first being installed
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="bash source-bash"><pre class="de1"><span class="kw1">if</span> DAP_MODULES
AM_CPPFLAGS = -I$<span class="br0">&#40;</span>top_srcdir<span class="br0">&#41;</span><span class="sy0">/</span>dispatch -I$<span class="br0">&#40;</span>top_srcdir<span class="br0">&#41;</span><span class="sy0">/</span>dap $<span class="br0">&#40;</span>DAP_CFLAGS<span class="br0">&#41;</span>
LIBADD = $<span class="br0">&#40;</span>DAP_SERVER_LIBS<span class="br0">&#41;</span> $<span class="br0">&#40;</span>DAP_CLIENT_LIBS<span class="br0">&#41;</span>
<span class="kw1">else</span>
AM_CPPFLAGS = $<span class="br0">&#40;</span>BES_CPPFLAGS<span class="br0">&#41;</span> <span class="co0"># or wahtever was set here or in ..._CPPFLAGS</span>
LIBADD = $<span class="br0">&#40;</span>BES_DAP_LIBS<span class="br0">&#41;</span>      <span class="co0"># and ..._LIBADD</span>
endif</pre></div></div>
<p>then
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="bash source-bash"><pre class="de1"><span class="co0"># comment this out to force use of AM_CPPFLAGS libcsv_module_la_CPPFLAGS = ...</span>
libcsv_module_la_LIBADD = $<span class="br0">&#40;</span>LIBADD<span class="br0">&#41;</span></pre></div></div>
<p>For unit-test code you may need to add some of the bes code to the link line. To do that, use the makefile variables:
</p>
<ul>
<li> BES_DISPATCH_LIB
</li>
<li> BES_XML_CMD_LIB
</li>
<li> BES_PPT_LIB
</li>
<li> BES_EXTRA_LIBS
</li>
</ul>
<p>where you almost certainly want to use $BES_DISPATCH_LIB $BES_EXTRA_LIBS
</p><p>Look for a line like 
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="bash source-bash"><pre class="de1">xml_data_handler.conf: xml_data_handler.conf.in config.status</pre></div></div>
<p>and add <i>$(top_srcdir)/</i> in front of <i>config.status</i>
</p><p>If the module uses <i>besstandalone,</i> add <i>bes.conf.modules.in</i> to the EXTRA_DIST variable in the <i>Makefile.am.</i>
</p>
<h2><span class="mw-headline" id="Changes_to_the_module.27s_configure.ac"><span class="mw-headline-number">3</span> Changes to the module's <i>configure.ac</i></span></h2>
<p>Add "AM_CONDITIONAL([DAP_MODULES], [false])" to the modules configure.ac
</p><p>If the module uses autotest to run a set of regression tests using <i>besstandalone,</i> add generation of <i>bes.conf</i> from <i>bes.conf.in.</i> You'll also need to make corresponding changes in other places, documented on this page.
</p>
<h2><span class="mw-headline" id="Additions_to_the_module.27s_files"><span class="mw-headline-number">4</span> Additions to the module's files</span></h2>
<p>Add <i>bes.conf.modules.in</i>. The key parts of this file that are different from the existing <i>bes.conf.in</i> are:
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="bash source-bash"><pre class="de1">BES.modules=dap,cmd,csv
BES.module.dap=<span class="sy0">@</span>abs_top_builddir<span class="sy0">@/</span>dap<span class="sy0">/</span>.libs<span class="sy0">/</span>libdap_module.so
BES.module.cmd=<span class="sy0">@</span>abs_top_builddir<span class="sy0">@/</span>xmlcommand<span class="sy0">/</span>.libs<span class="sy0">/</span>libdap_xml_module.so
BES.module.csv=<span class="sy0">@</span>abs_top_builddir<span class="sy0">@/</span>modules<span class="sy0">/</span>csv_handler<span class="sy0">/</span>.libs<span class="sy0">/</span>libcsv_module.so
&#160;
BES.Catalog.catalog.RootDirectory=<span class="sy0">@</span>abs_top_srcdir<span class="sy0">@/</span>modules<span class="sy0">/</span>csv_handler
BES.Data.RootDirectory=<span class="sy0">/</span>dev<span class="sy0">/</span>null</pre></div></div>
<p>Note how the BES libraries are referenced (<i>@abs_top_builddir@/dap/.libs/...</i> ...) and how the <i>BES.Catalog.catalog.RootDirectory</i> is specified.
</p><p>Add a <i>.gitignore</i> 
</p><p>Make sure to add the <i>bes.conf.modules.in</i> file to git.
</p>
<h2><span class="mw-headline" id="Changes_to_the_BES.27_configure.ac"><span class="mw-headline-number">5</span> Changes to the BES' <i>configure.ac</i></span></h2>
<p>Add files to be build by BES' configure:
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="bash source-bash"><pre class="de1">    AC_CONFIG_FILES<span class="br0">&#40;</span><span class="br0">&#91;</span>
    ...
    modules<span class="sy0">/</span>dap-server<span class="sy0">/</span>Makefile
    modules<span class="sy0">/</span>dap-server<span class="sy0">/</span>asciival<span class="sy0">/</span>Makefile
    modules<span class="sy0">/</span>dap-server<span class="sy0">/</span>asciival<span class="sy0">/</span>unit-tests<span class="sy0">/</span>Makefile
    modules<span class="sy0">/</span>dap-server<span class="sy0">/</span>asciival<span class="sy0">/</span>unit-tests<span class="sy0">/</span>test_config.h
    modules<span class="sy0">/</span>dap-server<span class="sy0">/</span>www-interface<span class="sy0">/</span>Makefile
&#160;
<span class="xtra ln-xtra">    modules<span class="sy0">/</span>dap-server<span class="sy0">/</span>bes-testsuite<span class="sy0">/</span>bes.conf:modules<span class="sy0">/</span>dap-server<span class="sy0">/</span>bes-testsuite<span class="sy0">/</span>bes.conf.modules.in</span>    ...<span class="br0">&#93;</span><span class="br0">&#41;</span>
&#160;
    AC_CONFIG_FILES<span class="br0">&#40;</span><span class="br0">&#91;</span>modules<span class="sy0">/</span>dap-server<span class="sy0">/</span>www-interface<span class="sy0">/</span>js2h.pl<span class="br0">&#93;</span>, <span class="br0">&#91;</span><span class="kw2">chmod</span> +x modules<span class="sy0">/</span>dap-server<span class="sy0">/</span>www-interface<span class="sy0">/</span>js2h.pl<span class="br0">&#93;</span><span class="br0">&#41;</span></pre></div></div>
<p>using the trusty cut and paste and prefixing them all with <i>modules/&lt;dir name&gt;.</i> Put that in the the AM_COND_IF that's at the <i>configure.ac</i> file. <b>NB:</b> The highlighted line show how to make autoconf use a template with an arbitrary name (<i>bes.conf</i> is made from <i>bes.conf.modules.in</i> instead of <i>bes.conf.in</i> in this case).
</p><p>If the module uses a m4 macro defined in a file in its conf directory, copy that to the bes/conf dir. You then should add a call to that macro to the bes' configure.ac script mirroring the call in the modules's configure.ac script. If the macro looks for a library, etc., that will possibly/likely be in the hyrax-dependencies bundle, hack the macro so that it takes an extra parameter that is the 'master deps' directory. Look at a macro like the ones for hdf5 or netcdf to see how to do that easily. If the module looks for a library using autoconf calls in line (in configure.ac), just copy those in, hacking as needed. Most of the handler-specific code in configure.ac is grouped toward the end of the script.
</p>
<h2><span class="mw-headline" id="Changes_to_the_BES.27_modules.2FMakefile.am"><span class="mw-headline-number">6</span> Changes to the BES' <i>modules/Makefile.am</i></span></h2>
<p>Given the code is in <i>modules/&lt;dir name&gt;,</i> add <i>&lt;dir name&gt;</i> to the <i>modules/Makefile.am</i> as a subdir.
</p>
<h2><span class="mw-headline" id="Pushing_the_new_branch_to_the_remote_repo"><span class="mw-headline-number">7</span> Pushing the new branch to the remote repo</span></h2>
<dl>
<dt>double check the <i>.gitignore</i> file and that you have <i>git add</i> the <i>bes.conf.modules.in</i> file</dt>
<dd> git status
</dd>
<dt>commit changes to the local repo</dt>
<dd> git commit -a
</dd>
<dt>push those local changes to the remote repo and set this new branch to be the one the code tracks</dt>
<dd> git push --set-upstream origin modules
</dd>
<dt>check the bes and commit there</dt>
<dd> git commit -a
</dd>
<dt>and push those changes (the upstream repo was already set)</dt>
<dd> git push 
</dd>
</dl>
<h2><span class="mw-headline" id="Git_Hacks"><span class="mw-headline-number">8</span> Git Hacks</span></h2>
<p>To manage an empty dir in git, put a .gitignore file in it that ignores everything except itself:
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="bash source-bash"><pre class="de1"><span class="co0"># Ignore everything in this directory; this hack enables git to track</span>
<span class="co0"># and fetch, etc., an otherwise empty directory.</span>
<span class="sy0">*</span>
<span class="co0"># Except this file</span>
<span class="sy0">!</span>.gitignore</pre></div></div>




</div>
				<!-- end content -->
				<div class="visualClear"></div>
	</div>
</div></div>
</body></html>