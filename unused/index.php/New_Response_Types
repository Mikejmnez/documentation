
<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>New Response Types - OPeNDAP Documentation</title>
</head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-New_Response_Types skin-monobook action-view">
<div id="globalWrapper">
<div id="column-content"><div id="content" class="mw-body-primary" role="main">
	
	
	<h1 id="firstHeading" class="firstHeading" lang="en"><span dir="auto">New Response Types</span></h1>
	<div id="bodyContent" class="mw-body">
		<div id="siteSub">From OPeNDAP Documentation</div>
		<div id="contentSub"></div>
		

		<!-- start content -->
<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><p>There are already many response types that come with the out-of-the-box BES. For example, the response to a 'show help;' request, or the response to a 'show version;' request. Both of these responses are inforamtional responses.
</p><p>With a Dap-enabled BES you get respons types DAS, DDS, DataDDS, and DDX.
</p><p>All of these response types are handled by a BESResponseHandler object. In the case of the 'show help;' request, there is a BESHelpResponseHandler object. In the case of the 'show version;' response, there is a BESVersionResponseHandler object. And, in the case of the more complex responses like DAS, there is a BESDASResponseHandler object.
</p><p>The response handlers know how to create the response object, an informational response object BESInfo or the more complex type of response object BESDASResponse which points to a DAS object. They also know 'how' to populate the response objects, but they don't necessarily populate them. The response handlers also know how to transmit this response object by calling the appropriate transmit method on the <a href="../index.php?title=New_Transmitters&amp;action=edit&amp;redlink=1" class="new" title="New Transmitters (page does not exist)">BESTransmitter objects</a>.
</p><p>Other projects have added new response types to the BES. These response types present the data in different ways. For example, in the <a rel="nofollow" class="external text" href="http://cedarweb.hao.ucar.edu">CEDARWeb project</a> new responses were added to present the user with a flat view of the data (flat), a tabbed view of the data (tab), and a cedar informational response (info). How would you like your data to be viewed?
</p><p>If you specified new response types in the last question to the <a href="../index.php/Create_BES_Module" title="Create BES Module" class="mw-redirect">besCreateModule script</a> then for each one of those new response types you will need to modify the source file &lt;response_type&gt;ResponseHandler.cc. This is where you will tell the system how to create the response object and how it will be transmitted.
</p><p>Let me make sure that you understand the difference here. The <a href="../index.php?title=New_Request_Handlers&amp;action=edit&amp;redlink=1" class="new" title="New Request Handlers (page does not exist)">request handlers</a> will populate the response object whereas the response handler knows how to create the response object (create only, not populate) and 'how' the response object will be populated, such as calling a specific <a href="../index.php?title=New_Request_Handlers&amp;action=edit&amp;redlink=1" class="new" title="New Request Handlers (page does not exist)">request/data handler</a>, or all of the <a href="../index.php?title=New_Request_Handlers&amp;action=edit&amp;redlink=1" class="new" title="New Request Handlers (page does not exist)">request handlers</a>, to populate the response object, or handling it itself (it can do some populating).
</p><p>For example, for a DAS response, the response handler creates a DAS response object and then for each container specified in the request the response handler calls the appropriate build function in the request handler that handles that type of container. A different example is the help response. In this case, for each type of data handled by this server (for each request handler), the response handler will call the help build function for that request handler. By default, your new module handles help and version requests.
</p><p>The response handler also knows how to transmit the response object. For example, the DAS response handler knows to call the send_das method on the <a href="../index.php?title=New_Transmitters&amp;action=edit&amp;redlink=1" class="new" title="New Transmitters (page does not exist)">transmitter object</a> that is passed to the transmit method. This way we can create different ways to transmit the data. For example, transmitting html data to a browser, or transmitting binary data in xdr format, or transmitting plain text data. You can create <a href="../index.php?title=New_Transmitters&amp;action=edit&amp;redlink=1" class="new" title="New Transmitters (page does not exist)">new transmitter classes</a> with a unique name and specify that you want a response transmitted using your transmitter using that unique name. In your request you would say 'return as &lt;unique_name&gt;'.
</p>



</div>
				<!-- end content -->
				<div class="visualClear"></div>
	</div>
</div></div>
</body></html>