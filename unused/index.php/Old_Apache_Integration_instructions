
<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>Old Apache Integration instructions - OPeNDAP Documentation</title>
</head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Old_Apache_Integration_instructions skin-monobook action-view">
<div id="globalWrapper">
<div id="column-content"><div id="content" class="mw-body-primary" role="main">
	
	
	<h1 id="firstHeading" class="firstHeading" lang="en"><span dir="auto">Old Apache Integration instructions</span></h1>
	<div id="bodyContent" class="mw-body">
		<div id="siteSub">From OPeNDAP Documentation</div>
		<div id="contentSub"></div>
		

		<!-- start content -->
<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><p><font color="red">These are old instructions for integrating Apache and Tomcat.</font> If you're working with Apache 2.2 or newer, see <a href="../index.php/Hyrax_-_Apache_Integration" title="Hyrax - Apache Integration">Hyrax - Apache Integration</a>.
</p>
<div id="toc" class="toc"><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Overview"><span class="tocnumber">1</span> <span class="toctext">Overview</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="#mod_jk"><span class="tocnumber">1.1</span> <span class="toctext">mod_jk</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="#mod_rewrite"><span class="tocnumber">1.2</span> <span class="toctext">mod_rewrite</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-4"><a href="#Install_Software_Components"><span class="tocnumber">2</span> <span class="toctext">Install Software Components</span></a>
<ul>
<li class="toclevel-2 tocsection-5"><a href="#Install_Hyrax"><span class="tocnumber">2.1</span> <span class="toctext">Install Hyrax</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="#Install_mod_jk"><span class="tocnumber">2.2</span> <span class="toctext">Install mod_jk</span></a>
<ul>
<li class="toclevel-3 tocsection-7"><a href="#OS-X_Tip"><span class="tocnumber">2.2.1</span> <span class="toctext">OS-X Tip</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-8"><a href="#Install_mod_rewrite"><span class="tocnumber">2.3</span> <span class="toctext">Install mod_rewrite</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-9"><a href="#Configure_Software_Components"><span class="tocnumber">3</span> <span class="toctext">Configure Software Components</span></a>
<ul>
<li class="toclevel-2 tocsection-10"><a href="#Configure_Tomcat"><span class="tocnumber">3.1</span> <span class="toctext">Configure Tomcat</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="#Configure_mod_jk"><span class="tocnumber">3.2</span> <span class="toctext">Configure mod_jk</span></a>
<ul>
<li class="toclevel-3 tocsection-12"><a href="#workers.properties_file"><span class="tocnumber">3.2.1</span> <span class="toctext">workers.properties file</span></a></li>
<li class="toclevel-3 tocsection-13"><a href="#httpd.conf"><span class="tocnumber">3.2.2</span> <span class="toctext">httpd.conf</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-14"><a href="#Preserving_old_DAP.2FDODS_data_URL.27s"><span class="tocnumber">4</span> <span class="toctext">Preserving old  DAP/DODS data URL's</span></a>
<ul>
<li class="toclevel-2 tocsection-15"><a href="#mod_rewrite_2"><span class="tocnumber">4.1</span> <span class="toctext">mod_rewrite</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-16"><a href="#Apache_AddEncoding_directives"><span class="tocnumber">5</span> <span class="toctext">Apache AddEncoding directives</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Overview"><span class="mw-headline-number">1</span> Overview</span></h2>
<p>If you installing a DAP server for the first time, or if you are not concerned about the URL's for your data changing when you install Hyrax, then just run Tomcat as a standalone server. It can even be configured to operate on port 80, just like Apache. If however you want to 
</p>
<ul>
<li> Keep your existing data access URL's intact
</li>
<li> Use Apache security ( SSL authentication etc.) from within Tomcat
</li>
<li> Work with the load balancing features found in Apache and Tomcat
</li>
<li> Block direct access to Hyrax/Tomcat via a firewall and Use Apache to manage access.
</li>
</ul>
<p>Then, read on.
</p><p>Many people deploying Hyrax have been using previous versions of the OPeNDAP servers with their data. These OPeNDAP servers required the Apache web server and utilized CGI to deliver their functionality. This is no longer the case, as Hyrax is a Java servlet designed to run in conjunction with Tomcat. However many OPeNDAP administrators may wish to keep the URL hierarchies of their existing systems unchanged and simply replace their existing implementation of the OPeNDAP server with the new server. To this end Tomcat needs to be integrated with the Apache installation. The directions here offer methods for integrating Hyrax with Apache version 2.x. If you are using earlier versions of Apache (1.x or older) you might wish to consider upgrading Apache to a more current version (version 2.x really is better...), otherwise these instructions may or may not be helpful.
</p><p>There are 2 basic steps to integrating Hyrax (and Tomcat) with Apache and Tomcat.  The first step is to integrate Tomcat with Apache using the <a rel="nofollow" class="external text" href="http://tomcat.apache.org/connectors-doc/index.html">Apache Tomcat Connector</a>, the second step is to map your old OPeNDAP (or even DODS) URLs to the new service using the Apache rewrite module (mod_rewrite).
</p><p>Tomcat must be running and listening on a port (which one depends on how you set things up) for it to interact with Apache.
</p>
<h3><span class="mw-headline" id="mod_jk"><span class="mw-headline-number">1.1</span> mod_jk</span></h3>
<p>Most discussions of integrating Tomcat and Apache start (and often end with) an Apache module called mod_jk, which allows Tomcat to work as part of Apache. However, mod_jk is generally not installed by default with Apache (while the rewrite and proxy modules are) so you will need to get (possibly compile) and install mod_jk .
</p>
<h3><span class="mw-headline" id="mod_rewrite"><span class="mw-headline-number">1.2</span> mod_rewrite</span></h3>
<p>The simplest method for integrating Tomcat with Apache while preserving preexisting URL hierarchies is to use a mod_rewrite to map your old data URL's into the new service. 
</p><p><br />
</p>
<hr />
<hr />
<hr />
<h2><span class="mw-headline" id="Install_Software_Components"><span class="mw-headline-number">2</span> Install Software Components</span></h2>
<h3><span class="mw-headline" id="Install_Hyrax"><span class="mw-headline-number">2.1</span> Install Hyrax</span></h3>
<p>Install Hyrax as described in the <a href="../index.php/Hyrax_-_Installation_Instructions" title="Hyrax - Installation Instructions"> installation instructions</a>. No matter how you want things to end up you have to do this first.
</p>
<h3><span class="mw-headline" id="Install_mod_jk"><span class="mw-headline-number">2.2</span> Install mod_jk</span></h3>
<p><b>Before proceeding make sure you have installed the <i>mod_jk</i> library in your Apache <i>modules</i> directory.</b>
Please read and follow the <a rel="nofollow" class="external text" href="http://tomcat.apache.org/connectors-doc/index.html">Apache instructions to install mod_jk</a> into your instance of Apache.
</p>
<h5><span class="mw-headline" id="OS-X_Tip"><span class="mw-headline-number">2.2.1</span> OS-X Tip</span></h5>
<p>If you end up building mod_jk from source for an installation on OS-X 10.5.x (Leopard) you may find that the configure script fails to correctly detect the system architecture. This will cause Apache to complain when you try to use mod_jk:
</p>
<dl>
<dd><i>httpd: Syntax error on line 512 of /private/etc/apache2/httpd.conf: Cannot load /usr/libexec/apache2/mod_jk.so into server: dlopen(/usr/libexec/apache2/mod_jk.so, 10): no suitable image found.  Did find:\n\t/usr/libexec/apache2/mod_jk.so: mach-o, but wrong architecture</i>
</dd>
</dl>
<p>This can be cured by adding the architecture designation via a compiler flags switch on the configure script:
</p>
<dl>
<dd> <i>./configure CFLAGS="-arch x86_64" ...</i>
</dd>
</dl>
<p>(Thanks to: <a rel="nofollow" class="external text" href="http://blog.lo-fi.net/2007/10/leopard-for-web-developer-installing.html">lo-fi</a> for the thread with the tip!)
</p>
<h3><span class="mw-headline" id="Install_mod_rewrite"><span class="mw-headline-number">2.3</span> Install mod_rewrite</span></h3>
<p>Depending on your Apache installation you may need to rebuild/compile Apache to enable <i>rewrite</i>. You should first look at the <i>http.conf</i> configuration file. Find the <i>LoadModule</i> directives and look for the lines that load the proxy and rewrite modules. They should look something like this:
</p>
<pre>LoadModule rewrite_module modules/mod_rewrite.so
</pre>
<p>If you see the module loaded then you're set to go, skip to the next section.
</p><p>If not then you will probably need to compile Apache from source and enable the rewrite and proxy modules.
</p>
<ol>
<li>Make sure you have the Apache source.
</li>
<li>Run the Apache configure script with the --enable-rewrite and --enable-proxy switches. Minimally your configure command should look like this: <br /><br /><code>./configure --enable-rewrite --enable-proxy</code><br /><br />
</li>
<li>(Re)compile.
</li>
<li>(Re)install.
</li>
</ol>
<hr />
<hr />
<hr />
<h2><span class="mw-headline" id="Configure_Software_Components"><span class="mw-headline-number">3</span> Configure Software Components</span></h2>
<h3><span class="mw-headline" id="Configure_Tomcat"><span class="mw-headline-number">3.1</span> Configure Tomcat</span></h3>
<p>Most distributions of Tomcat come with the AJP connector enabled. You should check your instance of Tomcat and confirm this.
</p><p>Look in the Tomcat <i>server.xml</i> file to confirm the enablement of the AJP 1.3 connector.  Inside of <i>$CATALINA_HOME/conf/server.xml</i> you may need to uncomment (or even add) the AJP connector definition inside of the service named Catalina:
</p>
<pre>
    &lt;Service name=&quot;Catalina&quot;&gt;
    .
    .
    .
    &lt;!-- Define an AJP 1.3 Connector on port 8009 --&gt;
    &lt;Connector port=&quot;8009&quot;
    enableLookups=&quot;false&quot; redirectPort=&quot;8443&quot; protocol=&quot;AJP/1.3&quot; /&gt;
    .
    .
    .
    &lt;/Service&gt;
</pre>
<h3><span class="mw-headline" id="Configure_mod_jk"><span class="mw-headline-number">3.2</span> Configure mod_jk</span></h3>
<p>The Apache Tomcat Connector (aka mod_jk) has a large list of features (such as load balancing options) that are beyond the scope of this discussion. We will review a simple configuration to get things started. 
</p>
<h4><span class="mw-headline" id="workers.properties_file"><span class="mw-headline-number">3.2.1</span> workers.properties file</span></h4>
<p>Mod_jk uses a <b>workers.properties</b> file that defines the workers that are connecting to Tomcat. Here is a minimum example of a workers.properties file for Hyrax:
</p>
<pre># Define 1 real worker
worker.list=hyrax
#
# Set properties for hyrax worker
#
# Define it as an AJP1.3 protocol worker.
worker.hyrax.type=ajp13
# Hostname or IP address for the tomcat instance that is running Hyrax
worker.hyrax.host=localhost
# Define the port for the AJP connector for the Tomcat instance
worker.hyrax.port=8009
</pre>
<p>Remember - the <i>workers.properties</i> file must direct your mod_jk worker to the AJP port being used by your Tomcat instance as defined in the  <i>$CATALINA_HOME/conf/server.xml</i> file. This is typically NOT  port 8080 but port 8009.
</p><p>The workers.properties can be placed anywhere on the Apache host system, but is typically located in <i>/etc/httpd/conf/workers.properties</i>
</p>
<h4><span class="mw-headline" id="httpd.conf"><span class="mw-headline-number">3.2.2</span> httpd.conf</span></h4>
<p>Once you have saved the workers.properties file you will need to edit the Apache configuration, http.conf. The httpd.conf file is typically located in one of:
</p>
<ul>
<li> /etc/httpd/conf/
</li>
<li> /etc/httpd2/conf/
</li>
<li> /usr/local/apache/conf/
</li>
<li> /etc/apache2/ (on my OS-X 10.5 system)
</li>
</ul>
<p>At the bottom of <b>httpd.conf</b> you will need to add the following, localized to you specific system:
</p>
<pre>   # Load mod_jk module. This location was determined when you installed mod_jk 
   LoadModule jk_module   <i>location/of/</i>mod_jk.so
   # Where to find workers.properties
   JkWorkersFile /etc/httpd/conf/mod_jk/workers.properties
   # Where to put jk shared memory
   JkShmFile     /var/log/httpd/mod_jk.shm
   # Where to put jk logs
   JkLogFile     /var/log/httpd/mod_jk.log
   # Set the jk log level [debug/error/info]
   JkLogLevel    info
   # Select the timestamp log format
   JkLogStampFormat "[%a&#160;%b&#160;%d&#160;%H:%M:%S&#160;%Y] "
   # Send servlet for context /opendap to worker named hyrax
   JkMount  /opendap* hyrax
</pre>
<ul>
<li>You may not need to the line:
</li>
</ul>
<dl>
<dd><dl>
<dd> <tt>LoadModule jk_module   <i>location/of/</i>mod_jk.so<i></tt></i>
</dd>
</dl>
</dd>
<dd>If it already exists elsewhere in httpd.conf
</dd>
</dl>
<ul>
<li> The last line of the <i>mod_jk</i> configuration:
</li>
</ul>
<pre>   JkMount  /opendap/* hyrax
</pre>
<dl>
<dd> Maps all incoming requests whose local URL matches <b>opendap/*</b> to the <i>hyrax</i> worker defined in the <b>workers.properties</b> file.
</dd>
</dl>
<p><br />
This should complete the configuration of mod_jk. Restart Apache (<i>apachectl -k restart</i>) and see if in fact hitting your Apache server at the opendap context brings you to your Hyrax service:
</p>
<dl>
<dd> http://my.host/opendap/
</dd>
</dl>
<p>If not then you will need to trouble shoot your mod_jk installation and configuration.
</p>
<hr />
<hr />
<hr />
<h2><span class="mw-headline" id="Preserving_old_DAP.2FDODS_data_URL.27s"><span class="mw-headline-number">4</span> Preserving old  DAP/DODS data URL's</span></h2>
<p>Using the Apache rewrite module (mod_rewrite) we can map olds data URL's that were serviced by early versions of the DAP server to the new Hyrax installation.
</p>
<h3><span class="mw-headline" id="mod_rewrite_2"><span class="mw-headline-number">4.1</span> mod_rewrite</span></h3>
<p><b>Advice</b>: <i>If you are not familiar with <a rel="nofollow" class="external text" href="http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html">Apache mod_rewrite go read about it now</a>, before you do anything else.</i>
</p><p>Once you have installed Apache with the <i>rewrite</i> module (mod_rewrite) enabled you will need to edit Apache's httpd.conf file. Add the following lines:
</p>
<pre>
    # Enable the rewrite module 
    RewriteEngine on
    # Target it's logging somewhere useful 
    RewriteLog /var/log/httpd/rewrite.log
    # Turn on logging (Set to 0 to disable) 
    RewriteLogLevel 2

    # Uses a reverse proxy to enable mapping old OPeNDAP URL's to Tomcat.
    RewriteRule ^/cgi-bin/nph-dods(.*) /opendap/$1 [P]
</pre>
<p>Assuming that your old OPeNDAP server was accessed via <i><a rel="nofollow" class="external free" href="http://your.server/cgi-bin/nph-dods/">http://your.server/cgi-bin/nph-dods/</a></i> this will map it to the AJP Connector (mod_jk) that is tied (via the <i>hyrax</i> worker defined in the <b>workers.properties</b> file) to the Hyrax service running in the Tomcat engine. You will probably need to rewrite rule to suit your previous server configuration. If you used <i>Alias</i> or <i>AliasMatch</i> with your old server, add more <i>RewriteRule</i> directives to get that same behavior.
</p><p><br />
</p>
<hr />
<hr />
<hr />
<h2><span class="mw-headline" id="Apache_AddEncoding_directives"><span class="mw-headline-number">5</span> Apache AddEncoding directives</span></h2>
<p><b>Note</b>: If you have <i>AddEncoding</i> directives in your Apache configuration, those will likely need to be replaced with <i>AddType</i>. If present, the <i>AddEncoding</i> directives will cause Apache 2.x to report that any page, such as the HTML form interface, is compressed, even though it is not. This problem can be very hard to track down.
</p>
<pre>
    # AddEncoding allows you to have certain browsers uncompress
    # information on the fly. Note: Not all browsers support this.
    # Despite the name similarity, the following Add* directives have nothing
    # to do with the FancyIndexing customization directives above
    #
    # AddEncoding x-compress .Z
    # AddEncoding x-gzip .gz .tgz
    #
    # If the AddEncoding directives above are commented-out, then you
    # probably should define those extensions to indicate media types:
    #
    AddType application/x-compress .Z
    AddType application/x-gzip .gz .tgz
</pre>
<p>Restart Apache (assuming Tomcat is already running) and you should be on your way.
</p>



</div>
				<!-- end content -->
				<div class="visualClear"></div>
	</div>
</div></div>
</body></html>