
<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>Hyrax GitHub Source Build - OPeNDAP Documentation</title>
</head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Hyrax_GitHub_Source_Build skin-monobook action-view">
<div id="globalWrapper">
<div id="column-content"><div id="content" class="mw-body-primary" role="main">
	
	
	<h1 id="firstHeading" class="firstHeading" lang="en"><span dir="auto">Hyrax GitHub Source Build</span></h1>
	<div id="bodyContent" class="mw-body">
		<div id="siteSub">From OPeNDAP Documentation</div>
		<div id="contentSub"></div>
		

		<!-- start content -->
<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><p><a href="../index.php/Developer_Info" title="Developer Info">&lt;&lt; back to Developer Info</a>
</p><p>This describes how to get and build Hyrax from our GitHub repositories. Hyrax is a data server that implements the DAP2 and DAP4 protocols, works with a number of different data formats and supports a wide variety of customization options from tailoring the look of the server's web pages to complex server-side processing operations. This page describes how to build the server's source code. If you're working on a Linux or OS/X computer, the process is similar so we describe only the linux case; we do not support building the server on Windows operating systems.
</p><p>To build and install the server, you need to perform three steps:
</p>
<ol>
<li> Set up the computer to build source code (Install a Java compiler; install a C/C++ compiler; add some other tools)
</li>
<li> Build, install the software. It installs with a default configuration that includes sample data. 
</li>
<li> You may need to configure the server for your data
</li>
</ol>
<p>Quick links if you already know the process:
</p>
<ul>
<li> <a rel="nofollow" class="external text" href="https://github.com/opendap/hyrax">New all-in-one repo that uses shell scripts</a>
</li>
<li> <a rel="nofollow" class="external text" href="https://github.com/opendap/libdap4">libdap4 git repo</a>
</li>
<li> <a rel="nofollow" class="external text" href="https://github.com/opendap/bes">BES git repo</a>
</li>
<li> <a rel="nofollow" class="external text" href="https://github.com/opendap/olfs">OLFS git repo</a>
</li>
<li> <a rel="nofollow" class="external text" href="https://github.com/opendap/hyrax-dependencies">Hyrax third-party dependencies git repo</a>
</li>
</ul>
<p><br />
</p>
<div id="toc" class="toc"><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#A_GitHub_semi-automatic_build"><span class="tocnumber">1</span> <span class="toctext">A GitHub semi-automatic build</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="#Build_Hyrax_Using_Bash_Scripts"><span class="tocnumber">1.1</span> <span class="toctext">Build Hyrax Using Bash Scripts</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-3"><a href="#GitHub_Manual_build"><span class="tocnumber">2</span> <span class="toctext">GitHub Manual build</span></a>
<ul>
<li class="toclevel-2 tocsection-4"><a href="#Make_a_Place_to_Build_the_Server"><span class="tocnumber">2.1</span> <span class="toctext">Make a Place to Build the Server</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="#Set_up_a_CentOS_machine_to_build_code"><span class="tocnumber">2.2</span> <span class="toctext">Set up a CentOS machine to build code</span></a>
<ul>
<li class="toclevel-3 tocsection-6"><a href="#Choice_point:"><span class="tocnumber">2.2.1</span> <span class="toctext">Choice point:</span></a>
<ul>
<li class="toclevel-4 tocsection-7"><a href="#Get_the_Hyrax_Dependencies_from_EPEL"><span class="tocnumber">2.2.1.1</span> <span class="toctext">Get the Hyrax Dependencies from EPEL</span></a></li>
<li class="toclevel-4 tocsection-8"><a href="#Compile_the_Hyrax_dependencies"><span class="tocnumber">2.2.1.2</span> <span class="toctext">Compile the Hyrax dependencies</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-2 tocsection-9"><a href="#Build_libdap_and_the_Hyrax_BES_daemon"><span class="tocnumber">2.3</span> <span class="toctext">Build <i>libdap</i> and the Hyrax <i>BES</i> daemon</span></a>
<ul>
<li class="toclevel-3 tocsection-10"><a href="#Get_and_build_libdap4"><span class="tocnumber">2.3.1</span> <span class="toctext">Get and build libdap4</span></a></li>
<li class="toclevel-3 tocsection-11"><a href="#Get_and_build_the_BES_and_all_of_the_modules_shipped_with_Hyrax"><span class="tocnumber">2.3.2</span> <span class="toctext">Get and build the BES and all of the modules shipped with Hyrax</span></a></li>
<li class="toclevel-3 tocsection-12"><a href="#Test_the_BES"><span class="tocnumber">2.3.3</span> <span class="toctext">Test the BES</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-13"><a href="#Build_the_Hyrax_OLFS_web_application"><span class="tocnumber">2.4</span> <span class="toctext">Build the Hyrax OLFS web application</span></a></li>
<li class="toclevel-2 tocsection-14"><a href="#Test_the_server"><span class="tocnumber">2.5</span> <span class="toctext">Test the server</span></a></li>
<li class="toclevel-2 tocsection-15"><a href="#Stopping_the_server"><span class="tocnumber">2.6</span> <span class="toctext">Stopping the server</span></a></li>
<li class="toclevel-2 tocsection-16"><a href="#Building_select_parts_of_the_BES"><span class="tocnumber">2.7</span> <span class="toctext">Building select parts of the BES</span></a></li>
</ul>
</li>
</ul>
</div>

<h1><span class="mw-headline" id="A_GitHub_semi-automatic_build"><span class="mw-headline-number">1</span> A GitHub semi-automatic build</span></h1>
<p>Use git to clone the <a rel="nofollow" class="external text" href="https://github.com/opendap/hyrax">hyrax</a> project and follow the short instructions in the README file. Summarized here, those instructions are described in the following two sections. For this to work you will need a Linux/OSX/Unix computer that is 'set up for software development.' In practice, OSX 10 with the developer tools or CentOS 6 meet these requirements. Our C++ software uses <i>bison</i> 3.x, but we provide that in the <i>hyrax-dependencies</i> repo which is built by the scripts enumerated below.
</p>
<h2><span class="mw-headline" id="Build_Hyrax_Using_Bash_Scripts"><span class="mw-headline-number">1.1</span> Build Hyrax Using Bash Scripts</span></h2>
<p>This should work for a correctly configured CentOS 6 computer. However, if it does not work proceed to the manual build. In fact, these scripts <i>hyrax_clone.sh</i> and <i>hyrax_build.sh</i> simply automate the handful of commands you need to build the code 'by-hand'.
</p>
<dl>
<dt>use bash</dt>
<dd> The shell scripts in this repo assume you are using <i>bash</i>.
</dd>
<dt>set up some environment variables so the server will build an install locally, something that streamlines development</dt>
<dd> <i>source spath.sh</i>
</dd>
<dt>clone the three code repos for the server plus the hyrax dependencies</dt>
<dd> <i>./hyrax_clone.sh -v</i>
</dd>
<dt>build the code, including the dependencies (note that this repo includes CMake and Bison 3)</dt>
<dd> <i>./hyrax_build.sh -v</i>
</dd>
<dt>test the server</dt>
<dd> Start the BES using  <i>besctl start</i>
</dd>
<dd>Start the OLFS using<i>./build/apache-tomcat-7.0.57/bin/startup.sh</i>
</dd>
<dd>Test the server by loooking at <i>http://localhost:8080/opendap</i> in a browser. You should see a directory named <i>data</i> and following that link should lead to more data. The server will be accessible to clients other than a web browser.
</dd>
<dd>To test the BES function independently of the front end, use <i>bescmdln</i> and give it the <i>show version;</i> command, you should see output about different components and their versions. 
</dd>
<dd>Use <i>exit</i> to leave the command line test client.
</dd>
</dl>
<h1><span class="mw-headline" id="GitHub_Manual_build"><span class="mw-headline-number">2</span> GitHub Manual build</span></h1>
<p>In the following, we describe only the build process for CentOS; the one for OS/X is similar and we note the differences where they are significant. We assume you are starting with a 'bare' machine, i.e., one not set up for software development. OSX builders will have to extrapolate from the CentOS commands.
</p>
<h2><span class="mw-headline" id="Make_a_Place_to_Build_the_Server"><span class="mw-headline-number">2.1</span> Make a Place to Build the Server</span></h2>
<p>You need to make a new directory to build the server and set the environment variable <i>prefix</i> to be that directory name. Then export <i>$prefix</i> and add <i>$prefix/bin</i> to <i>$PATH</i>. I'll use <i>hyrax-git</i> for the new directory and assume you're using bash.
</p>
<dl>
<dt>mkdir hyrax
</dt>
<dt>cd hyrax
</dt>
<dt>export prefix=`pwd`
</dt>
<dt>export PATH=$prefix/bin:$PATH
</dt>
</dl>
<h2><span class="mw-headline" id="Set_up_a_CentOS_machine_to_build_code"><span class="mw-headline-number">2.2</span> Set up a CentOS machine to build code</span></h2>
<p>Note that I don't like clicking around to different pages to follow simple directions, so what follows is a short version of the ContOS 6 configuration information we've compiled for people that help us by building RPM packages for Hyrax. The complete instructions are in <a href="../index.php/ConfigureCentos" title="ConfigureCentos"> Configure CentOS</a> and describe how to to set up a CentOS 6 machine to build software. What follows is the condensed version:
</p>
<dl>
<dt>Load a basic software development environment</dt>
<dd><i>yum install java-1.7.0-openjdk java-1.7.0-openjdk-devel ant git gcc-c++ flex bison openssl-devel libuuid-devel readline-devel zlib-devel libjpeg-devel libxml2-devel curl-devel cppunit-devel rpm-devel rpm-build emacs</i>
</dd>
<dt>Check the version of bison</dt>
<dd> Use <i>bison --version</i> to see the version of bison. If it is less than 3.0, get and build the <a rel="nofollow" class="external text" href="http://www.gnu.org/software/bison/">bison 3.x source</a>. Make sure to update <i>PATH</i> so the build will use the new version of bison. The flex from yum should be OK.
</dd>
</dl>
<h3><span class="mw-headline" id="Choice_point:"><span class="mw-headline-number">2.2.1</span> Choice point:</span></h3>
<p>You either need to get and build the Hyrax dependencies from source (see <a href="#Compile_the_Hyrax_dependencies"> Compile the Hyrax dependencies</a>) <i>or</i> install EPEL for CentOS and then use <i>yum</i> to install the dependencies, with the caveat that as of Hyrax 1.10, EPEL does not have, or does not have a recent enough version of GDAL, Gridfields, or HDF-EOS2 to build our code, so those parts of Hyrax won't build if you go the EPEL route. Neither way is too hard; building the source takes a bit longer but results in a more complete server and is required if you're going to build a binary RPM distribution for the server.
</p>
<h4><span class="mw-headline" id="Get_the_Hyrax_Dependencies_from_EPEL"><span class="mw-headline-number">2.2.1.1</span> Get the Hyrax Dependencies from EPEL</span></h4>
<dl>
<dt>EPEL</dt>
<dd> Get <a rel="nofollow" class="external text" href="http://mirror.pnl.gov/epel/6/i386/epel-release-6-8.noarch.rpm">epel-release-6-8.noarch.rpm</a> and install it using <i>sudo yum install epel-release-6-8.noarch.rpm</i>. 
</dd>
</dl>
<dl>
<dt>...Then install packages needed to read various file formats</dt>
<dd> <i>yum install netcdf-devel hdf-devel hdf5-devel libicu-devel cfitsio-devel</i>
</dd>
</dl>
<h4><span class="mw-headline" id="Compile_the_Hyrax_dependencies"><span class="mw-headline-number">2.2.1.2</span> Compile the Hyrax dependencies</span></h4>
<dl>
<dd>Note: If you installed packages for netcdf, etc., using EPEL as described above, skip this step.
</dd>
</dl>
<p>Get the hyrax-dependencies <i>git repo</i> and build it. Unlike many source packages, there is no need to run a configure script, just <i>make</i> will do. However, the Makefile in this package expects <i>$prefix</i> to be set as described above. It will put all of the Hyrax server dependencies in a subdirectory called <i>$prefix/deps</i>.
</p>
<dl>
<dt>(make sure you're in the directory set to <i>$prefix</i>)
</dt>
<dt>git clone <a rel="nofollow" class="external free" href="https://github.com/opendap/hyrax-dependencies">https://github.com/opendap/hyrax-dependencies</a>
</dt>
<dt>cd hyrax-dependencies
</dt>
<dt>make --jobs=9</dt>
<dd> The --jobs=N runs a parallel build with at most N simultaneous compile operations. This will result in a huge performance improvement on multi-core machines. <i>-jN</i> is the short form for the option.
</dd>
<dt>cd ..</dt>
<dd> Go back up to <i>$prefix</i>
</dd>
<dt>Add <i>$prefix/deps/bin</i> to <i>PATH</i></dt>
<dd> export PATH=$prefix/deps/bin:$PATH
</dd>
<dt>On Linux <i>export LD_LIBRARY_FLAGS=$prefix/deps/libs</i></dt>
<dd> You will need to set the environment variable <i>LD_LIBRARY_FLAGS</i> to reference the directory where the dependencies package stored shared libraries or the NcML handler will not find the library. This environment variable needs to be defined in the shell used to start the server. For OS/X, skip this step.
</dd>
</dl>
<h2><span class="mw-headline" id="Build_libdap_and_the_Hyrax_BES_daemon"><span class="mw-headline-number">2.3</span> Build <i>libdap</i> and the Hyrax <i>BES</i> daemon</span></h2>
<h4><span class="mw-headline" id="Get_and_build_libdap4"><span class="mw-headline-number">2.3.1</span> Get and build libdap4</span></h4>
<p>Build, test and install libdap4 into $prefix:
</p>
<dl>
<dt>git clone <a rel="nofollow" class="external free" href="https://github.com/opendap/libdap4">https://github.com/opendap/libdap4</a>
</dt>
<dt>cd libdap4
</dt>
<dt>autoreconf --force --install --verbose
</dt>
<dt>./configure --prefix=$prefix --enable-developer 
</dt>
<dt>make -j9
</dt>
<dt>make check -j9
</dt>
<dt>make install
</dt>
<dt>cd ..</dt>
<dd> Go back up to <i>$prefix</i>
</dd>
</dl>
<h4><span class="mw-headline" id="Get_and_build_the_BES_and_all_of_the_modules_shipped_with_Hyrax"><span class="mw-headline-number">2.3.2</span> Get and build the BES and all of the modules shipped with Hyrax</span></h4>
<p>Build, test and install the BES and its modules
</p>
<dl>
<dt>git clone <a rel="nofollow" class="external free" href="https://github.com/opendap/bes">https://github.com/opendap/bes</a></dt>
<dd> Clone the BES from GitHub
</dd>
<dt>cd bes
</dt>
<dt>git submodule update --init</dt>
<dd> This will clone each of the N modules into the directory <i>modules</i>. If you <i>don't</i> want to clone all of the modules, skip this step and see the note for the next step. See <a rel="nofollow" class="external text" href="http://git-scm.com/docs/git-submodule">git submodule</a> for information about all you can do with git's submodule command. Also note that this does not checkout a particular branch for the submodules; the modules are left in the 'detached head' state. To checkout a particular branch like 'master', which is important if you'll be making changes to that code, use <i>git submodule foreach 'git checkout master' </i>. 
</dd>
<dt>git submodule foreach 'git checkout master'</dt>
<dd> This will get all of the modules (which are "headless" images of the master branch) correctly associated with the github master branch.
</dd>
<dt>ln -s configure_modules.ac configure.ac</dt>
<dd> This is the one non-standard operation in the clone, configure and build of the BES. If you don't want to build the modules, you would use <i>ln -s configure_standard.ac configure.ac</i> instead (and not clone the modules in the step above)
</dd>
<dt>autoreconf --force --install --verbose</dt>
<dd> You can use -fiv instead of the long options. These mean, when starting from a freshly cloned repo, run all of the autotools commands and install all of the needed scripts.
</dd>
<dt>./configure --prefix=$prefix --enable-developer --with-dependencies=$prefix/deps</dt>
<dd> Note that the --with-deps... is not needed if you load the dependencies from RPMs or otherwise have them installed an generally accessible on the build machine.
</dd>
<dt>make -j9
</dt>
<dt>make check -k</dt>
<dd> Some tests may fail and <i>-k</i> ignores that and keeps make marching along. We are not using <i>--j9</i> as we did with libdap because some of the BES tests fail when run from a parallel build.
</dd>
<dt>make install
</dt>
<dt>cd ..</dt>
<dd> Go back up to <i>$prefix</i>
</dd>
</dl>
<h4><span class="mw-headline" id="Test_the_BES"><span class="mw-headline-number">2.3.3</span> Test the BES</span></h4>
<p>Start the BES and verify that all of the modules build correctly.
</p>
<dl>
<dt>besctl start</dt>
<dd> Start the BES. Given that <i>$prefix/bin</i> is on your <i>$PATH</i>, this should start the BES. You will not need to be root if you used the <i>--enable-developer</i> switch with configure (as shown above), otherwise you should run <i>sudo besctl start</i> with the caveat that as root <i>$prefix/bin</i> will probably not be n your <i>$PATH</i>.
</dd>
<dd>If there's an error (e.g., you tried to start as a regular user but need to be root), edit bes.conf to be a real user (yourself?) in a real group (use 'groups' to see which groups you are in) and also check that the bes.log file is <i>not</i> owned by root. 
</dd>
<dd>Restart.
</dd>
<dt>bescmdln</dt>
<dd> Now that the BES is running, start the BES testing tool
</dd>
<dt>show version;</dt>
<dd> Send the BES the version command to see if it's running
</dd>
<dd>Take a quick look at the output. There should be entries for libdap, bes and all of the modules.
</dd>
<dt>exit</dt>
<dd> Exit the testing tool
</dd>
</dl>
<p>Note that even though you have exited the <i>bescmdln</i> test tool, the BES is still running. That's fine - we'll use it in just a bit - but if you want to shut it down, use <i>besctl stop</i>, or <i>besctl pids</i> to see the daemon's processes. If the BES is not stopping, <i>besctl kill</i> will stop all BES processes without waiting for them to complete their current task.
</p>
<h2><span class="mw-headline" id="Build_the_Hyrax_OLFS_web_application"><span class="mw-headline-number">2.4</span> Build the Hyrax OLFS web application</span></h2>
<p>The OLFS is a java servlet built using ant. The OLFS is a java servlet web application and runs with Tomcat, Glassfish, etc. You need a copy of Tomcat, but our servlet does not work with the RPM version of Tomcat. Get <a rel="nofollow" class="external text" href="http://tomcat.apache.org/download-70.cgi">Tomcat 7 from Apache</a>. Note that if you built the dependencies from source using the <i>hyrac-dependencies-1.10.tar</i> then there is a copy of Tomcat in the <i>hyrax-dependecies/extra_downloads directory. You can unpack the Tomcat tar file in </i>$prefix<i>. I'll assume you have the Apache Tomcat tar file in </i>$prefix<i>.</i>
</p>
<dl>
<dt>tar -xzf apache-tomcat-7.0.57.tar.gz</dt>
<dd> Expand the Tomcat tar ball
</dd>
<dt>git clone <a rel="nofollow" class="external free" href="https://github.com/opendap/olfs">https://github.com/opendap/olfs</a></dt>
<dd> Get the OLFS source code
</dd>
<dt>cd olfs</dt>
<dd> change directory to the OLFS source
</dd>
<dt>ant server</dt>
<dd> Build it
</dd>
<dt>cp build/dist/opendap.war ../apache-tomcat-7.0.57/webapps/</dt>
<dd> Copy the opendap web archive to the tomcat webapps direcotry.
</dd>
<dt>cd ..</dt>
<dd> Go up to <i>$prefix</i>
</dd>
<dt>./apache-tomcat-7.0.57/bin/startup.sh</dt>
<dd> Start Tomcat
</dd>
</dl>
<h2><span class="mw-headline" id="Test_the_server"><span class="mw-headline-number">2.5</span> Test the server</span></h2>
<p>You can test the server several ways, but the most fun is to use a web browser. The URL <i><a rel="nofollow" class="external free" href="http://">http://</a>&lt;machine&gt;:8080/opendap</i> should return a page pointing to a collection of test datasets bundled with the server. You can also use <i>curl</i>, <i>wget</i> or any application that can read from OpenDAP servers (e.g., Matlab, Octave, ArcGIS, IDL, ...).
</p>
<h2><span class="mw-headline" id="Stopping_the_server"><span class="mw-headline-number">2.6</span> Stopping the server</span></h2>
<p>Stop both the BES and Apache
</p>
<dl>
<dt>besctl stop
</dt>
<dt>./apache-tomcat-7.0.57/bin/shutdown.sh
</dt>
</dl>
<p>Note that there is also a <i>hyraxctl</i> script that provides a way to start and stop Hyrax without you (or <i>init.d</i>) having to type separate commands for both the BES and OLFS. This script is part of the BES software you cloned from git.
</p>
<h2><span class="mw-headline" id="Building_select_parts_of_the_BES"><span class="mw-headline-number">2.7</span> Building select parts of the BES</span></h2>
<p>Building just the BES and one of more of its handlers/modules is not at all hard to do with a checkout of code from git. In the above section on building the BES, simply skip the step where the submodules are cloned (<i>git submodule update --init</i>) and link configure.ac to <i>configure_standard.ac</i>. The rest of the process is as shown. The end result is a BES daemon without any of the standard Hyrax modules (but support for DAP will be built if <i>libdap</i> is found by the configure script).
</p><p>To build modules for the BES, simply go to <i>$prefix</i>, clone their git repo and build them, taking care to pass set <i>$prefix</i> when calling the module's <i>configure</i> script. 
</p><p>Note that it is easy to combine the 'build it all' and 'build just one' processes so that a complete Hyrax BES can be built in one go and then a new module/handler not included in the BES git repo can be built and used. Each module we have on GitHub has a <i>configure.ac</i>, <i>Makefile.am</i>, etc., that will support both kinds of builds and <a href="../index.php/Configuration_of_BES_Modules" title="Configuration of BES Modules">Configuration of BES Modules</a> explains how to take a module/handler that builds as a standalone module and tweak the build scripts so that it's fully integrated into the Hyrax BES build, too.
</p>



</div>
				<!-- end content -->
				<div class="visualClear"></div>
	</div>
</div></div>
</body></html>